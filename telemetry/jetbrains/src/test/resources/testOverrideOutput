// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// THIS FILE IS GENERATED! DO NOT EDIT BY HAND!
@file:Suppress("unused", "MemberVisibilityCanBePrivate")

package software.aws.toolkits.telemetry

import com.intellij.openapi.project.Project
import java.time.Instant
import kotlin.Boolean
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import software.amazon.awssdk.services.toolkittelemetry.model.Unit
import software.aws.toolkits.core.ConnectionSettings
import software.aws.toolkits.jetbrains.services.telemetry.MetricEventMetadata
import software.aws.toolkits.jetbrains.services.telemetry.TelemetryService

/**
 * The result of the operation
 */
public enum class Result(
    private val `value`: String,
) {
    Succeeded("Succeeded"),
    Unknown("unknown"),
    ;

    override fun toString(): String = value

    public companion object {
        public fun from(type: String): Result = values().firstOrNull { it.value == type } ?: Unknown
    }
}

public object MetadataTelemetry {
    /**
     * It does not actually have a result, yep
     */
    public fun hasResult(
        project: Project?,
        passive: Boolean = false,
        `value`: Double = 1.0,
        createTime: Instant = Instant.now(),
    ) {
        TelemetryService.getInstance().record(project) {
            datum("metadata_hasResult") {
                createTime(createTime)
                unit(Unit.NONE)
                value(value)
                passive(passive)
            }
        }
    }

    /**
     * It does not actually have a result, yep
     */
    public fun hasResult(
        connectionSettings: ConnectionSettings? = null,
        passive: Boolean = false,
        `value`: Double = 1.0,
        createTime: Instant = Instant.now(),
    ) {
        TelemetryService.getInstance().record(connectionSettings) {
            datum("metadata_hasResult") {
                createTime(createTime)
                unit(Unit.NONE)
                value(value)
                passive(passive)
            }
        }
    }

    /**
     * It does not actually have a result, yep
     */
    public fun hasResult(
        metadata: MetricEventMetadata,
        passive: Boolean = false,
        `value`: Double = 1.0,
        createTime: Instant = Instant.now(),
    ) {
        TelemetryService.getInstance().record(metadata) {
            datum("metadata_hasResult") {
                createTime(createTime)
                unit(Unit.NONE)
                value(value)
                passive(passive)
            }
        }
    }
}
