// Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// THIS FILE IS GENERATED! DO NOT EDIT BY HAND!
@file:Suppress("unused", "MemberVisibilityCanBePrivate")

package software.aws.toolkits.telemetry

import com.intellij.openapi.project.Project
import java.time.Instant
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import software.amazon.awssdk.services.toolkittelemetry.model.Unit
import software.aws.toolkits.jetbrains.services.telemetry.MetricEventMetadata
import software.aws.toolkits.jetbrains.services.telemetry.TelemetryService

/**
 * The lambda runtime
 */
enum class LambdaRuntime(
    private val value: String
) {
    Dotnetcore21("dotnetcore2.1"),

    Nodejs12x("nodejs12.x"),

    Unknown("unknown");

    override fun toString(): String = value

    companion object {
        fun from(type: String): LambdaRuntime = values().firstOrNull { it.value == type } ?: Unknown
    }
}

object LambdaTelemetry {
    /**
     * called when creating lambdas remotely
     */
    fun create(
        project: Project? = null,
        lambdaRuntime: LambdaRuntime,
        arbitraryString: String,
        value: Double = 1.0,
        createTime: Instant = Instant.now()
    ) {
        TelemetryService.getInstance().record(project) {
            datum("lambda_create") {
                createTime(createTime)
                unit(Unit.NONE)
                value(value)
                passive(false)
                metadata("lambdaruntime", lambdaRuntime.toString())
                metadata("arbitrarystring", arbitraryString)
            }
        }
    }

    /**
     * called when creating lambdas remotely
     */
    fun create(
        metadata: MetricEventMetadata,
        lambdaRuntime: LambdaRuntime,
        arbitraryString: String,
        value: Double = 1.0,
        createTime: Instant = Instant.now()
    ) {
        TelemetryService.getInstance().record(metadata) {
            datum("lambda_create") {
                createTime(createTime)
                unit(Unit.NONE)
                value(value)
                passive(false)
                metadata("lambdaruntime", lambdaRuntime.toString())
                metadata("arbitrarystring", arbitraryString)
            }
        }
    }

    /**
     * called when deleting lambdas remotely
     */
    fun delete(
        project: Project? = null,
        duration: Double,
        booltype: Boolean,
        value: Double = 1.0,
        createTime: Instant = Instant.now()
    ) {
        TelemetryService.getInstance().record(project) {
            datum("lambda_delete") {
                createTime(createTime)
                unit(Unit.NONE)
                value(value)
                passive(false)
                metadata("duration", duration.toString())
                metadata("booltype", booltype.toString())
            }
        }
    }

    /**
     * called when deleting lambdas remotely
     */
    fun delete(
        metadata: MetricEventMetadata,
        duration: Double,
        booltype: Boolean,
        value: Double = 1.0,
        createTime: Instant = Instant.now()
    ) {
        TelemetryService.getInstance().record(metadata) {
            datum("lambda_delete") {
                createTime(createTime)
                unit(Unit.NONE)
                value(value)
                passive(false)
                metadata("duration", duration.toString())
                metadata("booltype", booltype.toString())
            }
        }
    }

    /**
     * called when invoking lambdas remotely
     */
    fun remoteinvoke(
        project: Project? = null,
        lambdaRuntime: LambdaRuntime? = null,
        inttype: Int,
        value: Double = 1.0,
        createTime: Instant = Instant.now()
    ) {
        TelemetryService.getInstance().record(project) {
            datum("lambda_remoteinvoke") {
                createTime(createTime)
                unit(Unit.NONE)
                value(value)
                passive(false)
                if(lambdaRuntime != null) {
                    metadata("lambdaruntime", lambdaRuntime.toString())
                }
                metadata("inttype", inttype.toString())
            }
        }
    }

    /**
     * called when invoking lambdas remotely
     */
    fun remoteinvoke(
        metadata: MetricEventMetadata,
        lambdaRuntime: LambdaRuntime? = null,
        inttype: Int,
        value: Double = 1.0,
        createTime: Instant = Instant.now()
    ) {
        TelemetryService.getInstance().record(metadata) {
            datum("lambda_remoteinvoke") {
                createTime(createTime)
                unit(Unit.NONE)
                value(value)
                passive(false)
                if(lambdaRuntime != null) {
                    metadata("lambdaruntime", lambdaRuntime.toString())
                }
                metadata("inttype", inttype.toString())
            }
        }
    }
}

object NoTelemetry {
    /**
     * called when invoking lambdas remotely
     */
    fun metadata(
        project: Project? = null,
        value: Double = 1.0,
        createTime: Instant = Instant.now()
    ) {
        TelemetryService.getInstance().record(project) {
            datum("no_metadata") {
                createTime(createTime)
                unit(Unit.NONE)
                value(value)
                passive(false)
            }
        }
    }

    /**
     * called when invoking lambdas remotely
     */
    fun metadata(
        metadata: MetricEventMetadata,
        value: Double = 1.0,
        createTime: Instant = Instant.now()
    ) {
        TelemetryService.getInstance().record(metadata) {
            datum("no_metadata") {
                createTime(createTime)
                unit(Unit.NONE)
                value(value)
                passive(false)
            }
        }
    }
}

object PassiveTelemetry {
    /**
     * a passive metric
     */
    fun passive(
        project: Project? = null,
        value: Double = 1.0,
        createTime: Instant = Instant.now()
    ) {
        TelemetryService.getInstance().record(project) {
            datum("passive_passive") {
                createTime(createTime)
                unit(Unit.NONE)
                value(value)
                passive(true)
            }
        }
    }

    /**
     * a passive metric
     */
    fun passive(
        metadata: MetricEventMetadata,
        value: Double = 1.0,
        createTime: Instant = Instant.now()
    ) {
        TelemetryService.getInstance().record(metadata) {
            datum("passive_passive") {
                createTime(createTime)
                unit(Unit.NONE)
                value(value)
                passive(true)
            }
        }
    }
}
