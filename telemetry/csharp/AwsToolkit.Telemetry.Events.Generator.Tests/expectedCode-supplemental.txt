//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Amazon.AwsToolkit.Telemetry.Events;
using Amazon.AwsToolkit.Telemetry.Events.Core;
using System;
using System.Collections.Generic;

/// --------------------------------------------------------------------------------
/// This file is generated from https://github.com/aws/aws-toolkit-common/tree/master/telemetry
/// --------------------------------------------------------------------------------

namespace Test
{
    
    
    /// Contains methods to record telemetry events
    public static partial class ToolkitTelemetryEvent
    {
        
        /// Records Telemetry Event:
        /// Emits milliseconds
        public static void RecordEmitSomeIntMs(this ITelemetryLogger telemetryLogger, EmitSomeIntMs payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "emit_someIntMs";
                datum.Unit = Unit.Milliseconds;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Emits something without a unit defined
        public static void RecordEmitNoUnit(this ITelemetryLogger telemetryLogger, EmitNoUnit payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "emit_noUnit";
                datum.Unit = Unit.None;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Emits a bunch of metadata varieties
        public static void RecordEmitSomeBigBlob(this ITelemetryLogger telemetryLogger, EmitSomeBigBlob payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "emit_someBigBlob";
                datum.Unit = Unit.Count;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }

                datum.AddMetadata("duration", payload.Duration);

                datum.AddMetadata("attempts", payload.Attempts);

                datum.AddMetadata("enabled", payload.Enabled);

                datum.AddMetadata("name", payload.Name);

                datum.AddMetadata("runtime", payload.Runtime);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Emits a bunch of metadata varieties - required not set
        public static void RecordEmitSomeBigBlob2(this ITelemetryLogger telemetryLogger, EmitSomeBigBlob2 payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "emit_someBigBlob2";
                datum.Unit = Unit.Count;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }

                datum.AddMetadata("duration", payload.Duration);

                datum.AddMetadata("attempts", payload.Attempts);

                datum.AddMetadata("enabled", payload.Enabled);

                datum.AddMetadata("name", payload.Name);

                datum.AddMetadata("runtime", payload.Runtime);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Emits a bunch of optional metadata varieties
        public static void RecordEmitSomeBigOptionalBlob(this ITelemetryLogger telemetryLogger, EmitSomeBigOptionalBlob payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "emit_someBigOptionalBlob";
                datum.Unit = Unit.Count;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }

                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }

                if (payload.Attempts.HasValue)
                {
                    datum.AddMetadata("attempts", payload.Attempts.Value);
                }

                if (payload.Enabled.HasValue)
                {
                    datum.AddMetadata("enabled", payload.Enabled.Value);
                }

                datum.AddMetadata("name", payload.Name);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
    }
    
    /// Emits milliseconds
    public sealed class EmitSomeIntMs : BaseTelemetryEvent
    {
    }
    
    /// Emits something without a unit defined
    public sealed class EmitNoUnit : BaseTelemetryEvent
    {
    }
    
    /// Emits a bunch of metadata varieties
    public sealed class EmitSomeBigBlob : BaseTelemetryEvent
    {
        
        /// The duration of the operation in milliseconds
        public double Duration;
        
        /// A generic number of attempts
        public int Attempts;
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        /// A generic name metadata
        public string Name;
        
        /// The lambda runtime
        public Runtime Runtime;
    }
    
    /// Emits a bunch of metadata varieties - required not set
    public sealed class EmitSomeBigBlob2 : BaseTelemetryEvent
    {
        
        /// The duration of the operation in milliseconds
        public double Duration;
        
        /// A generic number of attempts
        public int Attempts;
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        /// A generic name metadata
        public string Name;
        
        /// The lambda runtime
        public Runtime Runtime;
    }
    
    /// Emits a bunch of optional metadata varieties
    public sealed class EmitSomeBigOptionalBlob : BaseTelemetryEvent
    {
        
        /// Optional - The duration of the operation in milliseconds
        public System.Double? Duration;
        
        /// Optional - A generic number of attempts
        public System.Int32? Attempts;
        
        /// Optional - True if turned on, false if turned off
        public System.Boolean? Enabled;
        
        /// Optional - A generic name metadata
        public string Name;
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
    }
}
