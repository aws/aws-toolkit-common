//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Amazon.AwsToolkit.Telemetry.Events.Core;
using System;
using System.Collections.Generic;

/// --------------------------------------------------------------------------------
/// This file is generated from https://github.com/aws/aws-toolkit-common/tree/main/telemetry
/// --------------------------------------------------------------------------------

namespace Amazon.AwsToolkit.Telemetry.Events.Generated
{
    
    
    /// Contains methods to record telemetry events
    public static partial class ToolkitTelemetryEvent
    {
        
        /// Records Telemetry Event:
        /// Execution of Custom Policy Checks in IAM Policy Checks
        public static void RecordAccessanalyzerIamPolicyChecksCustomChecks(this ITelemetryLogger telemetryLogger, AccessanalyzerIamPolicyChecksCustomChecks payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "accessanalyzer_iamPolicyChecksCustomChecks";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("cfnParameterFileUsed", payload.CfnParameterFileUsed);

                datum.AddMetadata("checkType", payload.CheckType);

                datum.AddMetadata("documentType", payload.DocumentType);

                datum.AddMetadata("findingsCount", payload.FindingsCount);

                datum.AddMetadata("inputPolicyType", payload.InputPolicyType);

                datum.AddMetadata("referencePolicyType", payload.ReferencePolicyType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Execution of Validate Policy in IAM Policy Checks
        public static void RecordAccessanalyzerIamPolicyChecksValidatePolicy(this ITelemetryLogger telemetryLogger, AccessanalyzerIamPolicyChecksValidatePolicy payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "accessanalyzer_iamPolicyChecksValidatePolicy";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("cfnParameterFileUsed", payload.CfnParameterFileUsed);

                datum.AddMetadata("documentType", payload.DocumentType);

                datum.AddMetadata("findingsCount", payload.FindingsCount);

                datum.AddMetadata("inputPolicyType", payload.InputPolicyType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Captures Approach generation process
        public static void RecordAmazonqApproachInvoke(this ITelemetryLogger telemetryLogger, AmazonqApproachInvoke payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_approachInvoke";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                datum.AddMetadata("amazonqGenerateApproachIteration", payload.AmazonqGenerateApproachIteration);

                datum.AddMetadata("amazonqGenerateApproachLatency", payload.AmazonqGenerateApproachLatency);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                if (payload.Result.HasValue)
                {
                    datum.AddMetadata("result", payload.Result.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User clicked on the thumbs down button to say that they are unsatisfied
        public static void RecordAmazonqApproachThumbsDown(this ITelemetryLogger telemetryLogger, AmazonqApproachThumbsDown payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_approachThumbsDown";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User clicked on the thumbs up button, to mention that they are satisfied
        public static void RecordAmazonqApproachThumbsUp(this ITelemetryLogger telemetryLogger, AmazonqApproachThumbsUp payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_approachThumbsUp";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// File extension was ignored 'count' many times during bundling process
        public static void RecordAmazonqBundleExtensionIgnored(this ITelemetryLogger telemetryLogger, AmazonqBundleExtensionIgnored payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_bundleExtensionIgnored";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("count", payload.Count);

                datum.AddMetadata("filenameExt", payload.FilenameExt);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Captures Code Generation generation process
        public static void RecordAmazonqCodeGenerationInvoke(this ITelemetryLogger telemetryLogger, AmazonqCodeGenerationInvoke payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_codeGenerationInvoke";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqCodeGenerationResult", payload.AmazonqCodeGenerationResult);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                datum.AddMetadata("amazonqGenerateCodeIteration", payload.AmazonqGenerateCodeIteration);

                datum.AddMetadata("amazonqGenerateCodeResponseLatency", payload.AmazonqGenerateCodeResponseLatency);

                if (payload.AmazonqNumberOfFilesGenerated.HasValue)
                {
                    datum.AddMetadata("amazonqNumberOfFilesGenerated", payload.AmazonqNumberOfFilesGenerated.Value);
                }

                if (payload.AmazonqNumberOfReferences.HasValue)
                {
                    datum.AddMetadata("amazonqNumberOfReferences", payload.AmazonqNumberOfReferences.Value);
                }

                datum.AddMetadata("amazonqRepositorySize", payload.AmazonqRepositorySize);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                if (payload.Result.HasValue)
                {
                    datum.AddMetadata("result", payload.Result.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User clicked on the thumbs down button to say that they are unsatisfied
        public static void RecordAmazonqCodeGenerationThumbsDown(this ITelemetryLogger telemetryLogger, AmazonqCodeGenerationThumbsDown payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_codeGenerationThumbsDown";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User clicked on the thumbs up button to say that they are unsatisfied
        public static void RecordAmazonqCodeGenerationThumbsUp(this ITelemetryLogger telemetryLogger, AmazonqCodeGenerationThumbsUp payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_codeGenerationThumbsUp";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Captures createUploadUrl invocation process
        public static void RecordAmazonqCreateUpload(this ITelemetryLogger telemetryLogger, AmazonqCreateUpload payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_createUpload";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                if (payload.AmazonqRepositorySize.HasValue)
                {
                    datum.AddMetadata("amazonqRepositorySize", payload.AmazonqRepositorySize.Value);
                }

                if (payload.AmazonqUploadIntent.HasValue)
                {
                    datum.AddMetadata("amazonqUploadIntent", payload.AmazonqUploadIntent.Value);
                }

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                if (payload.Result.HasValue)
                {
                    datum.AddMetadata("result", payload.Result.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Captures end of the conversation with amazonq /dev
        public static void RecordAmazonqEndChat(this ITelemetryLogger telemetryLogger, AmazonqEndChat payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_endChat";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                if (payload.AmazonqEndOfTheConversationLatency.HasValue)
                {
                    datum.AddMetadata("amazonqEndOfTheConversationLatency", payload.AmazonqEndOfTheConversationLatency.Value);
                }

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// When a user interacts with a message in the conversation
        public static void RecordAmazonqInteractWithMessage(this ITelemetryLogger telemetryLogger, AmazonqInteractWithMessage payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_interactWithMessage";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                if (payload.CwsprChatAcceptedCharactersLength.HasValue)
                {
                    datum.AddMetadata("cwsprChatAcceptedCharactersLength", payload.CwsprChatAcceptedCharactersLength.Value);
                }

                if (payload.CwsprChatAcceptedNumberOfLines.HasValue)
                {
                    datum.AddMetadata("cwsprChatAcceptedNumberOfLines", payload.CwsprChatAcceptedNumberOfLines.Value);
                }

                if (payload.CwsprChatCodeBlockIndex.HasValue)
                {
                    datum.AddMetadata("cwsprChatCodeBlockIndex", payload.CwsprChatCodeBlockIndex.Value);
                }

                datum.AddMetadata("cwsprChatConversationId", payload.CwsprChatConversationId);

                if (payload.CwsprChatHasProjectContext.HasValue)
                {
                    datum.AddMetadata("cwsprChatHasProjectContext", payload.CwsprChatHasProjectContext.Value);
                }

                if (payload.CwsprChatHasReference.HasValue)
                {
                    datum.AddMetadata("cwsprChatHasReference", payload.CwsprChatHasReference.Value);
                }

                datum.AddMetadata("cwsprChatInteractionTarget", payload.CwsprChatInteractionTarget);

                datum.AddMetadata("cwsprChatInteractionType", payload.CwsprChatInteractionType);

                datum.AddMetadata("cwsprChatMessageId", payload.CwsprChatMessageId);

                datum.AddMetadata("cwsprChatProgrammingLanguage", payload.CwsprChatProgrammingLanguage);

                if (payload.CwsprChatTotalCodeBlocks.HasValue)
                {
                    datum.AddMetadata("cwsprChatTotalCodeBlocks", payload.CwsprChatTotalCodeBlocks.Value);
                }

                if (payload.CwsprChatUserIntent.HasValue)
                {
                    datum.AddMetadata("cwsprChatUserIntent", payload.CwsprChatUserIntent.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User applied code changes generated for the task.
        public static void RecordAmazonqIsAcceptedCodeChanges(this ITelemetryLogger telemetryLogger, AmazonqIsAcceptedCodeChanges payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_isAcceptedCodeChanges";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                datum.AddMetadata("amazonqNumberOfFilesAccepted", payload.AmazonqNumberOfFilesAccepted);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("enabled", payload.Enabled);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User has accepted the approach generated
        public static void RecordAmazonqIsApproachAccepted(this ITelemetryLogger telemetryLogger, AmazonqIsApproachAccepted payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_isApproachAccepted";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("enabled", payload.Enabled);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User asked to regenerate code generation with a comment
        public static void RecordAmazonqIsProvideFeedbackForCodeGen(this ITelemetryLogger telemetryLogger, AmazonqIsProvideFeedbackForCodeGen payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_isProvideFeedbackForCodeGen";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("enabled", payload.Enabled);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User reviewed changes
        public static void RecordAmazonqIsReviewedChanges(this ITelemetryLogger telemetryLogger, AmazonqIsReviewedChanges payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_isReviewedChanges";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("enabled", payload.Enabled);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User modified source folder
        public static void RecordAmazonqModifySourceFolder(this ITelemetryLogger telemetryLogger, AmazonqModifySourceFolder payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_modifySourceFolder";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                if (payload.Result.HasValue)
                {
                    datum.AddMetadata("result", payload.Result.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Captures startConversation invocation process
        public static void RecordAmazonqStartConversationInvoke(this ITelemetryLogger telemetryLogger, AmazonqStartConversationInvoke payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_startConversationInvoke";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                if (payload.Result.HasValue)
                {
                    datum.AddMetadata("result", payload.Result.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Client side invocation of the AmazonQ Unit Test Generation
        public static void RecordAmazonqUtgGenerateTests(this ITelemetryLogger telemetryLogger, AmazonqUtgGenerateTests payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_utgGenerateTests";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.AcceptedCharactersCount.HasValue)
                {
                    datum.AddMetadata("acceptedCharactersCount", payload.AcceptedCharactersCount.Value);
                }

                if (payload.AcceptedCount.HasValue)
                {
                    datum.AddMetadata("acceptedCount", payload.AcceptedCount.Value);
                }

                if (payload.AcceptedLinesCount.HasValue)
                {
                    datum.AddMetadata("acceptedLinesCount", payload.AcceptedLinesCount.Value);
                }

                if (payload.ArtifactsUploadDuration.HasValue)
                {
                    datum.AddMetadata("artifactsUploadDuration", payload.ArtifactsUploadDuration.Value);
                }

                if (payload.BuildPayloadBytes.HasValue)
                {
                    datum.AddMetadata("buildPayloadBytes", payload.BuildPayloadBytes.Value);
                }

                if (payload.BuildZipFileBytes.HasValue)
                {
                    datum.AddMetadata("buildZipFileBytes", payload.BuildZipFileBytes.Value);
                }

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("cwsprChatProgrammingLanguage", payload.CwsprChatProgrammingLanguage);

                if (payload.GeneratedCharactersCount.HasValue)
                {
                    datum.AddMetadata("generatedCharactersCount", payload.GeneratedCharactersCount.Value);
                }

                if (payload.GeneratedCount.HasValue)
                {
                    datum.AddMetadata("generatedCount", payload.GeneratedCount.Value);
                }

                if (payload.GeneratedLinesCount.HasValue)
                {
                    datum.AddMetadata("generatedLinesCount", payload.GeneratedLinesCount.Value);
                }

                datum.AddMetadata("hasUserPromptSupplied", payload.HasUserPromptSupplied);

                if (payload.IsCodeBlockSelected.HasValue)
                {
                    datum.AddMetadata("isCodeBlockSelected", payload.IsCodeBlockSelected.Value);
                }

                datum.AddMetadata("isFileInWorkspace", payload.IsFileInWorkspace);

                datum.AddMetadata("isSupportedLanguage", payload.IsSupportedLanguage);

                datum.AddMetadata("jobGroup", payload.JobGroup);

                datum.AddMetadata("jobId", payload.JobId);

                if (payload.PerfClientLatency.HasValue)
                {
                    datum.AddMetadata("perfClientLatency", payload.PerfClientLatency.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Captures if Q chat panel is successfully viewed or not
        public static void RecordAmazonqViewChatPanel(this ITelemetryLogger telemetryLogger, AmazonqViewChatPanel payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "amazonq_viewChatPanel";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copying an API Gateway remote URL
        public static void RecordApigatewayCopyUrl(this ITelemetryLogger telemetryLogger, ApigatewayCopyUrl payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apigateway_copyUrl";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Invoking one simulated API Gateway call using the SAM cli
        public static void RecordApigatewayInvokeLocal(this ITelemetryLogger telemetryLogger, ApigatewayInvokeLocal payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apigateway_invokeLocal";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("debug", payload.Debug);

                datum.AddMetadata("httpMethod", payload.HttpMethod);

                if (payload.LambdaArchitecture.HasValue)
                {
                    datum.AddMetadata("lambdaArchitecture", payload.LambdaArchitecture.Value);
                }

                datum.AddMetadata("result", payload.Result);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Calling a remote API Gateway
        public static void RecordApigatewayInvokeRemote(this ITelemetryLogger telemetryLogger, ApigatewayInvokeRemote payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apigateway_invokeRemote";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("httpMethod", payload.HttpMethod);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when starting a local API Gateway server simulator with SAM. Only called when starting it for long running testing, not for single invokes
        public static void RecordApigatewayStartLocalServer(this ITelemetryLogger telemetryLogger, ApigatewayStartLocalServer payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apigateway_startLocalServer";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Click Install button in Getting Started Walkthrough
        public static void RecordAppBuilderInstallTool(this ITelemetryLogger telemetryLogger, AppBuilderInstallTool payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appBuilder_installTool";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("source", payload.Source);

                if (payload.ToolId.HasValue)
                {
                    datum.AddMetadata("toolId", payload.ToolId.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Click open Local invoke WebView button in Application Builder
        public static void RecordAppBuilderOpenLocalInvokeWebView(this ITelemetryLogger telemetryLogger, AppBuilderOpenLocalInvokeWebView payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appBuilder_openLocalInvokeWebView";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Click open Remote invoke WebView button in Application Builder
        public static void RecordAppBuilderOpenRemoteInvokeWebView(this ITelemetryLogger telemetryLogger, AppBuilderOpenRemoteInvokeWebView payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appBuilder_openRemoteInvokeWebView";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Click open template button in Application Builder
        public static void RecordAppBuilderOpenTemplate(this ITelemetryLogger telemetryLogger, AppBuilderOpenTemplate payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appBuilder_openTemplate";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Select a template and create project in Getting Started Walkthrough
        public static void RecordAppBuilderSelectWalkthroughTemplate(this ITelemetryLogger telemetryLogger, AppBuilderSelectWalkthroughTemplate payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appBuilder_selectWalkthroughTemplate";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("action", payload.Action);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open Getting Started Walkthrough
        public static void RecordAppBuilderStartWalkthrough(this ITelemetryLogger telemetryLogger, AppBuilderStartWalkthrough payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appBuilder_startWalkthrough";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when two resources are connected
        public static void RecordAppcomposerAddConnection(this ITelemetryLogger telemetryLogger, AppcomposerAddConnection payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_addConnection";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("destFacetType", payload.DestFacetType);

                datum.AddMetadata("destResourceType", payload.DestResourceType);

                datum.AddMetadata("sourceFacetType", payload.SourceFacetType);

                datum.AddMetadata("sourceResourceType", payload.SourceResourceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when a resource is added to the canvas
        public static void RecordAppcomposerAddResource(this ITelemetryLogger telemetryLogger, AppcomposerAddResource payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_addResource";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("resourceType", payload.ResourceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when Step Functions Workflow Studio is closed
        public static void RecordAppcomposerCloseWfs(this ITelemetryLogger telemetryLogger, AppcomposerCloseWfs payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_closeWfs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("didSave", payload.DidSave);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after a customer loads into Composeer
        public static void RecordAppcomposerCustomerReady(this ITelemetryLogger telemetryLogger, AppcomposerCustomerReady payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_customerReady";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("initializeTime", payload.InitializeTime);

                datum.AddMetadata("loadFileTime", payload.LoadFileTime);

                datum.AddMetadata("saveFileTime", payload.SaveFileTime);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after clicking the Sync button
        public static void RecordAppcomposerDeployClicked(this ITelemetryLogger telemetryLogger, AppcomposerDeployClicked payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_deployClicked";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after a Composer-triggered SAM Sync completes
        public static void RecordAppcomposerDeployCompleted(this ITelemetryLogger telemetryLogger, AppcomposerDeployCompleted payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_deployCompleted";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called regularly to record app performance
        public static void RecordAppcomposerFps(this ITelemetryLogger telemetryLogger, AppcomposerFps payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_fps";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("fps", payload.Fps);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after accepting a generative AI suggestion
        public static void RecordAppcomposerGenerateAccepted(this ITelemetryLogger telemetryLogger, AppcomposerGenerateAccepted payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_generateAccepted";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("numAttempts", payload.NumAttempts);

                datum.AddMetadata("resourceType", payload.ResourceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after generating a standard resource template partial
        public static void RecordAppcomposerGenerateClicked(this ITelemetryLogger telemetryLogger, AppcomposerGenerateClicked payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_generateClicked";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("resourceType", payload.ResourceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after rejecting a generative AI suggestion
        public static void RecordAppcomposerGenerateRejected(this ITelemetryLogger telemetryLogger, AppcomposerGenerateRejected payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_generateRejected";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("numAttempts", payload.NumAttempts);

                datum.AddMetadata("resourceType", payload.ResourceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when a project successfully loads
        public static void RecordAppcomposerInitializeProject(this ITelemetryLogger telemetryLogger, AppcomposerInitializeProject payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_initializeProject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("resourceCounts", payload.ResourceCounts);

                datum.AddMetadata("totalResourceCount", payload.TotalResourceCount);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after a generate failed
        public static void RecordAppcomposerInvalidGeneration(this ITelemetryLogger telemetryLogger, AppcomposerInvalidGeneration payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_invalidGeneration";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("generateFailure", payload.GenerateFailure);

                datum.AddMetadata("resourceType", payload.ResourceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after opening a template
        public static void RecordAppcomposerOpenTemplate(this ITelemetryLogger telemetryLogger, AppcomposerOpenTemplate payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_openTemplate";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("hasChatAuth", payload.HasChatAuth);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when Step Functions Workflow Studio is opened
        public static void RecordAppcomposerOpenWfs(this ITelemetryLogger telemetryLogger, AppcomposerOpenWfs payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_openWfs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after a generate is processed
        public static void RecordAppcomposerPostProcess(this ITelemetryLogger telemetryLogger, AppcomposerPostProcess payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_postProcess";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("pathsScrubbed", payload.PathsScrubbed);

                datum.AddMetadata("resourceType", payload.ResourceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after regenerating a standard resource template partial
        public static void RecordAppcomposerRegenerateClicked(this ITelemetryLogger telemetryLogger, AppcomposerRegenerateClicked payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "appcomposer_regenerateClicked";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("resourceType", payload.ResourceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the service URL
        public static void RecordApprunnerCopyServiceUrl(this ITelemetryLogger telemetryLogger, ApprunnerCopyServiceUrl payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apprunner_copyServiceUrl";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create an App Runner service
        public static void RecordApprunnerCreateService(this ITelemetryLogger telemetryLogger, ApprunnerCreateService payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apprunner_createService";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("appRunnerServiceSource", payload.AppRunnerServiceSource);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete an App Runner service
        public static void RecordApprunnerDeleteService(this ITelemetryLogger telemetryLogger, ApprunnerDeleteService payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apprunner_deleteService";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.AppRunnerServiceStatus.HasValue)
                {
                    datum.AddMetadata("appRunnerServiceStatus", payload.AppRunnerServiceStatus.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open the service URL in a browser
        public static void RecordApprunnerOpenServiceUrl(this ITelemetryLogger telemetryLogger, ApprunnerOpenServiceUrl payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apprunner_openServiceUrl";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Pause a running App Runner service
        public static void RecordApprunnerPauseService(this ITelemetryLogger telemetryLogger, ApprunnerPauseService payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apprunner_pauseService";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Resume a paused App Runner service
        public static void RecordApprunnerResumeService(this ITelemetryLogger telemetryLogger, ApprunnerResumeService payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apprunner_resumeService";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Start a new deployment for an App Runner service
        public static void RecordApprunnerStartDeployment(this ITelemetryLogger telemetryLogger, ApprunnerStartDeployment payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apprunner_startDeployment";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// View the App Runner application logs (the logs for your running service)
        public static void RecordApprunnerViewApplicationLogs(this ITelemetryLogger telemetryLogger, ApprunnerViewApplicationLogs payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apprunner_viewApplicationLogs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// View the App Runner service logs (the logs produced by App Runner)
        public static void RecordApprunnerViewServiceLogs(this ITelemetryLogger telemetryLogger, ApprunnerViewServiceLogs payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apprunner_viewServiceLogs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// New connection was added in the 'Add New Connection' workflow.
        public static void RecordAuthAddConnection(this ITelemetryLogger telemetryLogger, AuthAddConnection payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "auth_addConnection";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.Attempts.HasValue)
                {
                    datum.AddMetadata("attempts", payload.Attempts.Value);
                }

                datum.AddMetadata("authEnabledFeatures", payload.AuthEnabledFeatures);

                datum.AddMetadata("authScopes", payload.AuthScopes);

                datum.AddMetadata("credentialSourceId", payload.CredentialSourceId);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("featureId", payload.FeatureId);

                datum.AddMetadata("invalidInputFields", payload.InvalidInputFields);

                datum.AddMetadata("isAggregated", payload.IsAggregated);

                datum.AddMetadata("isReAuth", payload.IsReAuth);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum.AddMetadata("ssoRegistrationClientId", payload.SsoRegistrationClientId);

                datum.AddMetadata("ssoRegistrationExpiresAt", payload.SsoRegistrationExpiresAt);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// The diff/change in Auth connections
        public static void RecordAuthAddedConnections(this ITelemetryLogger telemetryLogger, AuthAddedConnections payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "auth_addedConnections";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("attempts", payload.Attempts);

                datum.AddMetadata("authConnectionsCount", payload.AuthConnectionsCount);

                datum.AddMetadata("enabledAuthConnections", payload.EnabledAuthConnections);

                datum.AddMetadata("newAuthConnectionsCount", payload.NewAuthConnectionsCount);

                datum.AddMetadata("newEnabledAuthConnections", payload.NewEnabledAuthConnections);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// When the Amazon Q sign in page is closed.
        public static void RecordAuthSignInPageClosed(this ITelemetryLogger telemetryLogger, AuthSignInPageClosed payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "auth_signInPageClosed";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// When the Amazon Q sign in page is opened and focused.
        public static void RecordAuthSignInPageOpened(this ITelemetryLogger telemetryLogger, AuthSignInPageOpened payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "auth_signInPageOpened";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user clicks yes or no to switch role upon adding new connection
        public static void RecordAuthSwitchRoles(this ITelemetryLogger telemetryLogger, AuthSwitchRoles payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "auth_switchRoles";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("authConnectionsCount", payload.AuthConnectionsCount);

                datum.AddMetadata("userChoice", payload.UserChoice);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// The state of the user's authentication upon startup.
        public static void RecordAuthUserState(this ITelemetryLogger telemetryLogger, AuthUserState payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "auth_userState";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("authEnabledConnections", payload.AuthEnabledConnections);

                datum.AddMetadata("authScopes", payload.AuthScopes);

                datum.AddMetadata("authStatus", payload.AuthStatus);

                if (payload.CredentialSourceId.HasValue)
                {
                    datum.AddMetadata("credentialSourceId", payload.CredentialSourceId.Value);
                }

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                if (payload.CredentialType.HasValue)
                {
                    datum.AddMetadata("credentialType", payload.CredentialType.Value);
                }

                if (payload.FeatureId.HasValue)
                {
                    datum.AddMetadata("featureId", payload.FeatureId.Value);
                }

                datum.AddMetadata("source", payload.Source);

                datum.AddMetadata("ssoRegistrationClientId", payload.SsoRegistrationClientId);

                datum.AddMetadata("ssoRegistrationExpiresAt", payload.SsoRegistrationExpiresAt);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the ARN of an AWS resource
        public static void RecordAwsCopyArn(this ITelemetryLogger telemetryLogger, AwsCopyArn payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_copyArn";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create a new credentials file
        public static void RecordAwsCreateCredentials(this ITelemetryLogger telemetryLogger, AwsCreateCredentials payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_createCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete an AWS resource
        public static void RecordAwsDeleteResource(this ITelemetryLogger telemetryLogger, AwsDeleteResource payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_deleteResource";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Expand a service root node in the AWS explorer window
        public static void RecordAwsExpandExplorerNode(this ITelemetryLogger telemetryLogger, AwsExpandExplorerNode payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_expandExplorerNode";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// An experiment was activated or deactivated in the Toolkit
        public static void RecordAwsExperimentActivation(this ITelemetryLogger telemetryLogger, AwsExperimentActivation payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_experimentActivation";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("experimentId", payload.ExperimentId);

                datum.AddMetadata("experimentState", payload.ExperimentState);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// An extension in uninstalled
        public static void RecordAwsExtensionUninstalled(this ITelemetryLogger telemetryLogger, AwsExtensionUninstalled payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_extensionUninstalled";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// AB Testing Feature response and Cohort Assignments
        public static void RecordAwsFeatureConfig(this ITelemetryLogger telemetryLogger, AwsFeatureConfig payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_featureConfig";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("featureValue", payload.FeatureValue);

                datum.AddMetadata("featureVariation", payload.FeatureVariation);

                datum.AddMetadata("id", payload.Id);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open docs for the extension
        public static void RecordAwsHelp(this ITelemetryLogger telemetryLogger, AwsHelp payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_help";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("name", payload.Name);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open the quickstart guide
        public static void RecordAwsHelpQuickstart(this ITelemetryLogger telemetryLogger, AwsHelpQuickstart payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_helpQuickstart";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Inject selected AWS credentials into a third-party run (e.g. RunConfiguration)
        public static void RecordAwsInjectCredentials(this ITelemetryLogger telemetryLogger, AwsInjectCredentials payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_injectCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("runtimeString", payload.RuntimeString);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Load credentials from a credential source
        public static void RecordAwsLoadCredentials(this ITelemetryLogger telemetryLogger, AwsLoadCredentials payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_loadCredentials";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("credentialSourceId", payload.CredentialSourceId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Extension navigated the user to a web browser to perform/complete the login process.
        public static void RecordAwsLoginWithBrowser(this ITelemetryLogger telemetryLogger, AwsLoginWithBrowser payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_loginWithBrowser";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.AuthType.HasValue)
                {
                    datum.AddMetadata("authType", payload.AuthType.Value);
                }

                if (payload.CredentialSourceId.HasValue)
                {
                    datum.AddMetadata("credentialSourceId", payload.CredentialSourceId.Value);
                }

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                if (payload.CredentialType.HasValue)
                {
                    datum.AddMetadata("credentialType", payload.CredentialType.Value);
                }

                if (payload.IsReAuth.HasValue)
                {
                    datum.AddMetadata("isReAuth", payload.IsReAuth.Value);
                }

                datum.AddMetadata("reAuthReason", payload.ReAuthReason);

                datum.AddMetadata("result", payload.Result);

                if (payload.SessionDuration.HasValue)
                {
                    datum.AddMetadata("sessionDuration", payload.SessionDuration.Value);
                }

                datum.AddMetadata("source", payload.Source);

                datum.AddMetadata("ssoRegistrationClientId", payload.SsoRegistrationClientId);

                datum.AddMetadata("ssoRegistrationExpiresAt", payload.SsoRegistrationExpiresAt);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Modify credentials (e.g. Add, Edit, Delete)
        public static void RecordAwsModifyCredentials(this ITelemetryLogger telemetryLogger, AwsModifyCredentials payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_modifyCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("credentialModification", payload.CredentialModification);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// An setting was changed by users in the Toolkit. This metric can optionally provide the new state of the setting via settingState.
        public static void RecordAwsModifySetting(this ITelemetryLogger telemetryLogger, AwsModifySetting payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_modifySetting";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("settingId", payload.SettingId);

                datum.AddMetadata("settingState", payload.SettingState);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open the credentials file
        public static void RecordAwsOpenCredentials(this ITelemetryLogger telemetryLogger, AwsOpenCredentials payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_openCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Opens a url
        public static void RecordAwsOpenUrl(this ITelemetryLogger telemetryLogger, AwsOpenUrl payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_openUrl";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum.AddMetadata("url", payload.Url);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Emitted when credentials are automatically refreshed by the AWS SDK or Toolkit
        public static void RecordAwsRefreshCredentials(this ITelemetryLogger telemetryLogger, AwsRefreshCredentials payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_refreshCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.CredentialSourceId.HasValue)
                {
                    datum.AddMetadata("credentialSourceId", payload.CredentialSourceId.Value);
                }

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                if (payload.CredentialType.HasValue)
                {
                    datum.AddMetadata("credentialType", payload.CredentialType.Value);
                }

                datum.AddMetadata("result", payload.Result);

                if (payload.SessionDuration.HasValue)
                {
                    datum.AddMetadata("sessionDuration", payload.SessionDuration.Value);
                }

                datum.AddMetadata("ssoRegistrationClientId", payload.SsoRegistrationClientId);

                datum.AddMetadata("ssoRegistrationExpiresAt", payload.SsoRegistrationExpiresAt);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Refresh the AWS explorer window
        public static void RecordAwsRefreshExplorer(this ITelemetryLogger telemetryLogger, AwsRefreshExplorer payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_refreshExplorer";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Report an issue with the plugin
        public static void RecordAwsReportPluginIssue(this ITelemetryLogger telemetryLogger, AwsReportPluginIssue payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_reportPluginIssue";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Save credentials
        public static void RecordAwsSaveCredentials(this ITelemetryLogger telemetryLogger, AwsSaveCredentials payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_saveCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Select a credentials profile
        public static void RecordAwsSetCredentials(this ITelemetryLogger telemetryLogger, AwsSetCredentials payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_setCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.CredentialSourceId.HasValue)
                {
                    datum.AddMetadata("credentialSourceId", payload.CredentialSourceId.Value);
                }

                if (payload.CredentialType.HasValue)
                {
                    datum.AddMetadata("credentialType", payload.CredentialType.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// A partition change occurred
        public static void RecordAwsSetPartition(this ITelemetryLogger telemetryLogger, AwsSetPartition payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_setPartition";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("partitionId", payload.PartitionId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// A region change occurred
        public static void RecordAwsSetRegion(this ITelemetryLogger telemetryLogger, AwsSetRegion payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_setRegion";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open the repo for the extension
        public static void RecordAwsShowExtensionSource(this ITelemetryLogger telemetryLogger, AwsShowExtensionSource payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_showExtensionSource";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// An external tool was installed automatically
        public static void RecordAwsToolInstallation(this ITelemetryLogger telemetryLogger, AwsToolInstallation payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_toolInstallation";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("toolId", payload.ToolId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Validate credentials when selecting new credentials
        public static void RecordAwsValidateCredentials(this ITelemetryLogger telemetryLogger, AwsValidateCredentials payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_validateCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.CredentialSourceId.HasValue)
                {
                    datum.AddMetadata("credentialSourceId", payload.CredentialSourceId.Value);
                }

                if (payload.CredentialType.HasValue)
                {
                    datum.AddMetadata("credentialType", payload.CredentialType.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Captures process of webview installation
        public static void RecordAwsWebviewInstallation(this ITelemetryLogger telemetryLogger, AwsWebviewInstallation payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_webviewInstallation";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("elementId", payload.ElementId);

                datum.AddMetadata("isRetry", payload.IsRetry);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user deletes a Beanstalk application
        public static void RecordBeanstalkDeleteApplication(this ITelemetryLogger telemetryLogger, BeanstalkDeleteApplication payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "beanstalk_deleteApplication";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user deletes a Beanstalk environment
        public static void RecordBeanstalkDeleteEnvironment(this ITelemetryLogger telemetryLogger, BeanstalkDeleteEnvironment payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "beanstalk_deleteEnvironment";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying an application to Elastic Beanstalk
        public static void RecordBeanstalkDeploy(this ITelemetryLogger telemetryLogger, BeanstalkDeploy payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "beanstalk_deploy";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.EnhancedHealthEnabled.HasValue)
                {
                    datum.AddMetadata("enhancedHealthEnabled", payload.EnhancedHealthEnabled.Value);
                }

                datum.AddMetadata("framework", payload.Framework);

                datum.AddMetadata("initialDeploy", payload.InitialDeploy);

                datum.AddMetadata("name", payload.Name);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum.AddMetadata("source", payload.Source);

                if (payload.XrayEnabled.HasValue)
                {
                    datum.AddMetadata("xrayEnabled", payload.XrayEnabled.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Edit configuration of a Beanstalk environment
        public static void RecordBeanstalkEditEnvironment(this ITelemetryLogger telemetryLogger, BeanstalkEditEnvironment payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "beanstalk_editEnvironment";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view the status of the Beanstalk Application
        public static void RecordBeanstalkOpenApplication(this ITelemetryLogger telemetryLogger, BeanstalkOpenApplication payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "beanstalk_openApplication";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view the status of the Beanstalk Environment
        public static void RecordBeanstalkOpenEnvironment(this ITelemetryLogger telemetryLogger, BeanstalkOpenEnvironment payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "beanstalk_openEnvironment";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user completes the Elastic Beanstalk publish wizard
        public static void RecordBeanstalkPublishWizard(this ITelemetryLogger telemetryLogger, BeanstalkPublishWizard payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "beanstalk_publishWizard";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Rebuild a Beanstalk environment
        public static void RecordBeanstalkRebuildEnvironment(this ITelemetryLogger telemetryLogger, BeanstalkRebuildEnvironment payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "beanstalk_rebuildEnvironment";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Restart application server for a Beanstalk environment
        public static void RecordBeanstalkRestartApplication(this ITelemetryLogger telemetryLogger, BeanstalkRestartApplication payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "beanstalk_restartApplication";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when creating a CloudFormation project
        public static void RecordCloudformationCreateProject(this ITelemetryLogger telemetryLogger, CloudformationCreateProject payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudformation_createProject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("templateName", payload.TemplateName);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deleting a cloudformation stack
        public static void RecordCloudformationDelete(this ITelemetryLogger telemetryLogger, CloudformationDelete payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudformation_delete";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying a CloudFormation template
        public static void RecordCloudformationDeploy(this ITelemetryLogger telemetryLogger, CloudformationDeploy payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudformation_deploy";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("initialDeploy", payload.InitialDeploy);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a CloudFormation stack in the stack viewer
        public static void RecordCloudformationOpen(this ITelemetryLogger telemetryLogger, CloudformationOpen payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudformation_open";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user completes the CloudFormation template publish wizard
        public static void RecordCloudformationPublishWizard(this ITelemetryLogger telemetryLogger, CloudformationPublishWizard payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudformation_publishWizard";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create a CloudFront Distribution
        public static void RecordCloudfrontCreateDistribution(this ITelemetryLogger telemetryLogger, CloudfrontCreateDistribution payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudfront_createDistribution";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create a CloudFront Streaming Distribution
        public static void RecordCloudfrontCreateStreamingDistribution(this ITelemetryLogger telemetryLogger, CloudfrontCreateStreamingDistribution payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudfront_createStreamingDistribution";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user deletes a CloudFront Distribution
        public static void RecordCloudfrontDeleteDistribution(this ITelemetryLogger telemetryLogger, CloudfrontDeleteDistribution payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudfront_deleteDistribution";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user deletes a CloudFront Streaming Distribution
        public static void RecordCloudfrontDeleteStreamingDistribution(this ITelemetryLogger telemetryLogger, CloudfrontDeleteStreamingDistribution payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudfront_deleteStreamingDistribution";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view the status of the CloudFront Distribution
        public static void RecordCloudfrontOpenDistribution(this ITelemetryLogger telemetryLogger, CloudfrontOpenDistribution payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudfront_openDistribution";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view the Cloudfront Invalidation requests
        public static void RecordCloudfrontOpenInvalidationRequest(this ITelemetryLogger telemetryLogger, CloudfrontOpenInvalidationRequest payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudfront_openInvalidationRequest";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view the status of the CloudFront Streaming Distribution
        public static void RecordCloudfrontOpenStreamingDistribution(this ITelemetryLogger telemetryLogger, CloudfrontOpenStreamingDistribution payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudfront_openStreamingDistribution";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Start an insights query
        public static void RecordCloudwatchinsightsExecuteQuery(this ITelemetryLogger telemetryLogger, CloudwatchinsightsExecuteQuery payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchinsights_executeQuery";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("insightsQueryStringType", payload.InsightsQueryStringType);

                datum.AddMetadata("insightsQueryTimeType", payload.InsightsQueryTimeType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Get all details for the selected log record
        public static void RecordCloudwatchinsightsOpenDetailedLogRecord(this ITelemetryLogger telemetryLogger, CloudwatchinsightsOpenDetailedLogRecord payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchinsights_openDetailedLogRecord";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open the insights query editor
        public static void RecordCloudwatchinsightsOpenEditor(this ITelemetryLogger telemetryLogger, CloudwatchinsightsOpenEditor payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchinsights_openEditor";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("insightsDialogOpenSource", payload.InsightsDialogOpenSource);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Retrieve list of available saved queries from AWS
        public static void RecordCloudwatchinsightsRetrieveQuery(this ITelemetryLogger telemetryLogger, CloudwatchinsightsRetrieveQuery payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchinsights_retrieveQuery";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Save query parameters to AWS
        public static void RecordCloudwatchinsightsSaveQuery(this ITelemetryLogger telemetryLogger, CloudwatchinsightsSaveQuery payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchinsights_saveQuery";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the ARN of a CloudWatch Logs entity
        public static void RecordCloudwatchlogsCopyArn(this ITelemetryLogger telemetryLogger, CloudwatchlogsCopyArn payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_copyArn";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("cloudWatchResourceType", payload.CloudWatchResourceType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete a CloudWatch Logs entity.
        public static void RecordCloudwatchlogsDelete(this ITelemetryLogger telemetryLogger, CloudwatchlogsDelete payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_delete";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("cloudWatchResourceType", payload.CloudWatchResourceType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Download a CloudWatch Logs entity. Value indicates the final size of the formatted stream in bytes.
        public static void RecordCloudwatchlogsDownload(this ITelemetryLogger telemetryLogger, CloudwatchlogsDownload payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_download";
                datum.Unit = Unit.Bytes;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("cloudWatchResourceType", payload.CloudWatchResourceType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Download a stream to a file on disk. Value indicates the final size of the formatted stream. (Deprecated - use cloudwatchlogs_download)
        public static void RecordCloudwatchlogsDownloadStreamToFile(this ITelemetryLogger telemetryLogger, CloudwatchlogsDownloadStreamToFile payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_downloadStreamToFile";
                datum.Unit = Unit.Bytes;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Filters a CloudWatch Logs entity. (Essentially a subset of cloudwatchlogs_open)
        public static void RecordCloudwatchlogsFilter(this ITelemetryLogger telemetryLogger, CloudwatchlogsFilter payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_filter";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("cloudWatchResourceType", payload.CloudWatchResourceType);

                if (payload.HasTextFilter.HasValue)
                {
                    datum.AddMetadata("hasTextFilter", payload.HasTextFilter.Value);
                }

                if (payload.HasTimeFilter.HasValue)
                {
                    datum.AddMetadata("hasTimeFilter", payload.HasTimeFilter.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a CloudWatch Logs entity. ServiceType and source indicate where the request came from (example: while viewing an ECS container)
        public static void RecordCloudwatchlogsOpen(this ITelemetryLogger telemetryLogger, CloudwatchlogsOpen payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_open";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.CloudWatchLogsPresentation.HasValue)
                {
                    datum.AddMetadata("cloudWatchLogsPresentation", payload.CloudWatchLogsPresentation.Value);
                }

                datum.AddMetadata("cloudWatchResourceType", payload.CloudWatchResourceType);

                if (payload.HasTextFilter.HasValue)
                {
                    datum.AddMetadata("hasTextFilter", payload.HasTextFilter.Value);
                }

                if (payload.HasTimeFilter.HasValue)
                {
                    datum.AddMetadata("hasTimeFilter", payload.HasTimeFilter.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open the CloudWatch Logs group window. ServiceType indicates that it was opened from a different service (like directly from an ECS container) (Deprecated - use cloudwatchlogs_open)
        public static void RecordCloudwatchlogsOpenGroup(this ITelemetryLogger telemetryLogger, CloudwatchlogsOpenGroup payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_openGroup";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a CloudWatch Logs stream in the window. ServiceType indicates that it was opened from a different service (like directly from an ECS container) (Deprecated - use cloudwatchlogs_open)
        public static void RecordCloudwatchlogsOpenStream(this ITelemetryLogger telemetryLogger, CloudwatchlogsOpenStream payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_openStream";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Download a stream to memory then open in an editor.
        public static void RecordCloudwatchlogsOpenStreamInEditor(this ITelemetryLogger telemetryLogger, CloudwatchlogsOpenStreamInEditor payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_openStreamInEditor";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Refresh a CloudWatch Logs entity
        public static void RecordCloudwatchlogsRefresh(this ITelemetryLogger telemetryLogger, CloudwatchlogsRefresh payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_refresh";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("cloudWatchResourceType", payload.CloudWatchResourceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Refresh group is pressed (Deprecated, use cloudwatchlogs_refresh)
        public static void RecordCloudwatchlogsRefreshGroup(this ITelemetryLogger telemetryLogger, CloudwatchlogsRefreshGroup payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_refreshGroup";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Refresh stream is pressed (Deprecated, use cloudwatchlogs_refresh)
        public static void RecordCloudwatchlogsRefreshStream(this ITelemetryLogger telemetryLogger, CloudwatchlogsRefreshStream payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_refreshStream";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when a group is searched
        public static void RecordCloudwatchlogsSearchGroup(this ITelemetryLogger telemetryLogger, CloudwatchlogsSearchGroup payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_searchGroup";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when a stream is searched
        public static void RecordCloudwatchlogsSearchStream(this ITelemetryLogger telemetryLogger, CloudwatchlogsSearchStream payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_searchStream";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Show event around a time period in ms specified by Value
        public static void RecordCloudwatchlogsShowEventsAround(this ITelemetryLogger telemetryLogger, CloudwatchlogsShowEventsAround payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_showEventsAround";
                datum.Unit = Unit.Milliseconds;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// When user starts a new LiveTail command
        public static void RecordCloudwatchlogsStartLiveTail(this ITelemetryLogger telemetryLogger, CloudwatchlogsStartLiveTail payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_startLiveTail";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.FilterType.HasValue)
                {
                    datum.AddMetadata("filterType", payload.FilterType.Value);
                }

                if (payload.HasTextFilter.HasValue)
                {
                    datum.AddMetadata("hasTextFilter", payload.HasTextFilter.Value);
                }

                datum.AddMetadata("sessionAlreadyStarted", payload.SessionAlreadyStarted);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// When user stops a liveTailSession
        public static void RecordCloudwatchlogsStopLiveTail(this ITelemetryLogger telemetryLogger, CloudwatchlogsStopLiveTail payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_stopLiveTail";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Tail stream off/on
        public static void RecordCloudwatchlogsTailStream(this ITelemetryLogger telemetryLogger, CloudwatchlogsTailStream payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_tailStream";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("enabled", payload.Enabled);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the currently open (possibly filtered) messages to an editor
        public static void RecordCloudwatchlogsViewCurrentMessagesInEditor(this ITelemetryLogger telemetryLogger, CloudwatchlogsViewCurrentMessagesInEditor payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_viewCurrentMessagesInEditor";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Word wrap events off/on
        public static void RecordCloudwatchlogsWrapEvents(this ITelemetryLogger telemetryLogger, CloudwatchlogsWrapEvents payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_wrapEvents";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("enabled", payload.Enabled);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Connect to a Amazon CodeCatalyst dev environment
        public static void RecordCodecatalystConnect(this ITelemetryLogger telemetryLogger, CodecatalystConnect payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codecatalyst_connect";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("userId", payload.UserId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create an Amazon CodeCatalyst Dev Environment
        public static void RecordCodecatalystCreateDevEnvironment(this ITelemetryLogger telemetryLogger, CodecatalystCreateDevEnvironment payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codecatalyst_createDevEnvironment";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.CodecatalystCreateDevEnvironmentRepoType.HasValue)
                {
                    datum.AddMetadata("codecatalyst_createDevEnvironmentRepoType", payload.CodecatalystCreateDevEnvironmentRepoType.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("userId", payload.UserId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Workflow statistic for connecting to a dev environment
        public static void RecordCodecatalystDevEnvironmentWorkflowStatistic(this ITelemetryLogger telemetryLogger, CodecatalystDevEnvironmentWorkflowStatistic payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codecatalyst_devEnvironmentWorkflowStatistic";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codecatalyst_devEnvironmentWorkflowError", payload.CodecatalystDevEnvironmentWorkflowError);

                datum.AddMetadata("codecatalyst_devEnvironmentWorkflowStep", payload.CodecatalystDevEnvironmentWorkflowStep);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("userId", payload.UserId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Clone a Amazon CodeCatalyst code repository locally
        public static void RecordCodecatalystLocalClone(this ITelemetryLogger telemetryLogger, CodecatalystLocalClone payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codecatalyst_localClone";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("userId", payload.UserId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Update properties of a Amazon CodeCatalyst Dev Environment
        public static void RecordCodecatalystUpdateDevEnvironmentSettings(this ITelemetryLogger telemetryLogger, CodecatalystUpdateDevEnvironmentSettings payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codecatalyst_updateDevEnvironmentSettings";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codecatalyst_updateDevEnvironmentLocationType", payload.CodecatalystUpdateDevEnvironmentLocationType);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("userId", payload.UserId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Trigger a devfile update on a Amazon CodeCatalyst dev environment
        public static void RecordCodecatalystUpdateDevfile(this ITelemetryLogger telemetryLogger, CodecatalystUpdateDevfile payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codecatalyst_updateDevfile";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("userId", payload.UserId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// A repo is cloned from CodeCommit
        public static void RecordCodecommitCloneRepo(this ITelemetryLogger telemetryLogger, CodecommitCloneRepo payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codecommit_cloneRepo";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// A repo is created in CodeCommit
        public static void RecordCodecommitCreateRepo(this ITelemetryLogger telemetryLogger, CodecommitCreateRepo payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codecommit_createRepo";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// A connection is established to CodeCommit to perform actions on repos
        public static void RecordCodecommitSetCredentials(this ITelemetryLogger telemetryLogger, CodecommitSetCredentials payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codecommit_setCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.CredentialType.HasValue)
                {
                    datum.AddMetadata("credentialType", payload.CredentialType.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Apply suggested changes to buildable units.
        public static void RecordCodeTransformApplyChanges(this ITelemetryLogger telemetryLogger, CodeTransformApplyChanges payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_applyChanges";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codeTransformNumberOfTransformedFilesAccepted", payload.CodeTransformNumberOfTransformedFilesAccepted);

                if (payload.CodeTransformNumberOfTransformedUnitsAccepted.HasValue)
                {
                    datum.AddMetadata("codeTransformNumberOfTransformedUnitsAccepted", payload.CodeTransformNumberOfTransformedUnitsAccepted.Value);
                }

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User downloads code transform artifact
        public static void RecordCodeTransformDownloadArtifact(this ITelemetryLogger telemetryLogger, CodeTransformDownloadArtifact payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_downloadArtifact";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codeTransformArtifactType", payload.CodeTransformArtifactType);

                datum.AddMetadata("codeTransformJobId", payload.CodeTransformJobId);

                datum.AddMetadata("codeTransformRuntimeError", payload.CodeTransformRuntimeError);

                datum.AddMetadata("codeTransformRunTimeLatency", payload.CodeTransformRunTimeLatency);

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum.AddMetadata("codeTransformTotalByteSize", payload.CodeTransformTotalByteSize);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// The user interactivity when a transformation pause state is reached.
        public static void RecordCodeTransformHumanInTheLoop(this ITelemetryLogger telemetryLogger, CodeTransformHumanInTheLoop payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_humanInTheLoop";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codeTransformJobId", payload.CodeTransformJobId);

                datum.AddMetadata("codeTransformMetadata", payload.CodeTransformMetadata);

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User initiates code transform from Q Chat Prompt.
        public static void RecordCodeTransformInitiateTransform(this ITelemetryLogger telemetryLogger, CodeTransformInitiateTransform payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_initiateTransform";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                if (payload.CredentialSourceId.HasValue)
                {
                    datum.AddMetadata("credentialSourceId", payload.CredentialSourceId.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// After a job is running the user has the ability to cancel the job.
        public static void RecordCodeTransformJobIsCancelledByUser(this ITelemetryLogger telemetryLogger, CodeTransformJobIsCancelledByUser payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_jobIsCancelledByUser";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.CodeTransformCancelSrcComponents.HasValue)
                {
                    datum.AddMetadata("codeTransformCancelSrcComponents", payload.CodeTransformCancelSrcComponents.Value);
                }

                datum.AddMetadata("codeTransformJobId", payload.CodeTransformJobId);

                datum.AddMetadata("codeTransformRuntimeError", payload.CodeTransformRuntimeError);

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// The user closes their IDE and stops viewing the transformation.
        public static void RecordCodeTransformJobIsClosedDuringIdeRun(this ITelemetryLogger telemetryLogger, CodeTransformJobIsClosedDuringIdeRun payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_jobIsClosedDuringIdeRun";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codeTransformJobId", payload.CodeTransformJobId);

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum.AddMetadata("codeTransformStatus", payload.CodeTransformStatus);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// The user was previously running a transformation and came back to IDE to see it still running
        public static void RecordCodeTransformJobIsResumedAfterIdeClose(this ITelemetryLogger telemetryLogger, CodeTransformJobIsResumedAfterIdeClose payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_jobIsResumedAfterIdeClose";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codeTransformJobId", payload.CodeTransformJobId);

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum.AddMetadata("codeTransformStatus", payload.CodeTransformStatus);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Transform job started for uploaded project.
        public static void RecordCodeTransformJobStart(this ITelemetryLogger telemetryLogger, CodeTransformJobStart payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_jobStart";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codeTransformJobId", payload.CodeTransformJobId);

                if (payload.CodeTransformNumberOfProjects.HasValue)
                {
                    datum.AddMetadata("codeTransformNumberOfProjects", payload.CodeTransformNumberOfProjects.Value);
                }

                if (payload.CodeTransformNumberOfTransformedFiles.HasValue)
                {
                    datum.AddMetadata("codeTransformNumberOfTransformedFiles", payload.CodeTransformNumberOfTransformedFiles.Value);
                }

                if (payload.CodeTransformRunTimeLatency.HasValue)
                {
                    datum.AddMetadata("codeTransformRunTimeLatency", payload.CodeTransformRunTimeLatency.Value);
                }

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum.AddMetadata("codeTransformTarget", payload.CodeTransformTarget);

                if (payload.CredentialSourceId.HasValue)
                {
                    datum.AddMetadata("credentialSourceId", payload.CredentialSourceId.Value);
                }

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// During the transformation progress, log the status steps returning from the API.
        public static void RecordCodeTransformJobStatusChanged(this ITelemetryLogger telemetryLogger, CodeTransformJobStatusChanged payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_jobStatusChanged";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codeTransformJobId", payload.CodeTransformJobId);

                datum.AddMetadata("codeTransformPreviousStatus", payload.CodeTransformPreviousStatus);

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum.AddMetadata("codeTransformStatus", payload.CodeTransformStatus);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Transform initiates local build.
        public static void RecordCodeTransformLocalBuildProject(this ITelemetryLogger telemetryLogger, CodeTransformLocalBuildProject payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_localBuildProject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codeTransformBuildCommand", payload.CodeTransformBuildCommand);

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// A general error has occurred.
        public static void RecordCodeTransformLogGeneralError(this ITelemetryLogger telemetryLogger, CodeTransformLogGeneralError payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_logGeneralError";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codeTransformJobId", payload.CodeTransformJobId);

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User provides input to project module and language selection.
        public static void RecordCodeTransformSubmitSelection(this ITelemetryLogger telemetryLogger, CodeTransformSubmitSelection payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_submitSelection";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.CodeTransformJavaSourceVersionsAllowed.HasValue)
                {
                    datum.AddMetadata("codeTransformJavaSourceVersionsAllowed", payload.CodeTransformJavaSourceVersionsAllowed.Value);
                }

                if (payload.CodeTransformJavaTargetVersionsAllowed.HasValue)
                {
                    datum.AddMetadata("codeTransformJavaTargetVersionsAllowed", payload.CodeTransformJavaTargetVersionsAllowed.Value);
                }

                datum.AddMetadata("codeTransformJobId", payload.CodeTransformJobId);

                datum.AddMetadata("codeTransformProjectId", payload.CodeTransformProjectId);

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum.AddMetadata("source", payload.Source);

                datum.AddMetadata("target", payload.Target);

                datum.AddMetadata("userChoice", payload.UserChoice);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// We want to log the total run time in the users experience for the IDE. The total runtime should end when all API's have finished running and the users is prompted for next step actions.
        public static void RecordCodeTransformTotalRunTime(this ITelemetryLogger telemetryLogger, CodeTransformTotalRunTime payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_totalRunTime";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("buildSystemVersion", payload.BuildSystemVersion);

                datum.AddMetadata("codeTransformJobId", payload.CodeTransformJobId);

                datum.AddMetadata("codeTransformLocalJavaVersion", payload.CodeTransformLocalJavaVersion);

                if (payload.CodeTransformPlanReceivedCount.HasValue)
                {
                    datum.AddMetadata("codeTransformPlanReceivedCount", payload.CodeTransformPlanReceivedCount.Value);
                }

                datum.AddMetadata("codeTransformResultStatusMessage", payload.CodeTransformResultStatusMessage);

                datum.AddMetadata("codeTransformRunTimeLatency", payload.CodeTransformRunTimeLatency);

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Transform initiates project artifact upload.
        public static void RecordCodeTransformUploadProject(this ITelemetryLogger telemetryLogger, CodeTransformUploadProject payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_uploadProject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codeTransformDependenciesCopied", payload.CodeTransformDependenciesCopied);

                datum.AddMetadata("codeTransformJobId", payload.CodeTransformJobId);

                datum.AddMetadata("codeTransformRunTimeLatency", payload.CodeTransformRunTimeLatency);

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum.AddMetadata("codeTransformTotalByteSize", payload.CodeTransformTotalByteSize);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Transform initiates project language, build tool, and build file validation.
        public static void RecordCodeTransformValidateProject(this ITelemetryLogger telemetryLogger, CodeTransformValidateProject payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codeTransform_validateProject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("buildSystemVersion", payload.BuildSystemVersion);

                if (payload.CodeTransformBuildSystem.HasValue)
                {
                    datum.AddMetadata("codeTransformBuildSystem", payload.CodeTransformBuildSystem.Value);
                }

                datum.AddMetadata("codeTransformLocalJavaVersion", payload.CodeTransformLocalJavaVersion);

                datum.AddMetadata("codeTransformMetadata", payload.CodeTransformMetadata);

                if (payload.CodeTransformPreValidationError.HasValue)
                {
                    datum.AddMetadata("codeTransformPreValidationError", payload.CodeTransformPreValidationError.Value);
                }

                datum.AddMetadata("codeTransformSessionId", payload.CodeTransformSessionId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Client side invocation blocked by another invocation in progress
        public static void RecordCodewhispererBlockedInvocation(this ITelemetryLogger telemetryLogger, CodewhispererBlockedInvocation payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_blockedInvocation";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.CodewhispererAutomatedTriggerType.HasValue)
                {
                    datum.AddMetadata("codewhispererAutomatedTriggerType", payload.CodewhispererAutomatedTriggerType.Value);
                }

                datum.AddMetadata("codewhispererCursorOffset", payload.CodewhispererCursorOffset);

                datum.AddMetadata("codewhispererLanguage", payload.CodewhispererLanguage);

                datum.AddMetadata("codewhispererLineNumber", payload.CodewhispererLineNumber);

                datum.AddMetadata("codewhispererTriggerType", payload.CodewhispererTriggerType);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// The latency from each CodeWhisperer components in milliseconds
        public static void RecordCodewhispererClientComponentLatency(this ITelemetryLogger telemetryLogger, CodewhispererClientComponentLatency payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_clientComponentLatency";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codewhispererAllCompletionsLatency", payload.CodewhispererAllCompletionsLatency);

                datum.AddMetadata("codewhispererCompletionType", payload.CodewhispererCompletionType);

                datum.AddMetadata("codewhispererCredentialFetchingLatency", payload.CodewhispererCredentialFetchingLatency);

                datum.AddMetadata("codewhispererCustomizationArn", payload.CodewhispererCustomizationArn);

                datum.AddMetadata("codewhispererEndToEndLatency", payload.CodewhispererEndToEndLatency);

                datum.AddMetadata("codewhispererFirstCompletionLatency", payload.CodewhispererFirstCompletionLatency);

                datum.AddMetadata("codewhispererLanguage", payload.CodewhispererLanguage);

                datum.AddMetadata("codewhispererPostprocessingLatency", payload.CodewhispererPostprocessingLatency);

                datum.AddMetadata("codewhispererPreprocessingLatency", payload.CodewhispererPreprocessingLatency);

                datum.AddMetadata("codewhispererRequestId", payload.CodewhispererRequestId);

                datum.AddMetadata("codewhispererSessionId", payload.CodewhispererSessionId);

                datum.AddMetadata("codewhispererTriggerType", payload.CodewhispererTriggerType);

                datum.AddMetadata("codewhispererUserGroup", payload.CodewhispererUserGroup);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Percentage of user tokens against suggestions until 5 mins of time
        public static void RecordCodewhispererCodePercentage(this ITelemetryLogger telemetryLogger, CodewhispererCodePercentage payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_codePercentage";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codewhispererAcceptedTokens", payload.CodewhispererAcceptedTokens);

                datum.AddMetadata("codewhispererCustomizationArn", payload.CodewhispererCustomizationArn);

                datum.AddMetadata("codewhispererLanguage", payload.CodewhispererLanguage);

                datum.AddMetadata("codewhispererPercentage", payload.CodewhispererPercentage);

                if (payload.CodewhispererSuggestedTokens.HasValue)
                {
                    datum.AddMetadata("codewhispererSuggestedTokens", payload.CodewhispererSuggestedTokens.Value);
                }

                datum.AddMetadata("codewhispererTotalTokens", payload.CodewhispererTotalTokens);

                datum.AddMetadata("codewhispererUserGroup", payload.CodewhispererUserGroup);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("successCount", payload.SuccessCount);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when a new chat tab is opened in the code scan view
        public static void RecordCodewhispererCodeScanChatNewTab(this ITelemetryLogger telemetryLogger, CodewhispererCodeScanChatNewTab payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_codeScanChatNewTab";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.CredentialSourceId.HasValue)
                {
                    datum.AddMetadata("credentialSourceId", payload.CredentialSourceId.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when a code scan issue suggested fix is applied
        public static void RecordCodewhispererCodeScanIssueApplyFix(this ITelemetryLogger telemetryLogger, CodewhispererCodeScanIssueApplyFix payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_codeScanIssueApplyFix";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.CodeFixAction.HasValue)
                {
                    datum.AddMetadata("codeFixAction", payload.CodeFixAction.Value);
                }

                datum.AddMetadata("component", payload.Component);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("detectorId", payload.DetectorId);

                datum.AddMetadata("findingId", payload.FindingId);

                datum.AddMetadata("ruleId", payload.RuleId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Generated fix for a code scan issue. variant=refresh means the user chose to generate a fix again after one already exists.
        public static void RecordCodewhispererCodeScanIssueGenerateFix(this ITelemetryLogger telemetryLogger, CodewhispererCodeScanIssueGenerateFix payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_codeScanIssueGenerateFix";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("component", payload.Component);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("detectorId", payload.DetectorId);

                datum.AddMetadata("findingId", payload.FindingId);

                datum.AddMetadata("ruleId", payload.RuleId);

                datum.AddMetadata("variant", payload.Variant);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when a code scan issue is hovered over
        public static void RecordCodewhispererCodeScanIssueHover(this ITelemetryLogger telemetryLogger, CodewhispererCodeScanIssueHover payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_codeScanIssueHover";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("detectorId", payload.DetectorId);

                datum.AddMetadata("findingId", payload.FindingId);

                datum.AddMetadata("includesFix", payload.IncludesFix);

                datum.AddMetadata("ruleId", payload.RuleId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User ignored a code scan issue. variant=all means the user ignored all issues of a specific type.
        public static void RecordCodewhispererCodeScanIssueIgnore(this ITelemetryLogger telemetryLogger, CodewhispererCodeScanIssueIgnore payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_codeScanIssueIgnore";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("component", payload.Component);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("detectorId", payload.DetectorId);

                datum.AddMetadata("findingId", payload.FindingId);

                datum.AddMetadata("ruleId", payload.RuleId);

                datum.AddMetadata("variant", payload.Variant);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when a code scan issue webview is opened
        public static void RecordCodewhispererCodeScanIssueViewDetails(this ITelemetryLogger telemetryLogger, CodewhispererCodeScanIssueViewDetails payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_codeScanIssueViewDetails";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("detectorId", payload.DetectorId);

                datum.AddMetadata("findingId", payload.FindingId);

                datum.AddMetadata("ruleId", payload.RuleId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Whether or not CodeWhisperer is enabled
        public static void RecordCodewhispererEnabled(this ITelemetryLogger telemetryLogger, CodewhispererEnabled payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_enabled";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("enabled", payload.Enabled);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// This metric provides the particular language and task type selected by the user in the onboarding page by clicking on the Try Example button.
        public static void RecordCodewhispererOnboardingClick(this ITelemetryLogger telemetryLogger, CodewhispererOnboardingClick payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_onboardingClick";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codewhispererGettingStartedTask", payload.CodewhispererGettingStartedTask);

                datum.AddMetadata("codewhispererLanguage", payload.CodewhispererLanguage);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// The duration from user last modification to the first recommendation shown in milliseconds
        public static void RecordCodewhispererPerceivedLatency(this ITelemetryLogger telemetryLogger, CodewhispererPerceivedLatency payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_perceivedLatency";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codewhispererCompletionType", payload.CodewhispererCompletionType);

                datum.AddMetadata("codewhispererCustomizationArn", payload.CodewhispererCustomizationArn);

                datum.AddMetadata("codewhispererLanguage", payload.CodewhispererLanguage);

                datum.AddMetadata("codewhispererRequestId", payload.CodewhispererRequestId);

                datum.AddMetadata("codewhispererSessionId", payload.CodewhispererSessionId);

                datum.AddMetadata("codewhispererTriggerType", payload.CodewhispererTriggerType);

                datum.AddMetadata("codewhispererUserGroup", payload.CodewhispererUserGroup);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Client side invocation of the CodeWhisperer Security Scan
        public static void RecordCodewhispererSecurityScan(this ITelemetryLogger telemetryLogger, CodewhispererSecurityScan payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_securityScan";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("artifactsUploadDuration", payload.ArtifactsUploadDuration);

                datum.AddMetadata("codeScanServiceInvocationsDuration", payload.CodeScanServiceInvocationsDuration);

                if (payload.CodewhispererCodeScanBuildPayloadBytes.HasValue)
                {
                    datum.AddMetadata("codewhispererCodeScanBuildPayloadBytes", payload.CodewhispererCodeScanBuildPayloadBytes.Value);
                }

                if (payload.CodewhispererCodeScanBuildZipFileBytes.HasValue)
                {
                    datum.AddMetadata("codewhispererCodeScanBuildZipFileBytes", payload.CodewhispererCodeScanBuildZipFileBytes.Value);
                }

                if (payload.CodewhispererCodeScanIssuesWithFixes.HasValue)
                {
                    datum.AddMetadata("codewhispererCodeScanIssuesWithFixes", payload.CodewhispererCodeScanIssuesWithFixes.Value);
                }

                datum.AddMetadata("codewhispererCodeScanJobId", payload.CodewhispererCodeScanJobId);

                datum.AddMetadata("codewhispererCodeScanLines", payload.CodewhispererCodeScanLines);

                if (payload.CodewhispererCodeScanProjectBytes.HasValue)
                {
                    datum.AddMetadata("codewhispererCodeScanProjectBytes", payload.CodewhispererCodeScanProjectBytes.Value);
                }

                if (payload.CodewhispererCodeScanScope.HasValue)
                {
                    datum.AddMetadata("codewhispererCodeScanScope", payload.CodewhispererCodeScanScope.Value);
                }

                datum.AddMetadata("codewhispererCodeScanSrcPayloadBytes", payload.CodewhispererCodeScanSrcPayloadBytes);

                datum.AddMetadata("codewhispererCodeScanSrcZipFileBytes", payload.CodewhispererCodeScanSrcZipFileBytes);

                datum.AddMetadata("codewhispererCodeScanTotalIssues", payload.CodewhispererCodeScanTotalIssues);

                datum.AddMetadata("codewhispererLanguage", payload.CodewhispererLanguage);

                datum.AddMetadata("contextTruncationDuration", payload.ContextTruncationDuration);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Client side invocation of the CodeWhisperer service for suggestion
        public static void RecordCodewhispererServiceInvocation(this ITelemetryLogger telemetryLogger, CodewhispererServiceInvocation payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_serviceInvocation";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.CodewhispererAutomatedTriggerType.HasValue)
                {
                    datum.AddMetadata("codewhispererAutomatedTriggerType", payload.CodewhispererAutomatedTriggerType.Value);
                }

                if (payload.CodewhispererCompletionType.HasValue)
                {
                    datum.AddMetadata("codewhispererCompletionType", payload.CodewhispererCompletionType.Value);
                }

                datum.AddMetadata("codewhispererCursorOffset", payload.CodewhispererCursorOffset);

                datum.AddMetadata("codewhispererCustomizationArn", payload.CodewhispererCustomizationArn);

                if (payload.CodewhispererGettingStartedTask.HasValue)
                {
                    datum.AddMetadata("codewhispererGettingStartedTask", payload.CodewhispererGettingStartedTask.Value);
                }

                if (payload.CodewhispererImportRecommendationEnabled.HasValue)
                {
                    datum.AddMetadata("codewhispererImportRecommendationEnabled", payload.CodewhispererImportRecommendationEnabled.Value);
                }

                datum.AddMetadata("codewhispererLanguage", payload.CodewhispererLanguage);

                if (payload.CodewhispererLastSuggestionIndex.HasValue)
                {
                    datum.AddMetadata("codewhispererLastSuggestionIndex", payload.CodewhispererLastSuggestionIndex.Value);
                }

                datum.AddMetadata("codewhispererLineNumber", payload.CodewhispererLineNumber);

                datum.AddMetadata("codewhispererRequestId", payload.CodewhispererRequestId);

                if (payload.CodewhispererRuntime.HasValue)
                {
                    datum.AddMetadata("codewhispererRuntime", payload.CodewhispererRuntime.Value);
                }

                datum.AddMetadata("codewhispererRuntimeSource", payload.CodewhispererRuntimeSource);

                datum.AddMetadata("codewhispererSessionId", payload.CodewhispererSessionId);

                if (payload.CodewhispererSupplementalContextIsUtg.HasValue)
                {
                    datum.AddMetadata("codewhispererSupplementalContextIsUtg", payload.CodewhispererSupplementalContextIsUtg.Value);
                }

                if (payload.CodewhispererSupplementalContextLatency.HasValue)
                {
                    datum.AddMetadata("codewhispererSupplementalContextLatency", payload.CodewhispererSupplementalContextLatency.Value);
                }

                if (payload.CodewhispererSupplementalContextLength.HasValue)
                {
                    datum.AddMetadata("codewhispererSupplementalContextLength", payload.CodewhispererSupplementalContextLength.Value);
                }

                if (payload.CodewhispererSupplementalContextTimeout.HasValue)
                {
                    datum.AddMetadata("codewhispererSupplementalContextTimeout", payload.CodewhispererSupplementalContextTimeout.Value);
                }

                datum.AddMetadata("codewhispererTriggerType", payload.CodewhispererTriggerType);

                datum.AddMetadata("codewhispererUserGroup", payload.CodewhispererUserGroup);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User acceptance or rejection of each suggestion returned by the CodeWhisperer service request
        public static void RecordCodewhispererUserDecision(this ITelemetryLogger telemetryLogger, CodewhispererUserDecision payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_userDecision";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codewhispererCompletionType", payload.CodewhispererCompletionType);

                if (payload.CodewhispererGettingStartedTask.HasValue)
                {
                    datum.AddMetadata("codewhispererGettingStartedTask", payload.CodewhispererGettingStartedTask.Value);
                }

                datum.AddMetadata("codewhispererLanguage", payload.CodewhispererLanguage);

                if (payload.CodewhispererPaginationProgress.HasValue)
                {
                    datum.AddMetadata("codewhispererPaginationProgress", payload.CodewhispererPaginationProgress.Value);
                }

                datum.AddMetadata("codewhispererRequestId", payload.CodewhispererRequestId);

                if (payload.CodewhispererRuntime.HasValue)
                {
                    datum.AddMetadata("codewhispererRuntime", payload.CodewhispererRuntime.Value);
                }

                datum.AddMetadata("codewhispererRuntimeSource", payload.CodewhispererRuntimeSource);

                datum.AddMetadata("codewhispererSessionId", payload.CodewhispererSessionId);

                if (payload.CodewhispererSuggestionImportCount.HasValue)
                {
                    datum.AddMetadata("codewhispererSuggestionImportCount", payload.CodewhispererSuggestionImportCount.Value);
                }

                datum.AddMetadata("codewhispererSuggestionIndex", payload.CodewhispererSuggestionIndex);

                datum.AddMetadata("codewhispererSuggestionReferenceCount", payload.CodewhispererSuggestionReferenceCount);

                datum.AddMetadata("codewhispererSuggestionReferences", payload.CodewhispererSuggestionReferences);

                datum.AddMetadata("codewhispererSuggestionState", payload.CodewhispererSuggestionState);

                if (payload.CodewhispererSupplementalContextIsUtg.HasValue)
                {
                    datum.AddMetadata("codewhispererSupplementalContextIsUtg", payload.CodewhispererSupplementalContextIsUtg.Value);
                }

                if (payload.CodewhispererSupplementalContextLength.HasValue)
                {
                    datum.AddMetadata("codewhispererSupplementalContextLength", payload.CodewhispererSupplementalContextLength.Value);
                }

                if (payload.CodewhispererSupplementalContextTimeout.HasValue)
                {
                    datum.AddMetadata("codewhispererSupplementalContextTimeout", payload.CodewhispererSupplementalContextTimeout.Value);
                }

                datum.AddMetadata("codewhispererTriggerType", payload.CodewhispererTriggerType);

                datum.AddMetadata("codewhispererUserGroup", payload.CodewhispererUserGroup);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Percentage of user modifications for the selected suggestion until a fixed period of time
        public static void RecordCodewhispererUserModification(this ITelemetryLogger telemetryLogger, CodewhispererUserModification payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_userModification";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("codewhispererCharactersAccepted", payload.CodewhispererCharactersAccepted);

                datum.AddMetadata("codewhispererCharactersModified", payload.CodewhispererCharactersModified);

                datum.AddMetadata("codewhispererCompletionType", payload.CodewhispererCompletionType);

                datum.AddMetadata("codewhispererLanguage", payload.CodewhispererLanguage);

                datum.AddMetadata("codewhispererModificationPercentage", payload.CodewhispererModificationPercentage);

                datum.AddMetadata("codewhispererRequestId", payload.CodewhispererRequestId);

                if (payload.CodewhispererRuntime.HasValue)
                {
                    datum.AddMetadata("codewhispererRuntime", payload.CodewhispererRuntime.Value);
                }

                datum.AddMetadata("codewhispererRuntimeSource", payload.CodewhispererRuntimeSource);

                datum.AddMetadata("codewhispererSessionId", payload.CodewhispererSessionId);

                datum.AddMetadata("codewhispererSuggestionIndex", payload.CodewhispererSuggestionIndex);

                datum.AddMetadata("codewhispererTriggerType", payload.CodewhispererTriggerType);

                datum.AddMetadata("codewhispererUserGroup", payload.CodewhispererUserGroup);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User decision aggregated at trigger level
        public static void RecordCodewhispererUserTriggerDecision(this ITelemetryLogger telemetryLogger, CodewhispererUserTriggerDecision payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codewhisperer_userTriggerDecision";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.CodewhispererAutomatedTriggerType.HasValue)
                {
                    datum.AddMetadata("codewhispererAutomatedTriggerType", payload.CodewhispererAutomatedTriggerType.Value);
                }

                if (payload.CodewhispererCharactersAccepted.HasValue)
                {
                    datum.AddMetadata("codewhispererCharactersAccepted", payload.CodewhispererCharactersAccepted.Value);
                }

                if (payload.CodewhispererCharactersRecommended.HasValue)
                {
                    datum.AddMetadata("codewhispererCharactersRecommended", payload.CodewhispererCharactersRecommended.Value);
                }

                if (payload.CodewhispererClassifierResult.HasValue)
                {
                    datum.AddMetadata("codewhispererClassifierResult", payload.CodewhispererClassifierResult.Value);
                }

                if (payload.CodewhispererClassifierThreshold.HasValue)
                {
                    datum.AddMetadata("codewhispererClassifierThreshold", payload.CodewhispererClassifierThreshold.Value);
                }

                datum.AddMetadata("codewhispererCompletionType", payload.CodewhispererCompletionType);

                datum.AddMetadata("codewhispererCursorOffset", payload.CodewhispererCursorOffset);

                datum.AddMetadata("codewhispererCustomizationArn", payload.CodewhispererCustomizationArn);

                datum.AddMetadata("codewhispererFeatureEvaluations", payload.CodewhispererFeatureEvaluations);

                datum.AddMetadata("codewhispererFirstRequestId", payload.CodewhispererFirstRequestId);

                if (payload.CodewhispererGettingStartedTask.HasValue)
                {
                    datum.AddMetadata("codewhispererGettingStartedTask", payload.CodewhispererGettingStartedTask.Value);
                }

                if (payload.CodewhispererIsPartialAcceptance.HasValue)
                {
                    datum.AddMetadata("codewhispererIsPartialAcceptance", payload.CodewhispererIsPartialAcceptance.Value);
                }

                datum.AddMetadata("codewhispererLanguage", payload.CodewhispererLanguage);

                datum.AddMetadata("codewhispererLineNumber", payload.CodewhispererLineNumber);

                if (payload.CodewhispererPartialAcceptanceCount.HasValue)
                {
                    datum.AddMetadata("codewhispererPartialAcceptanceCount", payload.CodewhispererPartialAcceptanceCount.Value);
                }

                if (payload.CodewhispererPreviousSuggestionState.HasValue)
                {
                    datum.AddMetadata("codewhispererPreviousSuggestionState", payload.CodewhispererPreviousSuggestionState.Value);
                }

                datum.AddMetadata("codewhispererSessionId", payload.CodewhispererSessionId);

                datum.AddMetadata("codewhispererSuggestionCount", payload.CodewhispererSuggestionCount);

                datum.AddMetadata("codewhispererSuggestionImportCount", payload.CodewhispererSuggestionImportCount);

                datum.AddMetadata("codewhispererSuggestionState", payload.CodewhispererSuggestionState);

                if (payload.CodewhispererSupplementalContextIsUtg.HasValue)
                {
                    datum.AddMetadata("codewhispererSupplementalContextIsUtg", payload.CodewhispererSupplementalContextIsUtg.Value);
                }

                if (payload.CodewhispererSupplementalContextLength.HasValue)
                {
                    datum.AddMetadata("codewhispererSupplementalContextLength", payload.CodewhispererSupplementalContextLength.Value);
                }

                datum.AddMetadata("codewhispererSupplementalContextStrategyId", payload.CodewhispererSupplementalContextStrategyId);

                if (payload.CodewhispererSupplementalContextTimeout.HasValue)
                {
                    datum.AddMetadata("codewhispererSupplementalContextTimeout", payload.CodewhispererSupplementalContextTimeout.Value);
                }

                if (payload.CodewhispererTimeSinceLastDocumentChange.HasValue)
                {
                    datum.AddMetadata("codewhispererTimeSinceLastDocumentChange", payload.CodewhispererTimeSinceLastDocumentChange.Value);
                }

                if (payload.CodewhispererTimeSinceLastUserDecision.HasValue)
                {
                    datum.AddMetadata("codewhispererTimeSinceLastUserDecision", payload.CodewhispererTimeSinceLastUserDecision.Value);
                }

                if (payload.CodewhispererTimeToFirstRecommendation.HasValue)
                {
                    datum.AddMetadata("codewhispererTimeToFirstRecommendation", payload.CodewhispererTimeToFirstRecommendation.Value);
                }

                if (payload.CodewhispererTotalShownTime.HasValue)
                {
                    datum.AddMetadata("codewhispererTotalShownTime", payload.CodewhispererTotalShownTime.Value);
                }

                datum.AddMetadata("codewhispererTriggerCharacter", payload.CodewhispererTriggerCharacter);

                datum.AddMetadata("codewhispererTriggerType", payload.CodewhispererTriggerType);

                datum.AddMetadata("codewhispererTypeaheadLength", payload.CodewhispererTypeaheadLength);

                datum.AddMetadata("codewhispererUserGroup", payload.CodewhispererUserGroup);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User requested that a resource be opened in the browser using the deeplink service
        public static void RecordDeeplinkOpen(this ITelemetryLogger telemetryLogger, DeeplinkOpen payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "deeplink_open";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the dynamic resource identifier
        public static void RecordDynamicresourceCopyIdentifier(this ITelemetryLogger telemetryLogger, DynamicresourceCopyIdentifier payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamicresource_copyIdentifier";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("resourceType", payload.ResourceType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open the dynamic resource model in the IDE
        public static void RecordDynamicresourceGetResource(this ITelemetryLogger telemetryLogger, DynamicresourceGetResource payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamicresource_getResource";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("resourceType", payload.ResourceType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Expand a Resource Type node
        public static void RecordDynamicresourceListResource(this ITelemetryLogger telemetryLogger, DynamicresourceListResource payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamicresource_listResource";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("resourceType", payload.ResourceType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// A dynamic resource mutation request completed
        public static void RecordDynamicresourceMutateResource(this ITelemetryLogger telemetryLogger, DynamicresourceMutateResource payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamicresource_mutateResource";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("dynamicResourceOperation", payload.DynamicResourceOperation);

                datum.AddMetadata("resourceType", payload.ResourceType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Change the list of available dynamic resources in the AWS Explorer
        public static void RecordDynamicresourceSelectResources(this ITelemetryLogger telemetryLogger, DynamicresourceSelectResources payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamicresource_selectResources";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create a DynamoDB table
        public static void RecordDynamodbCreateTable(this ITelemetryLogger telemetryLogger, DynamodbCreateTable payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamodb_createTable";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Deletes a record in DynamoDB record
        public static void RecordDynamodbDeleteRecord(this ITelemetryLogger telemetryLogger, DynamodbDeleteRecord payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamodb_deleteRecord";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete a DynamoDB table
        public static void RecordDynamodbDeleteTable(this ITelemetryLogger telemetryLogger, DynamodbDeleteTable payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamodb_deleteTable";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Modify a DynamoDB entity
        public static void RecordDynamodbEdit(this ITelemetryLogger telemetryLogger, DynamodbEdit payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamodb_edit";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("dynamoDbTarget", payload.DynamoDbTarget);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Fetch records from a DynamoDB table in the table browser
        public static void RecordDynamodbFetchRecords(this ITelemetryLogger telemetryLogger, DynamodbFetchRecords payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamodb_fetchRecords";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.Count.HasValue)
                {
                    datum.AddMetadata("count", payload.Count.Value);
                }

                datum.AddMetadata("dynamoDbFetchType", payload.DynamoDbFetchType);

                if (payload.DynamoDbIndexType.HasValue)
                {
                    datum.AddMetadata("dynamoDbIndexType", payload.DynamoDbIndexType.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Fetches the tables in a DynamoDB entity
        public static void RecordDynamodbFetchTables(this ITelemetryLogger telemetryLogger, DynamodbFetchTables payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamodb_fetchTables";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.Count.HasValue)
                {
                    datum.AddMetadata("count", payload.Count.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a DynamoDB table in the table browser
        public static void RecordDynamodbOpenTable(this ITelemetryLogger telemetryLogger, DynamodbOpenTable payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamodb_openTable";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.Count.HasValue)
                {
                    datum.AddMetadata("count", payload.Count.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// View a DynamoDB entity
        public static void RecordDynamodbView(this ITelemetryLogger telemetryLogger, DynamodbView payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamodb_view";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("dynamoDbTarget", payload.DynamoDbTarget);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Change the state of an EC2 Instance
        public static void RecordEc2ChangeState(this ITelemetryLogger telemetryLogger, Ec2ChangeState payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_changeState";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("ec2InstanceState", payload.Ec2InstanceState);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Remove the private key of an EC2 Key Pair from internal storage
        public static void RecordEc2ClearPrivateKey(this ITelemetryLogger telemetryLogger, Ec2ClearPrivateKey payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_clearPrivateKey";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Perform a connection to an EC2 Instance
        public static void RecordEc2ConnectToInstance(this ITelemetryLogger telemetryLogger, Ec2ConnectToInstance payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_connectToInstance";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("ec2ConnectionType", payload.Ec2ConnectionType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy AMI image to another region
        public static void RecordEc2CopyAmiToRegion(this ITelemetryLogger telemetryLogger, Ec2CopyAmiToRegion payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_copyAmiToRegion";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create an image from an EC2 Instance
        public static void RecordEc2CreateAmi(this ITelemetryLogger telemetryLogger, Ec2CreateAmi payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_createAmi";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create (allocate) an Elastic IP address
        public static void RecordEc2CreateElasticIp(this ITelemetryLogger telemetryLogger, Ec2CreateElasticIp payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_createElasticIp";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create an EC2 Key Pair
        public static void RecordEc2CreateKeyPair(this ITelemetryLogger telemetryLogger, Ec2CreateKeyPair payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_createKeyPair";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create an EC2 security group
        public static void RecordEc2CreateSecurityGroup(this ITelemetryLogger telemetryLogger, Ec2CreateSecurityGroup payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_createSecurityGroup";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create an EC2 volume snapshot
        public static void RecordEc2CreateSnapshot(this ITelemetryLogger telemetryLogger, Ec2CreateSnapshot payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_createSnapshot";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create an EC2 volume
        public static void RecordEc2CreateVolume(this ITelemetryLogger telemetryLogger, Ec2CreateVolume payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_createVolume";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete (de-register) an AMI image
        public static void RecordEc2DeleteAmi(this ITelemetryLogger telemetryLogger, Ec2DeleteAmi payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_deleteAmi";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete (release) an Elastic IP address
        public static void RecordEc2DeleteElasticIp(this ITelemetryLogger telemetryLogger, Ec2DeleteElasticIp payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_deleteElasticIp";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete an EC2 Key Pair
        public static void RecordEc2DeleteKeyPair(this ITelemetryLogger telemetryLogger, Ec2DeleteKeyPair payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_deleteKeyPair";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete an EC2 security group
        public static void RecordEc2DeleteSecurityGroup(this ITelemetryLogger telemetryLogger, Ec2DeleteSecurityGroup payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_deleteSecurityGroup";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete an EC2 Volume Snapshot
        public static void RecordEc2DeleteSnapshot(this ITelemetryLogger telemetryLogger, Ec2DeleteSnapshot payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_deleteSnapshot";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete an EC2 Volume
        public static void RecordEc2DeleteVolume(this ITelemetryLogger telemetryLogger, Ec2DeleteVolume payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_deleteVolume";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Edit AMI image permissions
        public static void RecordEc2EditAmiPermission(this ITelemetryLogger telemetryLogger, Ec2EditAmiPermission payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_editAmiPermission";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Associate or disassociate an Elastic IP with an EC2 Instance
        public static void RecordEc2EditInstanceElasticIp(this ITelemetryLogger telemetryLogger, Ec2EditInstanceElasticIp payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_editInstanceElasticIp";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.Enabled.HasValue)
                {
                    datum.AddMetadata("enabled", payload.Enabled.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Adjust the shutdown behavior of an EC2 Instance
        public static void RecordEc2EditInstanceShutdownBehavior(this ITelemetryLogger telemetryLogger, Ec2EditInstanceShutdownBehavior payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_editInstanceShutdownBehavior";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Adjust the termination protection of an EC2 Instance
        public static void RecordEc2EditInstanceTerminationProtection(this ITelemetryLogger telemetryLogger, Ec2EditInstanceTerminationProtection payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_editInstanceTerminationProtection";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.Enabled.HasValue)
                {
                    datum.AddMetadata("enabled", payload.Enabled.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Adjust the instance type of an EC2 Instance
        public static void RecordEc2EditInstanceType(this ITelemetryLogger telemetryLogger, Ec2EditInstanceType payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_editInstanceType";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Adjust an EC2 Instance's user data
        public static void RecordEc2EditInstanceUserData(this ITelemetryLogger telemetryLogger, Ec2EditInstanceUserData payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_editInstanceUserData";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Alter an EC2 security group permission
        public static void RecordEc2EditSecurityGroupPermission(this ITelemetryLogger telemetryLogger, Ec2EditSecurityGroupPermission payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_editSecurityGroupPermission";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Attach (enabled = true) or detach a volume
        public static void RecordEc2EditVolumeAttachment(this ITelemetryLogger telemetryLogger, Ec2EditVolumeAttachment payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_editVolumeAttachment";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("enabled", payload.Enabled);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Save the private key of an EC2 Key Pair out to disk
        public static void RecordEc2ExportPrivateKey(this ITelemetryLogger telemetryLogger, Ec2ExportPrivateKey payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_exportPrivateKey";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Store the private key of an EC2 Key Pair in internal storage
        public static void RecordEc2ImportPrivateKey(this ITelemetryLogger telemetryLogger, Ec2ImportPrivateKey payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_importPrivateKey";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Launch an EC2 Instance
        public static void RecordEc2LaunchInstance(this ITelemetryLogger telemetryLogger, Ec2LaunchInstance payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_launchInstance";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view EC2 AMIs
        public static void RecordEc2OpenAMIs(this ITelemetryLogger telemetryLogger, Ec2OpenAMIs payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_openAMIs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view EC2 Elastic IPs
        public static void RecordEc2OpenElasticIPs(this ITelemetryLogger telemetryLogger, Ec2OpenElasticIPs payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_openElasticIPs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view EC2 Instances
        public static void RecordEc2OpenInstances(this ITelemetryLogger telemetryLogger, Ec2OpenInstances payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_openInstances";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open to view EC2 Key pairs
        public static void RecordEc2OpenKeyPairs(this ITelemetryLogger telemetryLogger, Ec2OpenKeyPairs payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_openKeyPairs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view EC2 Security Groups
        public static void RecordEc2OpenSecurityGroups(this ITelemetryLogger telemetryLogger, Ec2OpenSecurityGroups payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_openSecurityGroups";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view EC2 Volumes
        public static void RecordEc2OpenVolumes(this ITelemetryLogger telemetryLogger, Ec2OpenVolumes payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_openVolumes";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// View the system log of an EC2 Instance
        public static void RecordEc2ViewInstanceSystemLog(this ITelemetryLogger telemetryLogger, Ec2ViewInstanceSystemLog payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_viewInstanceSystemLog";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// View an EC2 Instance's user data
        public static void RecordEc2ViewInstanceUserData(this ITelemetryLogger telemetryLogger, Ec2ViewInstanceUserData payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_viewInstanceUserData";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when the user copies the repository uri from a node
        public static void RecordEcrCopyRepositoryUri(this ITelemetryLogger telemetryLogger, EcrCopyRepositoryUri payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecr_copyRepositoryUri";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when the user copies the repository tag uri from a node. The tag uri is the repository uri + : + the tag name
        public static void RecordEcrCopyTagUri(this ITelemetryLogger telemetryLogger, EcrCopyTagUri payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecr_copyTagUri";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when creating a new ECR repository
        public static void RecordEcrCreateRepository(this ITelemetryLogger telemetryLogger, EcrCreateRepository payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecr_createRepository";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deleting an existing ECR repository
        public static void RecordEcrDeleteRepository(this ITelemetryLogger telemetryLogger, EcrDeleteRepository payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecr_deleteRepository";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deleting a tag in an ECR repository. The operation is a batch operation by default, value represents the number of tags deleted.
        public static void RecordEcrDeleteTags(this ITelemetryLogger telemetryLogger, EcrDeleteTags payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecr_deleteTags";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying an image to ECR
        public static void RecordEcrDeployImage(this ITelemetryLogger telemetryLogger, EcrDeployImage payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecr_deployImage";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.EcrDeploySource.HasValue)
                {
                    datum.AddMetadata("ecrDeploySource", payload.EcrDeploySource.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete an ECS cluster
        public static void RecordEcsDeleteCluster(this ITelemetryLogger telemetryLogger, EcsDeleteCluster payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_deleteCluster";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete ECS Scheduled task(s)
        public static void RecordEcsDeleteScheduledTask(this ITelemetryLogger telemetryLogger, EcsDeleteScheduledTask payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_deleteScheduledTask";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user deletes an ECS service
        public static void RecordEcsDeleteService(this ITelemetryLogger telemetryLogger, EcsDeleteService payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_deleteService";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying a scheduled task to an ECS cluster
        public static void RecordEcsDeployScheduledTask(this ITelemetryLogger telemetryLogger, EcsDeployScheduledTask payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_deployScheduledTask";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("ecsLaunchType", payload.EcsLaunchType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying a service to an ECS cluster
        public static void RecordEcsDeployService(this ITelemetryLogger telemetryLogger, EcsDeployService payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_deployService";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("ecsLaunchType", payload.EcsLaunchType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying a task to an ECS cluster
        public static void RecordEcsDeployTask(this ITelemetryLogger telemetryLogger, EcsDeployTask payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_deployTask";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("ecsLaunchType", payload.EcsLaunchType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when ECS execute command is disabled
        public static void RecordEcsDisableExecuteCommand(this ITelemetryLogger telemetryLogger, EcsDisableExecuteCommand payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_disableExecuteCommand";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Edit configuration of an ECS service
        public static void RecordEcsEditService(this ITelemetryLogger telemetryLogger, EcsEditService payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_editService";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when ECS execute command is enabled
        public static void RecordEcsEnableExecuteCommand(this ITelemetryLogger telemetryLogger, EcsEnableExecuteCommand payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_enableExecuteCommand";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open to view status of an ECS Cluster
        public static void RecordEcsOpenCluster(this ITelemetryLogger telemetryLogger, EcsOpenCluster payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_openCluster";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open to view status of an ECS Repository
        public static void RecordEcsOpenRepository(this ITelemetryLogger telemetryLogger, EcsOpenRepository payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_openRepository";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user completes the ECS publish wizard
        public static void RecordEcsPublishWizard(this ITelemetryLogger telemetryLogger, EcsPublishWizard payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_publishWizard";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when the ECS execute command is run
        public static void RecordEcsRunExecuteCommand(this ITelemetryLogger telemetryLogger, EcsRunExecuteCommand payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_runExecuteCommand";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("ecsExecuteCommandType", payload.EcsExecuteCommandType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Stop ECS task(s)
        public static void RecordEcsStopTask(this ITelemetryLogger telemetryLogger, EcsStopTask payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_stopTask";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called while submitting in-IDE feedback
        public static void RecordFeedbackResult(this ITelemetryLogger telemetryLogger, FeedbackResult payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "feedback_result";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Use authoring features such as autocompletion, syntax checking, and highlighting, for AWS filetypes (CFN, SAM, etc.). Emit this _once_ per file-editing session for a given file. For generic code files see `ide_editCodeFile`.
        public static void RecordFileEditAwsFile(this ITelemetryLogger telemetryLogger, FileEditAwsFile payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "file_editAwsFile";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("awsFiletype", payload.AwsFiletype);

                datum.AddMetadata("filenameExt", payload.FilenameExt);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create an IAM resource
        public static void RecordIamCreate(this ITelemetryLogger telemetryLogger, IamCreate payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "iam_create";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("iamResourceType", payload.IamResourceType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create Access Key for an IAM user
        public static void RecordIamCreateUserAccessKey(this ITelemetryLogger telemetryLogger, IamCreateUserAccessKey payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "iam_createUserAccessKey";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete an IAM resource
        public static void RecordIamDelete(this ITelemetryLogger telemetryLogger, IamDelete payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "iam_delete";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("iamResourceType", payload.IamResourceType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete Access Key for an IAM user
        public static void RecordIamDeleteUserAccessKey(this ITelemetryLogger telemetryLogger, IamDeleteUserAccessKey payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "iam_deleteUserAccessKey";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Edits policy/configuration associated with an IAM resource
        public static void RecordIamEdit(this ITelemetryLogger telemetryLogger, IamEdit payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "iam_edit";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("iamResourceType", payload.IamResourceType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view/edit an IAM resource
        public static void RecordIamOpen(this ITelemetryLogger telemetryLogger, IamOpen payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "iam_open";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("iamResourceType", payload.IamResourceType);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view/edit IAM Group Policy
        public static void RecordIamOpenGroup(this ITelemetryLogger telemetryLogger, IamOpenGroup payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "iam_openGroup";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view/edit IAM Role Policy
        public static void RecordIamOpenRole(this ITelemetryLogger telemetryLogger, IamOpenRole payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "iam_openRole";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view/edit IAM User Configuration
        public static void RecordIamOpenUser(this ITelemetryLogger telemetryLogger, IamOpenUser payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "iam_openUser";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User opened a code file with the given file extension. Client should DEDUPLICATE this metric (ideally hourly/daily). AWS-specific files should (also) emit `file_editAwsFile`.
        public static void RecordIdeEditCodeFile(this ITelemetryLogger telemetryLogger, IdeEditCodeFile payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ide_editCodeFile";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("filenameExt", payload.FilenameExt);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when opening the local configuration of a Lambda to edit
        public static void RecordLambdaConfigure(this ITelemetryLogger telemetryLogger, LambdaConfigure payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_configure";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when creating lambdas remotely
        public static void RecordLambdaCreate(this ITelemetryLogger telemetryLogger, LambdaCreate payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_create";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("runtime", payload.Runtime);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when creating a lambda project
        public static void RecordLambdaCreateProject(this ITelemetryLogger telemetryLogger, LambdaCreateProject payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_createProject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("language", payload.Language);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("templateName", payload.TemplateName);

                datum.AddMetadata("variant", payload.Variant);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// called when deleting lambdas remotely
        public static void RecordLambdaDelete(this ITelemetryLogger telemetryLogger, LambdaDelete payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_delete";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying a Lambda Function
        public static void RecordLambdaDeploy(this ITelemetryLogger telemetryLogger, LambdaDeploy payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_deploy";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("initialDeploy", payload.InitialDeploy);

                if (payload.LambdaArchitecture.HasValue)
                {
                    datum.AddMetadata("lambdaArchitecture", payload.LambdaArchitecture.Value);
                }

                datum.AddMetadata("lambdaPackageType", payload.LambdaPackageType);

                datum.AddMetadata("language", payload.Language);

                datum.AddMetadata("platform", payload.Platform);

                datum.AddMetadata("result", payload.Result);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum.AddMetadata("source", payload.Source);

                if (payload.XrayEnabled.HasValue)
                {
                    datum.AddMetadata("xrayEnabled", payload.XrayEnabled.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when creating lambdas remotely
        public static void RecordLambdaEditFunction(this ITelemetryLogger telemetryLogger, LambdaEditFunction payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_editFunction";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("lambdaPackageType", payload.LambdaPackageType);

                datum.AddMetadata("result", payload.Result);

                if (payload.Update.HasValue)
                {
                    datum.AddMetadata("update", payload.Update.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Jump to a lambda handler from elsewhere
        public static void RecordLambdaGoToHandler(this ITelemetryLogger telemetryLogger, LambdaGoToHandler payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_goToHandler";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when importing a remote Lambda function
        public static void RecordLambdaImport(this ITelemetryLogger telemetryLogger, LambdaImport payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_import";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when invoking lambdas locally (with SAM in most toolkits)
        public static void RecordLambdaInvokeLocal(this ITelemetryLogger telemetryLogger, LambdaInvokeLocal payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_invokeLocal";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("debug", payload.Debug);

                if (payload.LambdaArchitecture.HasValue)
                {
                    datum.AddMetadata("lambdaArchitecture", payload.LambdaArchitecture.Value);
                }

                datum.AddMetadata("lambdaPackageType", payload.LambdaPackageType);

                datum.AddMetadata("result", payload.Result);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum.AddMetadata("source", payload.Source);

                datum.AddMetadata("version", payload.Version);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when invoking lambdas remotely
        public static void RecordLambdaInvokeRemote(this ITelemetryLogger telemetryLogger, LambdaInvokeRemote payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_invokeRemote";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user completes the Lambda publish wizard
        public static void RecordLambdaPublishWizard(this ITelemetryLogger telemetryLogger, LambdaPublishWizard payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_publishWizard";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when updating a Lambda function's code outside the context of a SAM template
        public static void RecordLambdaUpdateFunctionCode(this ITelemetryLogger telemetryLogger, LambdaUpdateFunctionCode payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_updateFunctionCode";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when creating a new database connection configuration to for a RDS database. In Datagrip we do not get this infromation if it is created directly, so this is only counts actions.
        public static void RecordRdsCreateConnectionConfiguration(this ITelemetryLogger telemetryLogger, RdsCreateConnectionConfiguration payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_createConnectionConfiguration";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("databaseCredentials", payload.DatabaseCredentials);

                datum.AddMetadata("databaseEngine", payload.DatabaseEngine);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create a RDS security group
        public static void RecordRdsCreateSecurityGroup(this ITelemetryLogger telemetryLogger, RdsCreateSecurityGroup payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_createSecurityGroup";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create a RDS subnet group
        public static void RecordRdsCreateSubnetGroup(this ITelemetryLogger telemetryLogger, RdsCreateSubnetGroup payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_createSubnetGroup";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete a RDS DB instance
        public static void RecordRdsDeleteInstance(this ITelemetryLogger telemetryLogger, RdsDeleteInstance payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_deleteInstance";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete RDS security group(s)
        public static void RecordRdsDeleteSecurityGroup(this ITelemetryLogger telemetryLogger, RdsDeleteSecurityGroup payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_deleteSecurityGroup";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete RDS subnet group(s)
        public static void RecordRdsDeleteSubnetGroup(this ITelemetryLogger telemetryLogger, RdsDeleteSubnetGroup payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_deleteSubnetGroup";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when getting IAM/SecretsManager credentials for a RDS database. Value represents how long it takes in ms.
        public static void RecordRdsGetCredentials(this ITelemetryLogger telemetryLogger, RdsGetCredentials payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_getCredentials";
                datum.Unit = Unit.Milliseconds;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("databaseCredentials", payload.DatabaseCredentials);

                datum.AddMetadata("databaseEngine", payload.DatabaseEngine);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Launch a RDS DB instance
        public static void RecordRdsLaunchInstance(this ITelemetryLogger telemetryLogger, RdsLaunchInstance payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_launchInstance";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view RDS DB Instances
        public static void RecordRdsOpenInstances(this ITelemetryLogger telemetryLogger, RdsOpenInstances payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_openInstances";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view RDS Security Groups
        public static void RecordRdsOpenSecurityGroups(this ITelemetryLogger telemetryLogger, RdsOpenSecurityGroups payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_openSecurityGroups";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view RDS Subnet Groups
        public static void RecordRdsOpenSubnets(this ITelemetryLogger telemetryLogger, RdsOpenSubnets payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_openSubnets";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when creating a new database connection configuration to for a Redshift database. In Datagrip we do not get this infromation if it is created directly, so this only counts actions.
        public static void RecordRedshiftCreateConnectionConfiguration(this ITelemetryLogger telemetryLogger, RedshiftCreateConnectionConfiguration payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "redshift_createConnectionConfiguration";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("databaseCredentials", payload.DatabaseCredentials);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when getting IAM/SecretsManager credentials for a Redshift database. Value represents how long it takes in ms.
        public static void RecordRedshiftGetCredentials(this ITelemetryLogger telemetryLogger, RedshiftGetCredentials payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "redshift_getCredentials";
                datum.Unit = Unit.Milliseconds;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("databaseCredentials", payload.DatabaseCredentials);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the bucket name to the clipboard
        public static void RecordS3CopyBucketName(this ITelemetryLogger telemetryLogger, S3CopyBucketName payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_copyBucketName";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the path of a S3 object to the clipboard
        public static void RecordS3CopyPath(this ITelemetryLogger telemetryLogger, S3CopyPath payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_copyPath";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the S3 URI of a S3 object to the clipboard (e.g. s3://<bucketName>/abc.txt)
        public static void RecordS3CopyUri(this ITelemetryLogger telemetryLogger, S3CopyUri payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_copyUri";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the URL of a S3 object to the clipboard
        public static void RecordS3CopyUrl(this ITelemetryLogger telemetryLogger, S3CopyUrl payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_copyUrl";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("presigned", payload.Presigned);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create a S3 bucket
        public static void RecordS3CreateBucket(this ITelemetryLogger telemetryLogger, S3CreateBucket payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_createBucket";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create an S3 folder
        public static void RecordS3CreateFolder(this ITelemetryLogger telemetryLogger, S3CreateFolder payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_createFolder";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete a S3 bucket
        public static void RecordS3DeleteBucket(this ITelemetryLogger telemetryLogger, S3DeleteBucket payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_deleteBucket";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete S3 object(s)
        public static void RecordS3DeleteObject(this ITelemetryLogger telemetryLogger, S3DeleteObject payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_deleteObject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.FailedCount.HasValue)
                {
                    datum.AddMetadata("failedCount", payload.FailedCount.Value);
                }

                datum.AddMetadata("result", payload.Result);

                if (payload.SuccessCount.HasValue)
                {
                    datum.AddMetadata("successCount", payload.SuccessCount.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Download S3 object(s)
        public static void RecordS3DownloadObject(this ITelemetryLogger telemetryLogger, S3DownloadObject payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_downloadObject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.Component.HasValue)
                {
                    datum.AddMetadata("component", payload.Component.Value);
                }

                if (payload.FailedCount.HasValue)
                {
                    datum.AddMetadata("failedCount", payload.FailedCount.Value);
                }

                datum.AddMetadata("result", payload.Result);

                if (payload.SuccessCount.HasValue)
                {
                    datum.AddMetadata("successCount", payload.SuccessCount.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Download multiple S3 objects
        public static void RecordS3DownloadObjects(this ITelemetryLogger telemetryLogger, S3DownloadObjects payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_downloadObjects";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Edit or view one or more S3 objects in the IDE
        public static void RecordS3EditObject(this ITelemetryLogger telemetryLogger, S3EditObject payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_editObject";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.Component.HasValue)
                {
                    datum.AddMetadata("component", payload.Component.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view S3 bucket properties
        public static void RecordS3OpenBucketProperties(this ITelemetryLogger telemetryLogger, S3OpenBucketProperties payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_openBucketProperties";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a view of a S3 bucket
        public static void RecordS3OpenEditor(this ITelemetryLogger telemetryLogger, S3OpenEditor payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_openEditor";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view S3 Multipart upload
        public static void RecordS3OpenMultipartUpload(this ITelemetryLogger telemetryLogger, S3OpenMultipartUpload payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_openMultipartUpload";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Rename a single S3 object
        public static void RecordS3RenameObject(this ITelemetryLogger telemetryLogger, S3RenameObject payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_renameObject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Upload S3 object(s)
        public static void RecordS3UploadObject(this ITelemetryLogger telemetryLogger, S3UploadObject payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_uploadObject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.Component.HasValue)
                {
                    datum.AddMetadata("component", payload.Component.Value);
                }

                if (payload.FailedCount.HasValue)
                {
                    datum.AddMetadata("failedCount", payload.FailedCount.Value);
                }

                datum.AddMetadata("result", payload.Result);

                if (payload.SuccessCount.HasValue)
                {
                    datum.AddMetadata("successCount", payload.SuccessCount.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Upload multiple S3 objects
        public static void RecordS3UploadObjects(this ITelemetryLogger telemetryLogger, S3UploadObjects payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_uploadObjects";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when building a SAM application
        public static void RecordSamBuild(this ITelemetryLogger telemetryLogger, SamBuild payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sam_build";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.LambdaPackageType.HasValue)
                {
                    datum.AddMetadata("lambdaPackageType", payload.LambdaPackageType.Value);
                }

                datum.AddMetadata("source", payload.Source);

                datum.AddMetadata("version", payload.Version);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying a SAM application
        public static void RecordSamDeploy(this ITelemetryLogger telemetryLogger, SamDeploy payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sam_deploy";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum.AddMetadata("version", payload.Version);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when checking if the SAM executable on the local machine is valid with a valid version
        public static void RecordSamInfo(this ITelemetryLogger telemetryLogger, SamInfo payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sam_info";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("version", payload.Version);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when initing a SAM application
        public static void RecordSamInit(this ITelemetryLogger telemetryLogger, SamInit payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sam_init";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("eventBridgeSchema", payload.EventBridgeSchema);

                if (payload.LambdaArchitecture.HasValue)
                {
                    datum.AddMetadata("lambdaArchitecture", payload.LambdaArchitecture.Value);
                }

                if (payload.LambdaPackageType.HasValue)
                {
                    datum.AddMetadata("lambdaPackageType", payload.LambdaPackageType.Value);
                }

                datum.AddMetadata("result", payload.Result);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum.AddMetadata("templateName", payload.TemplateName);

                datum.AddMetadata("version", payload.Version);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when syncing a SAM application
        public static void RecordSamSync(this ITelemetryLogger telemetryLogger, SamSync payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sam_sync";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.LambdaPackageType.HasValue)
                {
                    datum.AddMetadata("lambdaPackageType", payload.LambdaPackageType.Value);
                }

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum.AddMetadata("syncedResources", payload.SyncedResources);

                datum.AddMetadata("version", payload.Version);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when downloading an EventBridge schema
        public static void RecordSchemasDownload(this ITelemetryLogger telemetryLogger, SchemasDownload payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "schemas_download";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                if (payload.SchemaLanguage.HasValue)
                {
                    datum.AddMetadata("schemaLanguage", payload.SchemaLanguage.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when searching an EventBridge schema registry
        public static void RecordSchemasSearch(this ITelemetryLogger telemetryLogger, SchemasSearch payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "schemas_search";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when selecting an EventBridge schema to view
        public static void RecordSchemasView(this ITelemetryLogger telemetryLogger, SchemasView payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "schemas_view";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when stopping the IDE on a best effort basis
        public static void RecordSessionEnd(this ITelemetryLogger telemetryLogger, SessionEnd payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "session_end";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when starting the plugin
        public static void RecordSessionStart(this ITelemetryLogger telemetryLogger, SessionStart payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "session_start";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create a SNS Subscription
        public static void RecordSnsCreateSubscription(this ITelemetryLogger telemetryLogger, SnsCreateSubscription payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sns_createSubscription";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create a SNS Topic
        public static void RecordSnsCreateTopic(this ITelemetryLogger telemetryLogger, SnsCreateTopic payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sns_createTopic";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user deletes SNS subscription(s)
        public static void RecordSnsDeleteSubscription(this ITelemetryLogger telemetryLogger, SnsDeleteSubscription payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sns_deleteSubscription";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user deletes a SNS Topic
        public static void RecordSnsDeleteTopic(this ITelemetryLogger telemetryLogger, SnsDeleteTopic payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sns_deleteTopic";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view SNS Subscriptions
        public static void RecordSnsOpenSubscriptions(this ITelemetryLogger telemetryLogger, SnsOpenSubscriptions payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sns_openSubscriptions";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view details of SNS Topic
        public static void RecordSnsOpenTopic(this ITelemetryLogger telemetryLogger, SnsOpenTopic payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sns_openTopic";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Publish message to a SNS topic
        public static void RecordSnsPublishMessage(this ITelemetryLogger telemetryLogger, SnsPublishMessage payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sns_publishMessage";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Configure the queue as a trigger for a Lambda
        public static void RecordSqsConfigureLambdaTrigger(this ITelemetryLogger telemetryLogger, SqsConfigureLambdaTrigger payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_configureLambdaTrigger";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create a new SQS queue
        public static void RecordSqsCreateQueue(this ITelemetryLogger telemetryLogger, SqsCreateQueue payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_createQueue";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                if (payload.SqsQueueType.HasValue)
                {
                    datum.AddMetadata("sqsQueueType", payload.SqsQueueType.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete one or more messages from an SQS queue. Value indicates the number of messages that we tried to delete.
        public static void RecordSqsDeleteMessages(this ITelemetryLogger telemetryLogger, SqsDeleteMessages payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_deleteMessages";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when user deletes a SQS queue
        public static void RecordSqsDeleteQueue(this ITelemetryLogger telemetryLogger, SqsDeleteQueue payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_deleteQueue";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                if (payload.SqsQueueType.HasValue)
                {
                    datum.AddMetadata("sqsQueueType", payload.SqsQueueType.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Edit the Queue parameters
        public static void RecordSqsEditQueueParameters(this ITelemetryLogger telemetryLogger, SqsEditQueueParameters payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_editQueueParameters";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open an SQS queue. Initially opens to either the send message pane or poll messages pane.
        public static void RecordSqsOpenQueue(this ITelemetryLogger telemetryLogger, SqsOpenQueue payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_openQueue";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Purge all messages from the queue
        public static void RecordSqsPurgeQueue(this ITelemetryLogger telemetryLogger, SqsPurgeQueue payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_purgeQueue";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Send a message to an SQS queue
        public static void RecordSqsSendMessage(this ITelemetryLogger telemetryLogger, SqsSendMessage payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_sendMessage";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Subscribe the queue to messages from an sns topic
        public static void RecordSqsSubscribeSns(this ITelemetryLogger telemetryLogger, SqsSubscribeSns payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_subscribeSns";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after closing a threat composer file
        public static void RecordThreatComposerClosed(this ITelemetryLogger telemetryLogger, ThreatComposerClosed payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "threatComposer_closed";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("id", payload.Id);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after a new threat composer file is created using command pallet or New File option
        public static void RecordThreatComposerCreated(this ITelemetryLogger telemetryLogger, ThreatComposerCreated payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "threatComposer_created";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("id", payload.Id);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after an error is thrown from the threat composer view
        public static void RecordThreatComposerError(this ITelemetryLogger telemetryLogger, ThreatComposerError payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "threatComposer_error";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("id", payload.Id);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after a threat composer file has been saved
        public static void RecordThreatComposerFileSaved(this ITelemetryLogger telemetryLogger, ThreatComposerFileSaved payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "threatComposer_fileSaved";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("id", payload.Id);

                datum.AddMetadata("saveType", payload.SaveType);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called after opening a threat composer file
        public static void RecordThreatComposerOpened(this ITelemetryLogger telemetryLogger, ThreatComposerOpened payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "threatComposer_opened";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("id", payload.Id);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// The user closed 'something' (specified by 'module'). Examples: a view, feature, resource, ...
        public static void RecordToolkitCloseModule(this ITelemetryLogger telemetryLogger, ToolkitCloseModule payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "toolkit_closeModule";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("module", payload.Module);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Represents the current enabled state of a feature. Used to track user journey through a feature. Emitted after feature-specific operations of interest in the Toolkit.
        public static void RecordToolkitFeatureState(this ITelemetryLogger telemetryLogger, ToolkitFeatureState payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "toolkit_featureState";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.AuthStatus.HasValue)
                {
                    datum.AddMetadata("authStatus", payload.AuthStatus.Value);
                }

                if (payload.CredentialSourceId.HasValue)
                {
                    datum.AddMetadata("credentialSourceId", payload.CredentialSourceId.Value);
                }

                if (payload.CredentialType.HasValue)
                {
                    datum.AddMetadata("credentialType", payload.CredentialType.Value);
                }

                datum.AddMetadata("enabled", payload.Enabled);

                datum.AddMetadata("featureId", payload.FeatureId);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// The toolkit tried to retrieve blob data from a url
        public static void RecordToolkitGetExternalResource(this ITelemetryLogger telemetryLogger, ToolkitGetExternalResource payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "toolkit_getExternalResource";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("url", payload.Url);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// The Toolkit has completed initialization
        public static void RecordToolkitInit(this ITelemetryLogger telemetryLogger, ToolkitInit payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "toolkit_init";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.Result.HasValue)
                {
                    datum.AddMetadata("result", payload.Result.Value);
                }

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// The Toolkit has completed initialization for the specified module.
        public static void RecordToolkitInitModule(this ITelemetryLogger telemetryLogger, ToolkitInitModule payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "toolkit_initModule";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                if (payload.Attempts.HasValue)
                {
                    datum.AddMetadata("attempts", payload.Attempts.Value);
                }

                datum.AddMetadata("module", payload.Module);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("version", payload.Version);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User invoked an action. `source` is the notification that produced the action
        public static void RecordToolkitInvokeAction(this ITelemetryLogger telemetryLogger, ToolkitInvokeAction payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "toolkit_invokeAction";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("action", payload.Action);

                datum.AddMetadata("component", payload.Component);

                datum.AddMetadata("id", payload.Id);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User opened 'something' (specified by 'module'). Examples: a view, feature, resource, ...
        public static void RecordToolkitOpenModule(this ITelemetryLogger telemetryLogger, ToolkitOpenModule payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "toolkit_openModule";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("module", payload.Module);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Toolkit presented an action. `source` is the notification that produced the action. See also `toolkit_showNotification`.
        public static void RecordToolkitShowAction(this ITelemetryLogger telemetryLogger, ToolkitShowAction payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "toolkit_showAction";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("component", payload.Component);

                datum.AddMetadata("id", payload.Id);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("source", payload.Source);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Show a notification message, optionally with selected action set in `userChoice`. See also `toolkit_showAction`.
        public static void RecordToolkitShowNotification(this ITelemetryLogger telemetryLogger, ToolkitShowNotification payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "toolkit_showNotification";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("component", payload.Component);

                datum.AddMetadata("id", payload.Id);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("userChoice", payload.UserChoice);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Generic metric for tracking arbitrary scenarios that are not yet formalized into a full metric.
        public static void RecordToolkitTrackScenario(this ITelemetryLogger telemetryLogger, ToolkitTrackScenario payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "toolkit_trackScenario";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("amazonqConversationId", payload.AmazonqConversationId);

                datum.AddMetadata("count", payload.Count);

                datum.AddMetadata("credentialStartUrl", payload.CredentialStartUrl);

                datum.AddMetadata("scenario", payload.Scenario);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// View logs for the toolkit
        public static void RecordToolkitViewLogs(this ITelemetryLogger telemetryLogger, ToolkitViewLogs payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "toolkit_viewLogs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// User clicked/activated a UI element. This does not necessarily have to be an explicit mouse click. Any user action that has the same behavior as a mouse click can use this event.
        public static void RecordUiClick(this ITelemetryLogger telemetryLogger, UiClick payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ui_click";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("elementId", payload.ElementId);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view VPC Network ACLs
        public static void RecordVpcOpenACLs(this ITelemetryLogger telemetryLogger, VpcOpenACLs payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "vpc_openACLs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view VPC Internet Gateway
        public static void RecordVpcOpenGateways(this ITelemetryLogger telemetryLogger, VpcOpenGateways payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "vpc_openGateways";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view VPC RouteTable
        public static void RecordVpcOpenRouteTables(this ITelemetryLogger telemetryLogger, VpcOpenRouteTables payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "vpc_openRouteTables";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view VPC Subnets
        public static void RecordVpcOpenSubnets(this ITelemetryLogger telemetryLogger, VpcOpenSubnets payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "vpc_openSubnets";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view VPC details
        public static void RecordVpcOpenVPCs(this ITelemetryLogger telemetryLogger, VpcOpenVPCs payload, Func<MetricDatum, MetricDatum> transformDatum = null)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "vpc_openVPCs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                datum.TrackPerformance = payload.TrackPerformance;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);
                datum.AddMetadata("reason", payload.Reason);
                datum.AddMetadata("reasonDesc", payload.ReasonDescription);
                datum.AddMetadata("errorCode", payload.ErrorCode);
                datum.AddMetadata("causedBy", payload.CausedBy);
                datum.AddMetadata("httpStatusCode", payload.HttpStatusCode);
                datum.AddMetadata("requestId", payload.RequestId);
                datum.AddMetadata("requestServiceType", payload.RequestServiceType);
                datum.AddMetadata("traceId", payload.TraceId);
                datum.AddMetadata("metricId", payload.MetricId);
                datum.AddMetadata("parentId", payload.ParentId);
                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }
                datum.AddMetadata("locale", payload.Locale);

                datum.AddMetadata("result", payload.Result);

                datum = datum.InvokeTransform(transformDatum);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
    }
    
    /// Metric field type
    /// The intent of the upload
    public struct AmazonqUploadIntent
    {
        
        private string _value;
        
        /// TRANSFORMATION
        public static readonly AmazonqUploadIntent TRANSFORMATION = new AmazonqUploadIntent("TRANSFORMATION");
        
        /// TASK_ASSIST_PLANNING
        public static readonly AmazonqUploadIntent TASKASSISTPLANNING = new AmazonqUploadIntent("TASK_ASSIST_PLANNING");
        
        public AmazonqUploadIntent(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The source artifact of an App Runner service
    public struct AppRunnerServiceSource
    {
        
        private string _value;
        
        /// ecr
        public static readonly AppRunnerServiceSource Ecr = new AppRunnerServiceSource("ecr");
        
        /// ecrPublic
        public static readonly AppRunnerServiceSource EcrPublic = new AppRunnerServiceSource("ecrPublic");
        
        /// repository
        public static readonly AppRunnerServiceSource Repository = new AppRunnerServiceSource("repository");
        
        public AppRunnerServiceSource(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The current state of the App Runner service
    public struct AppRunnerServiceStatus
    {
        
        private string _value;
        
        /// CREATE_FAILED
        public static readonly AppRunnerServiceStatus CREATEFAILED = new AppRunnerServiceStatus("CREATE_FAILED");
        
        /// RUNNING
        public static readonly AppRunnerServiceStatus RUNNING = new AppRunnerServiceStatus("RUNNING");
        
        /// DELETED
        public static readonly AppRunnerServiceStatus DELETED = new AppRunnerServiceStatus("DELETED");
        
        /// DELETE_FAILED
        public static readonly AppRunnerServiceStatus DELETEFAILED = new AppRunnerServiceStatus("DELETE_FAILED");
        
        /// PAUSED
        public static readonly AppRunnerServiceStatus PAUSED = new AppRunnerServiceStatus("PAUSED");
        
        /// OPERATION_IN_PROGRESS
        public static readonly AppRunnerServiceStatus OPERATIONINPROGRESS = new AppRunnerServiceStatus("OPERATION_IN_PROGRESS");
        
        public AppRunnerServiceStatus(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Status of the an auth connection.
    public struct AuthStatus
    {
        
        private string _value;
        
        /// connected
        public static readonly AuthStatus Connected = new AuthStatus("connected");
        
        /// notConnected
        public static readonly AuthStatus NotConnected = new AuthStatus("notConnected");
        
        /// expired
        public static readonly AuthStatus Expired = new AuthStatus("expired");
        
        public AuthStatus(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The type of auth flow used for signing in
    public struct AuthType
    {
        
        private string _value;
        
        /// PKCE
        public static readonly AuthType PKCE = new AuthType("PKCE");
        
        /// DeviceCode
        public static readonly AuthType DeviceCode = new AuthType("DeviceCode");
        
        /// IAM
        public static readonly AuthType IAM = new AuthType("IAM");
        
        /// Unknown
        public static readonly AuthType Unknown = new AuthType("Unknown");
        
        public AuthType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// AWS filetype kind
    public struct AwsFiletype
    {
        
        private string _value;
        
        /// awsCredentials
        public static readonly AwsFiletype AwsCredentials = new AwsFiletype("awsCredentials");
        
        /// cloudformation
        public static readonly AwsFiletype Cloudformation = new AwsFiletype("cloudformation");
        
        /// cloudformationSam
        public static readonly AwsFiletype CloudformationSam = new AwsFiletype("cloudformationSam");
        
        /// codebuildBuildspec
        public static readonly AwsFiletype CodebuildBuildspec = new AwsFiletype("codebuildBuildspec");
        
        /// ecsTask
        public static readonly AwsFiletype EcsTask = new AwsFiletype("ecsTask");
        
        /// eventbridgeSchema
        public static readonly AwsFiletype EventbridgeSchema = new AwsFiletype("eventbridgeSchema");
        
        /// iamPolicy
        public static readonly AwsFiletype IamPolicy = new AwsFiletype("iamPolicy");
        
        /// samconfig
        public static readonly AwsFiletype Samconfig = new AwsFiletype("samconfig");
        
        /// serverless
        public static readonly AwsFiletype Serverless = new AwsFiletype("serverless");
        
        /// stepfunctionsAsl
        public static readonly AwsFiletype StepfunctionsAsl = new AwsFiletype("stepfunctionsAsl");
        
        /// smithyModel
        public static readonly AwsFiletype SmithyModel = new AwsFiletype("smithyModel");
        
        /// ssmDocument
        public static readonly AwsFiletype SsmDocument = new AwsFiletype("ssmDocument");
        
        /// other
        public static readonly AwsFiletype Other = new AwsFiletype("other");
        
        public AwsFiletype(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// High level categorization indicating the cause of the error
    public struct CausedBy
    {
        
        private string _value;
        
        /// user
        public static readonly CausedBy User = new CausedBy("user");
        
        /// service
        public static readonly CausedBy Service = new CausedBy("service");
        
        /// client
        public static readonly CausedBy Client = new CausedBy("client");
        
        /// unknown
        public static readonly CausedBy Unknown = new CausedBy("unknown");
        
        public CausedBy(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// User inputted check type to denote which custom check to run.
    public struct CheckType
    {
        
        private string _value;
        
        /// CheckNoNewAccess
        public static readonly CheckType CheckNoNewAccess = new CheckType("CheckNoNewAccess");
        
        /// CheckAccessNotGranted
        public static readonly CheckType CheckAccessNotGranted = new CheckType("CheckAccessNotGranted");
        
        /// CheckNoPublicAccess
        public static readonly CheckType CheckNoPublicAccess = new CheckType("CheckNoPublicAccess");
        
        public CheckType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Presentation mode used in a CloudWatch Logs operation
    public struct CloudWatchLogsPresentation
    {
        
        private string _value;
        
        /// ui
        public static readonly CloudWatchLogsPresentation Ui = new CloudWatchLogsPresentation("ui");
        
        /// text
        public static readonly CloudWatchLogsPresentation Text = new CloudWatchLogsPresentation("text");
        
        public CloudWatchLogsPresentation(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// CloudWatch Logs entity
    public struct CloudWatchResourceType
    {
        
        private string _value;
        
        /// logGroup
        public static readonly CloudWatchResourceType LogGroup = new CloudWatchResourceType("logGroup");
        
        /// logGroupList
        public static readonly CloudWatchResourceType LogGroupList = new CloudWatchResourceType("logGroupList");
        
        /// logStream
        public static readonly CloudWatchResourceType LogStream = new CloudWatchResourceType("logStream");
        
        public CloudWatchResourceType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Type of Git repository provided to the Amazon CodeCatalyst dev environment create wizard
    public struct CodecatalystCreateDevEnvironmentRepoType
    {
        
        private string _value;
        
        /// linked
        public static readonly CodecatalystCreateDevEnvironmentRepoType Linked = new CodecatalystCreateDevEnvironmentRepoType("linked");
        
        /// unlinked
        public static readonly CodecatalystCreateDevEnvironmentRepoType Unlinked = new CodecatalystCreateDevEnvironmentRepoType("unlinked");
        
        /// none
        public static readonly CodecatalystCreateDevEnvironmentRepoType None = new CodecatalystCreateDevEnvironmentRepoType("none");
        
        public CodecatalystCreateDevEnvironmentRepoType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Locality of the Amazon CodeCatalyst update dev environment request (i.e., from the thin client or the local IDE instance)
    public struct CodecatalystUpdateDevEnvironmentLocationType
    {
        
        private string _value;
        
        /// remote
        public static readonly CodecatalystUpdateDevEnvironmentLocationType Remote = new CodecatalystUpdateDevEnvironmentLocationType("remote");
        
        /// local
        public static readonly CodecatalystUpdateDevEnvironmentLocationType Local = new CodecatalystUpdateDevEnvironmentLocationType("local");
        
        public CodecatalystUpdateDevEnvironmentLocationType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Captures the type of fix that was accepted
    public struct CodeFixAction
    {
        
        private string _value;
        
        /// openDiff
        public static readonly CodeFixAction OpenDiff = new CodeFixAction("openDiff");
        
        /// insertAtCursor
        public static readonly CodeFixAction InsertAtCursor = new CodeFixAction("insertAtCursor");
        
        /// copyDiff
        public static readonly CodeFixAction CopyDiff = new CodeFixAction("copyDiff");
        
        /// applyFix
        public static readonly CodeFixAction ApplyFix = new CodeFixAction("applyFix");
        
        public CodeFixAction(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Type of transform artifact
    public struct CodeTransformArtifactType
    {
        
        private string _value;
        
        /// ClientInstructions
        public static readonly CodeTransformArtifactType ClientInstructions = new CodeTransformArtifactType("ClientInstructions");
        
        /// Logs
        public static readonly CodeTransformArtifactType Logs = new CodeTransformArtifactType("Logs");
        
        public CodeTransformArtifactType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Type of build command
    public struct CodeTransformBuildCommand
    {
        
        private string _value;
        
        /// mvnw.cmd
        public static readonly CodeTransformBuildCommand Mvnwcmd = new CodeTransformBuildCommand("mvnw.cmd");
        
        /// mvnw
        public static readonly CodeTransformBuildCommand Mvnw = new CodeTransformBuildCommand("mvnw");
        
        /// mvn
        public static readonly CodeTransformBuildCommand Mvn = new CodeTransformBuildCommand("mvn");
        
        /// IDEBundledMaven
        public static readonly CodeTransformBuildCommand IDEBundledMaven = new CodeTransformBuildCommand("IDEBundledMaven");
        
        /// gradlew.bat
        public static readonly CodeTransformBuildCommand Gradlewbat = new CodeTransformBuildCommand("gradlew.bat");
        
        /// gradlew
        public static readonly CodeTransformBuildCommand Gradlew = new CodeTransformBuildCommand("gradlew");
        
        /// gradle
        public static readonly CodeTransformBuildCommand Gradle = new CodeTransformBuildCommand("gradle");
        
        /// IDEBundledGradle
        public static readonly CodeTransformBuildCommand IDEBundledGradle = new CodeTransformBuildCommand("IDEBundledGradle");
        
        public CodeTransformBuildCommand(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Type of build system
    public struct CodeTransformBuildSystem
    {
        
        private string _value;
        
        /// Maven
        public static readonly CodeTransformBuildSystem Maven = new CodeTransformBuildSystem("Maven");
        
        /// Gradle
        public static readonly CodeTransformBuildSystem Gradle = new CodeTransformBuildSystem("Gradle");
        
        public CodeTransformBuildSystem(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Names of components that can cancel a transformation
    public struct CodeTransformCancelSrcComponents
    {
        
        private string _value;
        
        /// apiError
        public static readonly CodeTransformCancelSrcComponents ApiError = new CodeTransformCancelSrcComponents("apiError");
        
        /// loadingPanelStopButton
        public static readonly CodeTransformCancelSrcComponents LoadingPanelStopButton = new CodeTransformCancelSrcComponents("loadingPanelStopButton");
        
        /// devToolsStopButton
        public static readonly CodeTransformCancelSrcComponents DevToolsStopButton = new CodeTransformCancelSrcComponents("devToolsStopButton");
        
        /// bottomPanelSideNavButton
        public static readonly CodeTransformCancelSrcComponents BottomPanelSideNavButton = new CodeTransformCancelSrcComponents("bottomPanelSideNavButton");
        
        public CodeTransformCancelSrcComponents(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Allowed Java versions to transform from
    public struct CodeTransformJavaSourceVersionsAllowed
    {
        
        private string _value;
        
        /// JDK_1_8
        public static readonly CodeTransformJavaSourceVersionsAllowed JDK18 = new CodeTransformJavaSourceVersionsAllowed("JDK_1_8");
        
        /// JDK_11
        public static readonly CodeTransformJavaSourceVersionsAllowed JDK11 = new CodeTransformJavaSourceVersionsAllowed("JDK_11");
        
        /// Other
        public static readonly CodeTransformJavaSourceVersionsAllowed Other = new CodeTransformJavaSourceVersionsAllowed("Other");
        
        public CodeTransformJavaSourceVersionsAllowed(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Allowed Java versions to transform to
    public struct CodeTransformJavaTargetVersionsAllowed
    {
        
        private string _value;
        
        /// JDK_17
        public static readonly CodeTransformJavaTargetVersionsAllowed JDK17 = new CodeTransformJavaTargetVersionsAllowed("JDK_17");
        
        public CodeTransformJavaTargetVersionsAllowed(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Names of components that can cancel the diff viewer
    public struct CodeTransformPatchViewerCancelSrcComponents
    {
        
        private string _value;
        
        /// apiError
        public static readonly CodeTransformPatchViewerCancelSrcComponents ApiError = new CodeTransformPatchViewerCancelSrcComponents("apiError");
        
        /// cancelButton
        public static readonly CodeTransformPatchViewerCancelSrcComponents CancelButton = new CodeTransformPatchViewerCancelSrcComponents("cancelButton");
        
        public CodeTransformPatchViewerCancelSrcComponents(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Names of the pre-validation errors that can occur
    public struct CodeTransformPreValidationError
    {
        
        private string _value;
        
        /// NoPom
        public static readonly CodeTransformPreValidationError NoPom = new CodeTransformPreValidationError("NoPom");
        
        /// NoJavaProject
        public static readonly CodeTransformPreValidationError NoJavaProject = new CodeTransformPreValidationError("NoJavaProject");
        
        /// UnsupportedJavaVersion
        public static readonly CodeTransformPreValidationError UnsupportedJavaVersion = new CodeTransformPreValidationError("UnsupportedJavaVersion");
        
        /// JavaDowngradeAttempt
        public static readonly CodeTransformPreValidationError JavaDowngradeAttempt = new CodeTransformPreValidationError("JavaDowngradeAttempt");
        
        /// UnsupportedBuildSystem
        public static readonly CodeTransformPreValidationError UnsupportedBuildSystem = new CodeTransformPreValidationError("UnsupportedBuildSystem");
        
        /// EmptyProject
        public static readonly CodeTransformPreValidationError EmptyProject = new CodeTransformPreValidationError("EmptyProject");
        
        /// NonSsoLogin
        public static readonly CodeTransformPreValidationError NonSsoLogin = new CodeTransformPreValidationError("NonSsoLogin");
        
        /// RemoteRunProject
        public static readonly CodeTransformPreValidationError RemoteRunProject = new CodeTransformPreValidationError("RemoteRunProject");
        
        public CodeTransformPreValidationError(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The type of the Automated trigger to send request to CodeWhisperer service
    public struct CodewhispererAutomatedTriggerType
    {
        
        private string _value;
        
        /// KeyStrokeCount
        public static readonly CodewhispererAutomatedTriggerType KeyStrokeCount = new CodewhispererAutomatedTriggerType("KeyStrokeCount");
        
        /// SpecialCharacters
        public static readonly CodewhispererAutomatedTriggerType SpecialCharacters = new CodewhispererAutomatedTriggerType("SpecialCharacters");
        
        /// Enter
        public static readonly CodewhispererAutomatedTriggerType Enter = new CodewhispererAutomatedTriggerType("Enter");
        
        /// IntelliSenseAcceptance
        public static readonly CodewhispererAutomatedTriggerType IntelliSenseAcceptance = new CodewhispererAutomatedTriggerType("IntelliSenseAcceptance");
        
        /// IdleTime
        public static readonly CodewhispererAutomatedTriggerType IdleTime = new CodewhispererAutomatedTriggerType("IdleTime");
        
        /// Classifier
        public static readonly CodewhispererAutomatedTriggerType Classifier = new CodewhispererAutomatedTriggerType("Classifier");
        
        public CodewhispererAutomatedTriggerType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The scope of the security scan being performed
    public struct CodewhispererCodeScanScope
    {
        
        private string _value;
        
        /// FILE
        public static readonly CodewhispererCodeScanScope FILE = new CodewhispererCodeScanScope("FILE");
        
        /// FILE_AUTO
        public static readonly CodewhispererCodeScanScope FILEAUTO = new CodewhispererCodeScanScope("FILE_AUTO");
        
        /// FILE_ON_DEMAND
        public static readonly CodewhispererCodeScanScope FILEONDEMAND = new CodewhispererCodeScanScope("FILE_ON_DEMAND");
        
        /// PROJECT
        public static readonly CodewhispererCodeScanScope PROJECT = new CodewhispererCodeScanScope("PROJECT");
        
        public CodewhispererCodeScanScope(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Completion Type of the inference results returned from CodeWhisperer model layer
    public struct CodewhispererCompletionType
    {
        
        private string _value;
        
        /// Line
        public static readonly CodewhispererCompletionType Line = new CodewhispererCompletionType("Line");
        
        /// Block
        public static readonly CodewhispererCompletionType Block = new CodewhispererCompletionType("Block");
        
        public CodewhispererCompletionType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The task type selected by the user in getting started page
    public struct CodewhispererGettingStartedTask
    {
        
        private string _value;
        
        /// autoTrigger
        public static readonly CodewhispererGettingStartedTask AutoTrigger = new CodewhispererGettingStartedTask("autoTrigger");
        
        /// manualTrigger
        public static readonly CodewhispererGettingStartedTask ManualTrigger = new CodewhispererGettingStartedTask("manualTrigger");
        
        /// commentAsPrompt
        public static readonly CodewhispererGettingStartedTask CommentAsPrompt = new CodewhispererGettingStartedTask("commentAsPrompt");
        
        /// unitTest
        public static readonly CodewhispererGettingStartedTask UnitTest = new CodewhispererGettingStartedTask("unitTest");
        
        /// navigation
        public static readonly CodewhispererGettingStartedTask Navigation = new CodewhispererGettingStartedTask("navigation");
        
        public CodewhispererGettingStartedTask(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Programming language of the CodeWhisperer recommendation
    public struct CodewhispererLanguage
    {
        
        private string _value;
        
        /// c
        public static readonly CodewhispererLanguage C = new CodewhispererLanguage("c");
        
        /// cpp
        public static readonly CodewhispererLanguage Cpp = new CodewhispererLanguage("cpp");
        
        /// csharp
        public static readonly CodewhispererLanguage Csharp = new CodewhispererLanguage("csharp");
        
        /// dart
        public static readonly CodewhispererLanguage Dart = new CodewhispererLanguage("dart");
        
        /// go
        public static readonly CodewhispererLanguage Go = new CodewhispererLanguage("go");
        
        /// hcl
        public static readonly CodewhispererLanguage Hcl = new CodewhispererLanguage("hcl");
        
        /// java
        public static readonly CodewhispererLanguage Java = new CodewhispererLanguage("java");
        
        /// javascript
        public static readonly CodewhispererLanguage Javascript = new CodewhispererLanguage("javascript");
        
        /// json
        public static readonly CodewhispererLanguage Json = new CodewhispererLanguage("json");
        
        /// jsonc
        public static readonly CodewhispererLanguage Jsonc = new CodewhispererLanguage("jsonc");
        
        /// jsx
        public static readonly CodewhispererLanguage Jsx = new CodewhispererLanguage("jsx");
        
        /// kotlin
        public static readonly CodewhispererLanguage Kotlin = new CodewhispererLanguage("kotlin");
        
        /// lua
        public static readonly CodewhispererLanguage Lua = new CodewhispererLanguage("lua");
        
        /// php
        public static readonly CodewhispererLanguage Php = new CodewhispererLanguage("php");
        
        /// plaintext
        public static readonly CodewhispererLanguage Plaintext = new CodewhispererLanguage("plaintext");
        
        /// powershell
        public static readonly CodewhispererLanguage Powershell = new CodewhispererLanguage("powershell");
        
        /// python
        public static readonly CodewhispererLanguage Python = new CodewhispererLanguage("python");
        
        /// r
        public static readonly CodewhispererLanguage R = new CodewhispererLanguage("r");
        
        /// ruby
        public static readonly CodewhispererLanguage Ruby = new CodewhispererLanguage("ruby");
        
        /// rust
        public static readonly CodewhispererLanguage Rust = new CodewhispererLanguage("rust");
        
        /// scala
        public static readonly CodewhispererLanguage Scala = new CodewhispererLanguage("scala");
        
        /// shell
        public static readonly CodewhispererLanguage Shell = new CodewhispererLanguage("shell");
        
        /// sql
        public static readonly CodewhispererLanguage Sql = new CodewhispererLanguage("sql");
        
        /// swift
        public static readonly CodewhispererLanguage Swift = new CodewhispererLanguage("swift");
        
        /// systemVerilog
        public static readonly CodewhispererLanguage SystemVerilog = new CodewhispererLanguage("systemVerilog");
        
        /// tf
        public static readonly CodewhispererLanguage Tf = new CodewhispererLanguage("tf");
        
        /// tsx
        public static readonly CodewhispererLanguage Tsx = new CodewhispererLanguage("tsx");
        
        /// typescript
        public static readonly CodewhispererLanguage Typescript = new CodewhispererLanguage("typescript");
        
        /// vue
        public static readonly CodewhispererLanguage Vue = new CodewhispererLanguage("vue");
        
        /// yaml
        public static readonly CodewhispererLanguage Yaml = new CodewhispererLanguage("yaml");
        
        /// yml
        public static readonly CodewhispererLanguage Yml = new CodewhispererLanguage("yml");
        
        public CodewhispererLanguage(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The aggregated user decision from previous trigger. 
    public struct CodewhispererPreviousSuggestionState
    {
        
        private string _value;
        
        /// Accept
        public static readonly CodewhispererPreviousSuggestionState Accept = new CodewhispererPreviousSuggestionState("Accept");
        
        /// Reject
        public static readonly CodewhispererPreviousSuggestionState Reject = new CodewhispererPreviousSuggestionState("Reject");
        
        /// Discard
        public static readonly CodewhispererPreviousSuggestionState Discard = new CodewhispererPreviousSuggestionState("Discard");
        
        /// Empty
        public static readonly CodewhispererPreviousSuggestionState Empty = new CodewhispererPreviousSuggestionState("Empty");
        
        public CodewhispererPreviousSuggestionState(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// the pre-defined set of values for runtime version of the language of CodeWhisperer recommendation
    public struct CodewhispererRuntime
    {
        
        private string _value;
        
        /// java8
        public static readonly CodewhispererRuntime Java8 = new CodewhispererRuntime("java8");
        
        /// java11
        public static readonly CodewhispererRuntime Java11 = new CodewhispererRuntime("java11");
        
        /// java16
        public static readonly CodewhispererRuntime Java16 = new CodewhispererRuntime("java16");
        
        /// python2
        public static readonly CodewhispererRuntime Python2 = new CodewhispererRuntime("python2");
        
        /// python3
        public static readonly CodewhispererRuntime Python3 = new CodewhispererRuntime("python3");
        
        /// javascript
        public static readonly CodewhispererRuntime Javascript = new CodewhispererRuntime("javascript");
        
        /// unknown
        public static readonly CodewhispererRuntime Unknown = new CodewhispererRuntime("unknown");
        
        public CodewhispererRuntime(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// User decision of each of the suggestion returned from CodeWhisperer
    public struct CodewhispererSuggestionState
    {
        
        private string _value;
        
        /// Accept
        public static readonly CodewhispererSuggestionState Accept = new CodewhispererSuggestionState("Accept");
        
        /// Reject
        public static readonly CodewhispererSuggestionState Reject = new CodewhispererSuggestionState("Reject");
        
        /// Discard
        public static readonly CodewhispererSuggestionState Discard = new CodewhispererSuggestionState("Discard");
        
        /// Ignore
        public static readonly CodewhispererSuggestionState Ignore = new CodewhispererSuggestionState("Ignore");
        
        /// Filter
        public static readonly CodewhispererSuggestionState Filter = new CodewhispererSuggestionState("Filter");
        
        /// Unseen
        public static readonly CodewhispererSuggestionState Unseen = new CodewhispererSuggestionState("Unseen");
        
        /// Empty
        public static readonly CodewhispererSuggestionState Empty = new CodewhispererSuggestionState("Empty");
        
        public CodewhispererSuggestionState(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The type of the user trigger to send request to CodeWhisperer service
    public struct CodewhispererTriggerType
    {
        
        private string _value;
        
        /// OnDemand
        public static readonly CodewhispererTriggerType OnDemand = new CodewhispererTriggerType("OnDemand");
        
        /// AutoTrigger
        public static readonly CodewhispererTriggerType AutoTrigger = new CodewhispererTriggerType("AutoTrigger");
        
        public CodewhispererTriggerType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The IDE or OS component used for the action. (Examples: S3 download to filesystem, S3 upload from editor, ...).  See also `featureId` for specific feature names, `module` for low-level modules, and `resourceType`.
    public struct Component
    {
        
        private string _value;
        
        /// editor
        public static readonly Component Editor = new Component("editor");
        
        /// viewer
        public static readonly Component Viewer = new Component("viewer");
        
        /// filesystem
        public static readonly Component Filesystem = new Component("filesystem");
        
        /// explorer
        public static readonly Component Explorer = new Component("explorer");
        
        /// infobar
        public static readonly Component Infobar = new Component("infobar");
        
        /// hover
        public static readonly Component Hover = new Component("hover");
        
        /// webview
        public static readonly Component Webview = new Component("webview");
        
        /// quickfix
        public static readonly Component Quickfix = new Component("quickfix");
        
        /// tree
        public static readonly Component Tree = new Component("tree");
        
        public Component(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The type of modification performed on the credentials
    public struct CredentialModification
    {
        
        private string _value;
        
        /// Add
        public static readonly CredentialModification Add = new CredentialModification("Add");
        
        /// Edit
        public static readonly CredentialModification Edit = new CredentialModification("Edit");
        
        /// Delete
        public static readonly CredentialModification Delete = new CredentialModification("Delete");
        
        public CredentialModification(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Where credentials are stored or retrieved from
    public struct CredentialSourceId
    {
        
        private string _value;
        
        /// sharedCredentials
        public static readonly CredentialSourceId SharedCredentials = new CredentialSourceId("sharedCredentials");
        
        /// sdkStore
        public static readonly CredentialSourceId SdkStore = new CredentialSourceId("sdkStore");
        
        /// ec2
        public static readonly CredentialSourceId Ec2 = new CredentialSourceId("ec2");
        
        /// ecs
        public static readonly CredentialSourceId Ecs = new CredentialSourceId("ecs");
        
        /// envVars
        public static readonly CredentialSourceId EnvVars = new CredentialSourceId("envVars");
        
        /// awsId
        public static readonly CredentialSourceId AwsId = new CredentialSourceId("awsId");
        
        /// iamIdentityCenter
        public static readonly CredentialSourceId IamIdentityCenter = new CredentialSourceId("iamIdentityCenter");
        
        /// memory
        public static readonly CredentialSourceId Memory = new CredentialSourceId("memory");
        
        /// other
        public static readonly CredentialSourceId Other = new CredentialSourceId("other");
        
        public CredentialSourceId(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The type of credential that was selected
    public struct CredentialType
    {
        
        private string _value;
        
        /// staticProfile
        public static readonly CredentialType StaticProfile = new CredentialType("staticProfile");
        
        /// staticSessionProfile
        public static readonly CredentialType StaticSessionProfile = new CredentialType("staticSessionProfile");
        
        /// credentialProcessProfile
        public static readonly CredentialType CredentialProcessProfile = new CredentialType("credentialProcessProfile");
        
        /// assumeRoleProfile
        public static readonly CredentialType AssumeRoleProfile = new CredentialType("assumeRoleProfile");
        
        /// assumeMfaRoleProfile
        public static readonly CredentialType AssumeMfaRoleProfile = new CredentialType("assumeMfaRoleProfile");
        
        /// assumeSamlRoleProfile
        public static readonly CredentialType AssumeSamlRoleProfile = new CredentialType("assumeSamlRoleProfile");
        
        /// ssoProfile
        public static readonly CredentialType SsoProfile = new CredentialType("ssoProfile");
        
        /// ecsMetatdata
        public static readonly CredentialType EcsMetatdata = new CredentialType("ecsMetatdata");
        
        /// ec2Metadata
        public static readonly CredentialType Ec2Metadata = new CredentialType("ec2Metadata");
        
        /// bearerToken
        public static readonly CredentialType BearerToken = new CredentialType("bearerToken");
        
        /// other
        public static readonly CredentialType Other = new CredentialType("other");
        
        public CredentialType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Indicates the specific interaction type with a message in a conversation
    public struct CwsprChatInteractionType
    {
        
        private string _value;
        
        /// acceptDiff
        public static readonly CwsprChatInteractionType AcceptDiff = new CwsprChatInteractionType("acceptDiff");
        
        /// insertAtCursor
        public static readonly CwsprChatInteractionType InsertAtCursor = new CwsprChatInteractionType("insertAtCursor");
        
        /// copySnippet
        public static readonly CwsprChatInteractionType CopySnippet = new CwsprChatInteractionType("copySnippet");
        
        /// copy
        public static readonly CwsprChatInteractionType Copy = new CwsprChatInteractionType("copy");
        
        /// clickLink
        public static readonly CwsprChatInteractionType ClickLink = new CwsprChatInteractionType("clickLink");
        
        /// clickFollowUp
        public static readonly CwsprChatInteractionType ClickFollowUp = new CwsprChatInteractionType("clickFollowUp");
        
        /// hoverReference
        public static readonly CwsprChatInteractionType HoverReference = new CwsprChatInteractionType("hoverReference");
        
        /// upvote
        public static readonly CwsprChatInteractionType Upvote = new CwsprChatInteractionType("upvote");
        
        /// downvote
        public static readonly CwsprChatInteractionType Downvote = new CwsprChatInteractionType("downvote");
        
        /// clickBodyLink
        public static readonly CwsprChatInteractionType ClickBodyLink = new CwsprChatInteractionType("clickBodyLink");
        
        /// viewDiff
        public static readonly CwsprChatInteractionType ViewDiff = new CwsprChatInteractionType("viewDiff");
        
        public CwsprChatInteractionType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Explict user intent associated with a chat message
    public struct CwsprChatUserIntent
    {
        
        private string _value;
        
        /// suggestAlternateImplementation
        public static readonly CwsprChatUserIntent SuggestAlternateImplementation = new CwsprChatUserIntent("suggestAlternateImplementation");
        
        /// applyCommonBestPractices
        public static readonly CwsprChatUserIntent ApplyCommonBestPractices = new CwsprChatUserIntent("applyCommonBestPractices");
        
        /// improveCode
        public static readonly CwsprChatUserIntent ImproveCode = new CwsprChatUserIntent("improveCode");
        
        /// showExample
        public static readonly CwsprChatUserIntent ShowExample = new CwsprChatUserIntent("showExample");
        
        /// citeSources
        public static readonly CwsprChatUserIntent CiteSources = new CwsprChatUserIntent("citeSources");
        
        /// explainLineByLine
        public static readonly CwsprChatUserIntent ExplainLineByLine = new CwsprChatUserIntent("explainLineByLine");
        
        /// explainCodeSelection
        public static readonly CwsprChatUserIntent ExplainCodeSelection = new CwsprChatUserIntent("explainCodeSelection");
        
        /// generateUnitTests
        public static readonly CwsprChatUserIntent GenerateUnitTests = new CwsprChatUserIntent("generateUnitTests");
        
        public CwsprChatUserIntent(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// How the database credentials are being retrieved
    public struct DatabaseCredentials
    {
        
        private string _value;
        
        /// IAM
        public static readonly DatabaseCredentials IAM = new DatabaseCredentials("IAM");
        
        /// SecretsManager
        public static readonly DatabaseCredentials SecretsManager = new DatabaseCredentials("SecretsManager");
        
        public DatabaseCredentials(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Document type of the edited file in IAM Policy Checks
    public struct DocumentType
    {
        
        private string _value;
        
        /// CloudFormation
        public static readonly DocumentType CloudFormation = new DocumentType("CloudFormation");
        
        /// Terraform Plan
        public static readonly DocumentType TerraformPlan = new DocumentType("Terraform Plan");
        
        /// JSON Policy Language
        public static readonly DocumentType JSONPolicyLanguage = new DocumentType("JSON Policy Language");
        
        public DocumentType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The dynamic resource operation being executed
    public struct DynamicResourceOperation
    {
        
        private string _value;
        
        /// Create
        public static readonly DynamicResourceOperation Create = new DynamicResourceOperation("Create");
        
        /// Update
        public static readonly DynamicResourceOperation Update = new DynamicResourceOperation("Update");
        
        /// Delete
        public static readonly DynamicResourceOperation Delete = new DynamicResourceOperation("Delete");
        
        public DynamicResourceOperation(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The type of fetch being performed
    public struct DynamoDbFetchType
    {
        
        private string _value;
        
        /// scan
        public static readonly DynamoDbFetchType Scan = new DynamoDbFetchType("scan");
        
        /// query
        public static readonly DynamoDbFetchType Query = new DynamoDbFetchType("query");
        
        public DynamoDbFetchType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The type of index being hit for the query/scan operation
    public struct DynamoDbIndexType
    {
        
        private string _value;
        
        /// primary
        public static readonly DynamoDbIndexType Primary = new DynamoDbIndexType("primary");
        
        /// localSecondary
        public static readonly DynamoDbIndexType LocalSecondary = new DynamoDbIndexType("localSecondary");
        
        /// globalSecondary
        public static readonly DynamoDbIndexType GlobalSecondary = new DynamoDbIndexType("globalSecondary");
        
        public DynamoDbIndexType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The type of DynamoDB entity referenced by a metric or operation
    public struct DynamoDbTarget
    {
        
        private string _value;
        
        /// table
        public static readonly DynamoDbTarget Table = new DynamoDbTarget("table");
        
        /// tableProperties
        public static readonly DynamoDbTarget TableProperties = new DynamoDbTarget("tableProperties");
        
        /// tableStream
        public static readonly DynamoDbTarget TableStream = new DynamoDbTarget("tableStream");
        
        public DynamoDbTarget(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Ways to connect to an EC2 Instance
    public struct Ec2ConnectionType
    {
        
        private string _value;
        
        /// remoteDesktop
        public static readonly Ec2ConnectionType RemoteDesktop = new Ec2ConnectionType("remoteDesktop");
        
        /// ssh
        public static readonly Ec2ConnectionType Ssh = new Ec2ConnectionType("ssh");
        
        /// scp
        public static readonly Ec2ConnectionType Scp = new Ec2ConnectionType("scp");
        
        /// ssm
        public static readonly Ec2ConnectionType Ssm = new Ec2ConnectionType("ssm");
        
        /// remoteWorkspace
        public static readonly Ec2ConnectionType RemoteWorkspace = new Ec2ConnectionType("remoteWorkspace");
        
        public Ec2ConnectionType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Actions that can affect an EC2 Instance state
    public struct Ec2InstanceState
    {
        
        private string _value;
        
        /// start
        public static readonly Ec2InstanceState Start = new Ec2InstanceState("start");
        
        /// stop
        public static readonly Ec2InstanceState Stop = new Ec2InstanceState("stop");
        
        /// reboot
        public static readonly Ec2InstanceState Reboot = new Ec2InstanceState("reboot");
        
        /// terminate
        public static readonly Ec2InstanceState Terminate = new Ec2InstanceState("terminate");
        
        public Ec2InstanceState(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The source content specified in the ECR deployment request
    public struct EcrDeploySource
    {
        
        private string _value;
        
        /// dockerfile
        public static readonly EcrDeploySource Dockerfile = new EcrDeploySource("dockerfile");
        
        /// tag
        public static readonly EcrDeploySource Tag = new EcrDeploySource("tag");
        
        public EcrDeploySource(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Type of execution selected while running the execute command
    public struct EcsExecuteCommandType
    {
        
        private string _value;
        
        /// command
        public static readonly EcsExecuteCommandType Command = new EcsExecuteCommandType("command");
        
        /// shell
        public static readonly EcsExecuteCommandType Shell = new EcsExecuteCommandType("shell");
        
        public EcsExecuteCommandType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Infrastructure type used by ECS tasks and services
    public struct EcsLaunchType
    {
        
        private string _value;
        
        /// ec2
        public static readonly EcsLaunchType Ec2 = new EcsLaunchType("ec2");
        
        /// fargate
        public static readonly EcsLaunchType Fargate = new EcsLaunchType("fargate");
        
        public EcsLaunchType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The experiment action taken action taken
    public struct ExperimentState
    {
        
        private string _value;
        
        /// activated
        public static readonly ExperimentState Activated = new ExperimentState("activated");
        
        /// deactivated
        public static readonly ExperimentState Deactivated = new ExperimentState("deactivated");
        
        public ExperimentState(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The id of the feature the user is interacting in. See also: `component`, `featureId`, `module`, `resourceType`.
    public struct FeatureId
    {
        
        private string _value;
        
        /// amazonQ
        public static readonly FeatureId AmazonQ = new FeatureId("amazonQ");
        
        /// awsExplorer
        public static readonly FeatureId AwsExplorer = new FeatureId("awsExplorer");
        
        /// awsToolkit
        public static readonly FeatureId AwsToolkit = new FeatureId("awsToolkit");
        
        /// codewhisperer
        public static readonly FeatureId Codewhisperer = new FeatureId("codewhisperer");
        
        /// codecatalyst
        public static readonly FeatureId Codecatalyst = new FeatureId("codecatalyst");
        
        public FeatureId(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Type of filter applied
    public struct FilterType
    {
        
        private string _value;
        
        /// all
        public static readonly FilterType All = new FilterType("all");
        
        /// prefix
        public static readonly FilterType Prefix = new FilterType("prefix");
        
        /// specific
        public static readonly FilterType Specific = new FilterType("specific");
        
        public FilterType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Type of generation failure
    public struct GenerateFailure
    {
        
        private string _value;
        
        /// Parse
        public static readonly GenerateFailure Parse = new GenerateFailure("Parse");
        
        public GenerateFailure(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The type of IAM resource referenced by a metric or operation
    public struct IamResourceType
    {
        
        private string _value;
        
        /// group
        public static readonly IamResourceType Group = new IamResourceType("group");
        
        /// role
        public static readonly IamResourceType Role = new IamResourceType("role");
        
        /// user
        public static readonly IamResourceType User = new IamResourceType("user");
        
        public IamResourceType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// User inputted policy type of the edited file. Applicable to only JSON Policy Language.
    public struct InputPolicyType
    {
        
        private string _value;
        
        /// Identity
        public static readonly InputPolicyType Identity = new InputPolicyType("Identity");
        
        /// Resource
        public static readonly InputPolicyType Resource = new InputPolicyType("Resource");
        
        /// None
        public static readonly InputPolicyType None = new InputPolicyType("None");
        
        public InputPolicyType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Dialog open trigger source location
    public struct InsightsDialogOpenSource
    {
        
        private string _value;
        
        /// explorer
        public static readonly InsightsDialogOpenSource Explorer = new InsightsDialogOpenSource("explorer");
        
        /// resultsWindow
        public static readonly InsightsDialogOpenSource ResultsWindow = new InsightsDialogOpenSource("resultsWindow");
        
        /// logGroup
        public static readonly InsightsDialogOpenSource LogGroup = new InsightsDialogOpenSource("logGroup");
        
        public InsightsDialogOpenSource(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// User-specified search string type while starting an insights query
    public struct InsightsQueryStringType
    {
        
        private string _value;
        
        /// insights
        public static readonly InsightsQueryStringType Insights = new InsightsQueryStringType("insights");
        
        /// searchTerm
        public static readonly InsightsQueryStringType SearchTerm = new InsightsQueryStringType("searchTerm");
        
        public InsightsQueryStringType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// User-selected time range type while starting an insights query
    public struct InsightsQueryTimeType
    {
        
        private string _value;
        
        /// relative
        public static readonly InsightsQueryTimeType Relative = new InsightsQueryTimeType("relative");
        
        /// absolute
        public static readonly InsightsQueryTimeType Absolute = new InsightsQueryTimeType("absolute");
        
        public InsightsQueryTimeType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Lambda architecture identifier
    public struct LambdaArchitecture
    {
        
        private string _value;
        
        /// x86_64
        public static readonly LambdaArchitecture X8664 = new LambdaArchitecture("x86_64");
        
        /// arm64
        public static readonly LambdaArchitecture Arm64 = new LambdaArchitecture("arm64");
        
        public LambdaArchitecture(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The Lambda Package type of the function
    public struct LambdaPackageType
    {
        
        private string _value;
        
        /// Zip
        public static readonly LambdaPackageType Zip = new LambdaPackageType("Zip");
        
        /// Image
        public static readonly LambdaPackageType Image = new LambdaPackageType("Image");
        
        public LambdaPackageType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// User-provided policy type of the reference file. Applicable to only CheckNoNewAccess check type.
    public struct ReferencePolicyType
    {
        
        private string _value;
        
        /// Identity
        public static readonly ReferencePolicyType Identity = new ReferencePolicyType("Identity");
        
        /// Resource
        public static readonly ReferencePolicyType Resource = new ReferencePolicyType("Resource");
        
        /// None
        public static readonly ReferencePolicyType None = new ReferencePolicyType("None");
        
        public ReferencePolicyType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The result of the operation
    public struct Result
    {
        
        private string _value;
        
        /// Succeeded
        public static readonly Result Succeeded = new Result("Succeeded");
        
        /// Failed
        public static readonly Result Failed = new Result("Failed");
        
        /// Cancelled
        public static readonly Result Cancelled = new Result("Cancelled");
        
        public Result(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The lambda runtime
    public struct Runtime
    {
        
        private string _value;
        
        /// dotnetcore3.1
        public static readonly Runtime Dotnetcore31 = new Runtime("dotnetcore3.1");
        
        /// dotnetcore2.1
        public static readonly Runtime Dotnetcore21 = new Runtime("dotnetcore2.1");
        
        /// dotnet5.0
        public static readonly Runtime Dotnet50 = new Runtime("dotnet5.0");
        
        /// dotnet6
        public static readonly Runtime Dotnet6 = new Runtime("dotnet6");
        
        /// dotnet7
        public static readonly Runtime Dotnet7 = new Runtime("dotnet7");
        
        /// dotnet8
        public static readonly Runtime Dotnet8 = new Runtime("dotnet8");
        
        /// nodejs20.x
        public static readonly Runtime Nodejs20x = new Runtime("nodejs20.x");
        
        /// nodejs18.x
        public static readonly Runtime Nodejs18x = new Runtime("nodejs18.x");
        
        /// nodejs16.x
        public static readonly Runtime Nodejs16x = new Runtime("nodejs16.x");
        
        /// nodejs14.x
        public static readonly Runtime Nodejs14x = new Runtime("nodejs14.x");
        
        /// nodejs12.x
        public static readonly Runtime Nodejs12x = new Runtime("nodejs12.x");
        
        /// nodejs10.x
        public static readonly Runtime Nodejs10x = new Runtime("nodejs10.x");
        
        /// nodejs8.10
        public static readonly Runtime Nodejs810 = new Runtime("nodejs8.10");
        
        /// ruby2.5
        public static readonly Runtime Ruby25 = new Runtime("ruby2.5");
        
        /// java8
        public static readonly Runtime Java8 = new Runtime("java8");
        
        /// java8.al2
        public static readonly Runtime Java8al2 = new Runtime("java8.al2");
        
        /// java11
        public static readonly Runtime Java11 = new Runtime("java11");
        
        /// java17
        public static readonly Runtime Java17 = new Runtime("java17");
        
        /// java21
        public static readonly Runtime Java21 = new Runtime("java21");
        
        /// go1.x
        public static readonly Runtime Go1x = new Runtime("go1.x");
        
        /// python3.12
        public static readonly Runtime Python312 = new Runtime("python3.12");
        
        /// python3.11
        public static readonly Runtime Python311 = new Runtime("python3.11");
        
        /// python3.10
        public static readonly Runtime Python310 = new Runtime("python3.10");
        
        /// python3.9
        public static readonly Runtime Python39 = new Runtime("python3.9");
        
        /// python3.8
        public static readonly Runtime Python38 = new Runtime("python3.8");
        
        /// python3.7
        public static readonly Runtime Python37 = new Runtime("python3.7");
        
        /// python3.6
        public static readonly Runtime Python36 = new Runtime("python3.6");
        
        /// python2.7
        public static readonly Runtime Python27 = new Runtime("python2.7");
        
        public Runtime(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Type of save executed
    public struct SaveType
    {
        
        private string _value;
        
        /// MANUAL_SAVE
        public static readonly SaveType MANUALSAVE = new SaveType("MANUAL_SAVE");
        
        /// AUTO_SAVE
        public static readonly SaveType AUTOSAVE = new SaveType("AUTO_SAVE");
        
        /// AUTO_SYNC
        public static readonly SaveType AUTOSYNC = new SaveType("AUTO_SYNC");
        
        public SaveType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Languages targeted by the schemas service
    public struct SchemaLanguage
    {
        
        private string _value;
        
        /// Java8
        public static readonly SchemaLanguage Java8 = new SchemaLanguage("Java8");
        
        /// Python36
        public static readonly SchemaLanguage Python36 = new SchemaLanguage("Python36");
        
        /// TypeScript3
        public static readonly SchemaLanguage TypeScript3 = new SchemaLanguage("TypeScript3");
        
        public SchemaLanguage(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The type of an SQS Queue
    public struct SqsQueueType
    {
        
        private string _value;
        
        /// standard
        public static readonly SqsQueueType Standard = new SqsQueueType("standard");
        
        /// fifo
        public static readonly SqsQueueType Fifo = new SqsQueueType("fifo");
        
        public SqsQueueType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Describes which parts of an application (that we know of) were synced to the cloud. "Code" resources follow the SAM spec: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-sync.html
    public struct SyncedResources
    {
        
        private string _value;
        
        /// AllResources
        public static readonly SyncedResources AllResources = new SyncedResources("AllResources");
        
        /// CodeOnly
        public static readonly SyncedResources CodeOnly = new SyncedResources("CodeOnly");
        
        public SyncedResources(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The tool being installed
    public struct ToolId
    {
        
        private string _value;
        
        /// session-manager-plugin
        public static readonly ToolId Sessionmanagerplugin = new ToolId("session-manager-plugin");
        
        /// dotnet-lambda-deploy
        public static readonly ToolId Dotnetlambdadeploy = new ToolId("dotnet-lambda-deploy");
        
        /// dotnet-deploy-cli
        public static readonly ToolId Dotnetdeploycli = new ToolId("dotnet-deploy-cli");
        
        /// aws-cli
        public static readonly ToolId Awscli = new ToolId("aws-cli");
        
        /// sam-cli
        public static readonly ToolId Samcli = new ToolId("sam-cli");
        
        /// docker
        public static readonly ToolId Docker = new ToolId("docker");
        
        public ToolId(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Execution of Custom Policy Checks in IAM Policy Checks
    public sealed class AccessanalyzerIamPolicyChecksCustomChecks : BaseTelemetryEvent
    {
        
        /// Boolean value of whether or not a Cfn parameter file is provided.
        public bool CfnParameterFileUsed;
        
        /// User inputted check type to denote which custom check to run.
        public CheckType CheckType;
        
        /// Document type of the edited file in IAM Policy Checks
        public DocumentType DocumentType;
        
        /// Number of findings discovered after executing IAM Policy Checks
        public int FindingsCount;
        
        /// User inputted policy type of the edited file. Applicable to only JSON Policy Language.
        public InputPolicyType InputPolicyType;
        
        /// User-provided policy type of the reference file. Applicable to only CheckNoNewAccess check type.
        public ReferencePolicyType ReferencePolicyType;
        
        /// The result of the operation
        public Result Result;
        
        public AccessanalyzerIamPolicyChecksCustomChecks()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Execution of Validate Policy in IAM Policy Checks
    public sealed class AccessanalyzerIamPolicyChecksValidatePolicy : BaseTelemetryEvent
    {
        
        /// Boolean value of whether or not a Cfn parameter file is provided.
        public bool CfnParameterFileUsed;
        
        /// Document type of the edited file in IAM Policy Checks
        public DocumentType DocumentType;
        
        /// Number of findings discovered after executing IAM Policy Checks
        public int FindingsCount;
        
        /// User inputted policy type of the edited file. Applicable to only JSON Policy Language.
        public InputPolicyType InputPolicyType;
        
        /// The result of the operation
        public Result Result;
        
        public AccessanalyzerIamPolicyChecksValidatePolicy()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Captures Approach generation process
    public sealed class AmazonqApproachInvoke : BaseTelemetryEvent
    {
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Order of approach iteration. For initial code changes it is 0
        public double AmazonqGenerateApproachIteration;
        
        /// The time it takes to generate approach response
        public double AmazonqGenerateApproachLatency;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// Optional - The result of the operation
        public Result? Result;
        
        public AmazonqApproachInvoke()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User clicked on the thumbs down button to say that they are unsatisfied
    public sealed class AmazonqApproachThumbsDown : BaseTelemetryEvent
    {
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        public AmazonqApproachThumbsDown()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User clicked on the thumbs up button, to mention that they are satisfied
    public sealed class AmazonqApproachThumbsUp : BaseTelemetryEvent
    {
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        public AmazonqApproachThumbsUp()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// File extension was ignored 'count' many times during bundling process
    public sealed class AmazonqBundleExtensionIgnored : BaseTelemetryEvent
    {
        
        /// Number of occurrences a metric, or some other metric-defined count.
        public int Count;
        
        /// Filename extension (examples: .txt, .yml, .yaml, .asl.yaml, ...), or empty string if the filename does not contain dot (.) between two chars.
        public string FilenameExt;
        
        public AmazonqBundleExtensionIgnored()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Captures Code Generation generation process
    public sealed class AmazonqCodeGenerationInvoke : BaseTelemetryEvent
    {
        
        /// Captures if code generation result is Complete, Failed, etc.
        public string AmazonqCodeGenerationResult;
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Order of code generation iteration. For initial code changes it is 0
        public double AmazonqGenerateCodeIteration;
        
        /// The time it takes to generate code generation response
        public double AmazonqGenerateCodeResponseLatency;
        
        /// Optional - Captures the number of files generated as a part of code generation iteration
        public System.Double? AmazonqNumberOfFilesGenerated;
        
        /// Optional - Captures the number of references
        public System.Double? AmazonqNumberOfReferences;
        
        /// Captures the size of the source code
        public double AmazonqRepositorySize;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// Optional - The result of the operation
        public Result? Result;
        
        public AmazonqCodeGenerationInvoke()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User clicked on the thumbs down button to say that they are unsatisfied
    public sealed class AmazonqCodeGenerationThumbsDown : BaseTelemetryEvent
    {
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        public AmazonqCodeGenerationThumbsDown()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User clicked on the thumbs up button to say that they are unsatisfied
    public sealed class AmazonqCodeGenerationThumbsUp : BaseTelemetryEvent
    {
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        public AmazonqCodeGenerationThumbsUp()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Captures createUploadUrl invocation process
    public sealed class AmazonqCreateUpload : BaseTelemetryEvent
    {
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Optional - Captures the size of the source code
        public System.Double? AmazonqRepositorySize;
        
        /// Optional - The intent of the upload
        public AmazonqUploadIntent? AmazonqUploadIntent;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// Optional - The result of the operation
        public Result? Result;
        
        public AmazonqCreateUpload()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Captures end of the conversation with amazonq /dev
    public sealed class AmazonqEndChat : BaseTelemetryEvent
    {
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Optional - Total time from start to end
        public System.Double? AmazonqEndOfTheConversationLatency;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        public AmazonqEndChat()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// When a user interacts with a message in the conversation
    public sealed class AmazonqInteractWithMessage : BaseTelemetryEvent
    {
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// Optional - Count of code characters copied to the editor
        public System.Int32? CwsprChatAcceptedCharactersLength;
        
        /// Optional - Count of lines of code copied to the editor
        public System.Int32? CwsprChatAcceptedNumberOfLines;
        
        /// Optional - Index of the code block inside a message in the conversation.
        public System.Int32? CwsprChatCodeBlockIndex;
        
        /// Uniquely identifies a message with which the user interacts.
        public string CwsprChatConversationId;
        
        /// Optional - true if query has project level context, false otherwise.
        public System.Boolean? CwsprChatHasProjectContext;
        
        /// Optional - True if the code snippet that user interacts with has a reference.
        public System.Boolean? CwsprChatHasReference;
        
        /// Optional - Identifies the entity within the message that user interacts with.
        public string CwsprChatInteractionTarget;
        
        /// Indicates the specific interaction type with a message in a conversation
        public CwsprChatInteractionType CwsprChatInteractionType;
        
        /// Unique identifier for each message in an conversation
        public string CwsprChatMessageId;
        
        /// Optional - Programming language associated with the message
        public string CwsprChatProgrammingLanguage;
        
        /// Optional - Total number of code blocks inside a message in the conversation.
        public System.Int32? CwsprChatTotalCodeBlocks;
        
        /// Optional - Explict user intent associated with a chat message
        public CwsprChatUserIntent? CwsprChatUserIntent;
        
        public AmazonqInteractWithMessage()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User applied code changes generated for the task.
    public sealed class AmazonqIsAcceptedCodeChanges : BaseTelemetryEvent
    {
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Captures the number of accepted files as a part of code generation iteration
        public double AmazonqNumberOfFilesAccepted;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        public AmazonqIsAcceptedCodeChanges()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User has accepted the approach generated
    public sealed class AmazonqIsApproachAccepted : BaseTelemetryEvent
    {
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        public AmazonqIsApproachAccepted()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User asked to regenerate code generation with a comment
    public sealed class AmazonqIsProvideFeedbackForCodeGen : BaseTelemetryEvent
    {
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        public AmazonqIsProvideFeedbackForCodeGen()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User reviewed changes
    public sealed class AmazonqIsReviewedChanges : BaseTelemetryEvent
    {
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        public AmazonqIsReviewedChanges()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// User modified source folder
    public sealed class AmazonqModifySourceFolder : BaseTelemetryEvent
    {
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// Optional - The result of the operation
        public Result? Result;
        
        public AmazonqModifySourceFolder()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Captures startConversation invocation process
    public sealed class AmazonqStartConversationInvoke : BaseTelemetryEvent
    {
        
        /// Optional - Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// Optional - The result of the operation
        public Result? Result;
        
        public AmazonqStartConversationInvoke()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Client side invocation of the AmazonQ Unit Test Generation
    public sealed class AmazonqUtgGenerateTests : BaseTelemetryEvent
    {
        
        /// Optional - The number of accepted characters
        public System.Int32? AcceptedCharactersCount;
        
        /// Optional - The number of accepted cases
        public System.Int32? AcceptedCount;
        
        /// Optional - The number of accepted lines of code
        public System.Int32? AcceptedLinesCount;
        
        /// Optional - Time taken to fetch the upload URL and upload the artifacts in milliseconds
        public System.Int32? ArtifactsUploadDuration;
        
        /// Optional - The uncompressed payload size in bytes of the source files in customer project context
        public System.Int32? BuildPayloadBytes;
        
        /// Optional - The compressed payload size of source files in bytes of customer project context sent
        public System.Int32? BuildZipFileBytes;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// Programming language associated with the message
        public string CwsprChatProgrammingLanguage;
        
        /// Optional - Number of characters of code generated
        public System.Int32? GeneratedCharactersCount;
        
        /// Optional - The number of generated cases
        public System.Int32? GeneratedCount;
        
        /// Optional - The number of generated lines of code
        public System.Int32? GeneratedLinesCount;
        
        /// True if user supplied prompt message as input else false
        public bool HasUserPromptSupplied;
        
        /// Optional - True if user selected code snippet as input else false
        public System.Boolean? IsCodeBlockSelected;
        
        /// Indicate if the file is in the current workspace.
        public bool IsFileInWorkspace;
        
        /// Indicate if the language is supported
        public bool IsSupportedLanguage;
        
        /// Optional - Job group name used in the operation
        public string JobGroup;
        
        /// Optional - Job id used in the operation
        public string JobId;
        
        /// Optional - The time duration in milliseconds to process an action on the client side
        public System.Double? PerfClientLatency;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The source of the operation
        public string Source;
        
        public AmazonqUtgGenerateTests()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Captures if Q chat panel is successfully viewed or not
    public sealed class AmazonqViewChatPanel : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public AmazonqViewChatPanel()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Copying an API Gateway remote URL
    public sealed class ApigatewayCopyUrl : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public ApigatewayCopyUrl()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Invoking one simulated API Gateway call using the SAM cli
    public sealed class ApigatewayInvokeLocal : BaseTelemetryEvent
    {
        
        /// If the action was run in debug mode or not
        public bool Debug;
        
        /// Optional - Any valid HTTP method (GET/HEAD/etc)
        public string HttpMethod;
        
        /// Optional - Lambda architecture identifier
        public LambdaArchitecture? LambdaArchitecture;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        /// Optional - The source of the operation
        public string Source;
        
        public ApigatewayInvokeLocal()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Calling a remote API Gateway
    public sealed class ApigatewayInvokeRemote : BaseTelemetryEvent
    {
        
        /// Optional - Any valid HTTP method (GET/HEAD/etc)
        public string HttpMethod;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The source of the operation
        public string Source;
        
        public ApigatewayInvokeRemote()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when starting a local API Gateway server simulator with SAM. Only called when starting it for long running testing, not for single invokes
    public sealed class ApigatewayStartLocalServer : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public ApigatewayStartLocalServer()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Click Install button in Getting Started Walkthrough
    public sealed class AppBuilderInstallTool : BaseTelemetryEvent
    {
        
        /// Optional - The source of the operation
        public string Source;
        
        /// Optional - The tool being installed
        public ToolId? ToolId;
        
        public AppBuilderInstallTool()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Click open Local invoke WebView button in Application Builder
    public sealed class AppBuilderOpenLocalInvokeWebView : BaseTelemetryEvent
    {
        
        /// Optional - The source of the operation
        public string Source;
        
        public AppBuilderOpenLocalInvokeWebView()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Click open Remote invoke WebView button in Application Builder
    public sealed class AppBuilderOpenRemoteInvokeWebView : BaseTelemetryEvent
    {
        
        /// Optional - The source of the operation
        public string Source;
        
        public AppBuilderOpenRemoteInvokeWebView()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Click open template button in Application Builder
    public sealed class AppBuilderOpenTemplate : BaseTelemetryEvent
    {
        
        /// Optional - The source of the operation
        public string Source;
        
        public AppBuilderOpenTemplate()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Select a template and create project in Getting Started Walkthrough
    public sealed class AppBuilderSelectWalkthroughTemplate : BaseTelemetryEvent
    {
        
        /// Optional - Name of an action that was taken, displayed, etc. See also `userChoice`.
        public string Action;
        
        /// Optional - The source of the operation
        public string Source;
        
        public AppBuilderSelectWalkthroughTemplate()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open Getting Started Walkthrough
    public sealed class AppBuilderStartWalkthrough : BaseTelemetryEvent
    {
        
        /// Optional - The source of the operation
        public string Source;
        
        public AppBuilderStartWalkthrough()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when two resources are connected
    public sealed class AppcomposerAddConnection : BaseTelemetryEvent
    {
        
        /// Resource subtype of connection end
        public string DestFacetType;
        
        /// CloudFormation resource type of connection end
        public string DestResourceType;
        
        /// Resource subtype of connection start
        public string SourceFacetType;
        
        /// CloudFormation resource type of connection start
        public string SourceResourceType;
        
        public AppcomposerAddConnection()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when a resource is added to the canvas
    public sealed class AppcomposerAddResource : BaseTelemetryEvent
    {
        
        /// The dynamic resource type being interacted with. See also `component` for UI components, `featureId` for specific feature names, or `module` for low-level modules.
        public string ResourceType;
        
        public AppcomposerAddResource()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when Step Functions Workflow Studio is closed
    public sealed class AppcomposerCloseWfs : BaseTelemetryEvent
    {
        
        /// Whether the user saved
        public bool DidSave;
        
        public AppcomposerCloseWfs()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after a customer loads into Composeer
    public sealed class AppcomposerCustomerReady : BaseTelemetryEvent
    {
        
        /// Time from starting the feature until ready-to-use.
        public int InitializeTime;
        
        /// Time from opening Composer to loading the file
        public int LoadFileTime;
        
        /// Time from opening the feature until file saved.
        public int SaveFileTime;
        
        public AppcomposerCustomerReady()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after clicking the Sync button
    public sealed class AppcomposerDeployClicked : BaseTelemetryEvent
    {
        
        public AppcomposerDeployClicked()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after a Composer-triggered SAM Sync completes
    public sealed class AppcomposerDeployCompleted : BaseTelemetryEvent
    {
        
        public AppcomposerDeployCompleted()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called regularly to record app performance
    public sealed class AppcomposerFps : BaseTelemetryEvent
    {
        
        /// Average frames per second
        public int Fps;
        
        public AppcomposerFps()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after accepting a generative AI suggestion
    public sealed class AppcomposerGenerateAccepted : BaseTelemetryEvent
    {
        
        /// Number of generations before the user accepted or rejected
        public int NumAttempts;
        
        /// The dynamic resource type being interacted with. See also `component` for UI components, `featureId` for specific feature names, or `module` for low-level modules.
        public string ResourceType;
        
        public AppcomposerGenerateAccepted()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after generating a standard resource template partial
    public sealed class AppcomposerGenerateClicked : BaseTelemetryEvent
    {
        
        /// The dynamic resource type being interacted with. See also `component` for UI components, `featureId` for specific feature names, or `module` for low-level modules.
        public string ResourceType;
        
        public AppcomposerGenerateClicked()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after rejecting a generative AI suggestion
    public sealed class AppcomposerGenerateRejected : BaseTelemetryEvent
    {
        
        /// Number of generations before the user accepted or rejected
        public int NumAttempts;
        
        /// The dynamic resource type being interacted with. See also `component` for UI components, `featureId` for specific feature names, or `module` for low-level modules.
        public string ResourceType;
        
        public AppcomposerGenerateRejected()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when a project successfully loads
    public sealed class AppcomposerInitializeProject : BaseTelemetryEvent
    {
        
        /// Per-resource count of each resource in a container
        public string ResourceCounts;
        
        /// Total count of all resources in a container
        public int TotalResourceCount;
        
        public AppcomposerInitializeProject()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after a generate failed
    public sealed class AppcomposerInvalidGeneration : BaseTelemetryEvent
    {
        
        /// Type of generation failure
        public GenerateFailure GenerateFailure;
        
        /// The dynamic resource type being interacted with. See also `component` for UI components, `featureId` for specific feature names, or `module` for low-level modules.
        public string ResourceType;
        
        public AppcomposerInvalidGeneration()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after opening a template
    public sealed class AppcomposerOpenTemplate : BaseTelemetryEvent
    {
        
        /// Whether the user has access to CodeWhisperer Chat
        public bool HasChatAuth;
        
        /// Optional - The source of the operation
        public string Source;
        
        public AppcomposerOpenTemplate()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when Step Functions Workflow Studio is opened
    public sealed class AppcomposerOpenWfs : BaseTelemetryEvent
    {
        
        public AppcomposerOpenWfs()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after a generate is processed
    public sealed class AppcomposerPostProcess : BaseTelemetryEvent
    {
        
        /// Number of generation paths modified
        public int PathsScrubbed;
        
        /// The dynamic resource type being interacted with. See also `component` for UI components, `featureId` for specific feature names, or `module` for low-level modules.
        public string ResourceType;
        
        public AppcomposerPostProcess()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after regenerating a standard resource template partial
    public sealed class AppcomposerRegenerateClicked : BaseTelemetryEvent
    {
        
        /// The dynamic resource type being interacted with. See also `component` for UI components, `featureId` for specific feature names, or `module` for low-level modules.
        public string ResourceType;
        
        public AppcomposerRegenerateClicked()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Copy the service URL
    public sealed class ApprunnerCopyServiceUrl : BaseTelemetryEvent
    {
        
        public ApprunnerCopyServiceUrl()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create an App Runner service
    public sealed class ApprunnerCreateService : BaseTelemetryEvent
    {
        
        /// The source artifact of an App Runner service
        public AppRunnerServiceSource AppRunnerServiceSource;
        
        /// The result of the operation
        public Result Result;
        
        public ApprunnerCreateService()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete an App Runner service
    public sealed class ApprunnerDeleteService : BaseTelemetryEvent
    {
        
        /// Optional - The current state of the App Runner service
        public AppRunnerServiceStatus? AppRunnerServiceStatus;
        
        /// The result of the operation
        public Result Result;
        
        public ApprunnerDeleteService()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open the service URL in a browser
    public sealed class ApprunnerOpenServiceUrl : BaseTelemetryEvent
    {
        
        public ApprunnerOpenServiceUrl()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Pause a running App Runner service
    public sealed class ApprunnerPauseService : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public ApprunnerPauseService()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Resume a paused App Runner service
    public sealed class ApprunnerResumeService : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public ApprunnerResumeService()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Start a new deployment for an App Runner service
    public sealed class ApprunnerStartDeployment : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public ApprunnerStartDeployment()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// View the App Runner application logs (the logs for your running service)
    public sealed class ApprunnerViewApplicationLogs : BaseTelemetryEvent
    {
        
        public ApprunnerViewApplicationLogs()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// View the App Runner service logs (the logs produced by App Runner)
    public sealed class ApprunnerViewServiceLogs : BaseTelemetryEvent
    {
        
        public ApprunnerViewServiceLogs()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// New connection was added in the 'Add New Connection' workflow.
    public sealed class AuthAddConnection : BaseTelemetryEvent
    {
        
        /// Optional - A generic number of attempts
        public System.Int32? Attempts;
        
        /// Optional - Comma delimited list of enabled features for the authenticated user
        public string AuthEnabledFeatures;
        
        /// Optional - Comma-delimited list of scopes that users has
        public string AuthScopes;
        
        /// Where credentials are stored or retrieved from
        public CredentialSourceId CredentialSourceId;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// The id of the feature the user is interacting in. See also: `component`, `featureId`, `module`, `resourceType`.
        public FeatureId FeatureId;
        
        /// Optional - Comma delimited list of input fields that user has invalid inputs typed. e.g. 'profileName,accessKey,startUrl'
        public string InvalidInputFields;
        
        /// Whether this was an individual point or an aggregation of points.
        public bool IsAggregated;
        
        /// If this was performed as part of the reauthentication flow.
        public bool IsReAuth;
        
        /// The result of the operation
        public Result Result;
        
        /// The source of the operation
        public string Source;
        
        /// Optional - The client ID of an SSO registration.
        public string SsoRegistrationClientId;
        
        /// Optional - Date/time that an SSO client registration expires.
        public string SsoRegistrationExpiresAt;
        
        public AuthAddConnection()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// The diff/change in Auth connections
    public sealed class AuthAddedConnections : BaseTelemetryEvent
    {
        
        /// A generic number of attempts
        public int Attempts;
        
        /// Current number of authentication connections the user has
        public int AuthConnectionsCount;
        
        /// Comma delimited list of enabled auth connections
        public string EnabledAuthConnections;
        
        /// Number of new authentication connections the user has
        public int NewAuthConnectionsCount;
        
        /// Comma delimited list of NEW enabled auth connections
        public string NewEnabledAuthConnections;
        
        /// The result of the operation
        public Result Result;
        
        /// The source of the operation
        public string Source;
        
        public AuthAddedConnections()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// When the Amazon Q sign in page is closed.
    public sealed class AuthSignInPageClosed : BaseTelemetryEvent
    {
        
        public AuthSignInPageClosed()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// When the Amazon Q sign in page is opened and focused.
    public sealed class AuthSignInPageOpened : BaseTelemetryEvent
    {
        
        public AuthSignInPageOpened()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when user clicks yes or no to switch role upon adding new connection
    public sealed class AuthSwitchRoles : BaseTelemetryEvent
    {
        
        /// Current number of authentication connections the user has
        public int AuthConnectionsCount;
        
        /// User selection from a predefined menu (not user-provided input). See also `action`.
        public string UserChoice;
        
        public AuthSwitchRoles()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// The state of the user's authentication upon startup.
    public sealed class AuthUserState : BaseTelemetryEvent
    {
        
        /// Comma-delimited list of enabled auths.
        public string AuthEnabledConnections;
        
        /// Optional - Comma-delimited list of scopes that users has
        public string AuthScopes;
        
        /// Status of the an auth connection.
        public AuthStatus AuthStatus;
        
        /// Optional - Where credentials are stored or retrieved from
        public CredentialSourceId? CredentialSourceId;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// Optional - The type of credential that was selected
        public CredentialType? CredentialType;
        
        /// Optional - The id of the feature the user is interacting in. See also: `component`, `featureId`, `module`, `resourceType`.
        public FeatureId? FeatureId;
        
        /// The source of the operation
        public string Source;
        
        /// Optional - The client ID of an SSO registration.
        public string SsoRegistrationClientId;
        
        /// Optional - Date/time that an SSO client registration expires.
        public string SsoRegistrationExpiresAt;
        
        public AuthUserState()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Copy the ARN of an AWS resource
    public sealed class AwsCopyArn : BaseTelemetryEvent
    {
        
        /// The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        public AwsCopyArn()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create a new credentials file
    public sealed class AwsCreateCredentials : BaseTelemetryEvent
    {
        
        public AwsCreateCredentials()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete an AWS resource
    public sealed class AwsDeleteResource : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        public AwsDeleteResource()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Expand a service root node in the AWS explorer window
    public sealed class AwsExpandExplorerNode : BaseTelemetryEvent
    {
        
        /// The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        public AwsExpandExplorerNode()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// An experiment was activated or deactivated in the Toolkit
    public sealed class AwsExperimentActivation : BaseTelemetryEvent
    {
        
        /// The id of the experiment being activated or deactivated
        public string ExperimentId;
        
        /// The experiment action taken action taken
        public ExperimentState ExperimentState;
        
        public AwsExperimentActivation()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// An extension in uninstalled
    public sealed class AwsExtensionUninstalled : BaseTelemetryEvent
    {
        
        public AwsExtensionUninstalled()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// AB Testing Feature response and Cohort Assignments
    public sealed class AwsFeatureConfig : BaseTelemetryEvent
    {
        
        /// Additional Data Value for AB Testing
        public string FeatureValue;
        
        /// Feature Variant for AB Testing
        public string FeatureVariation;
        
        /// Metric-defined identifier
        public string Id;
        
        public AwsFeatureConfig()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Open docs for the extension
    public sealed class AwsHelp : BaseTelemetryEvent
    {
        
        /// Optional - A generic name metadata
        public string Name;
        
        public AwsHelp()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open the quickstart guide
    public sealed class AwsHelpQuickstart : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public AwsHelpQuickstart()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Inject selected AWS credentials into a third-party run (e.g. RunConfiguration)
    public sealed class AwsInjectCredentials : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - A free-text field to record runtimes that may be separate from Lambda runtimes
        public string RuntimeString;
        
        public AwsInjectCredentials()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Load credentials from a credential source
    public sealed class AwsLoadCredentials : BaseTelemetryEvent
    {
        
        /// Where credentials are stored or retrieved from
        public CredentialSourceId CredentialSourceId;
        
        public AwsLoadCredentials()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Extension navigated the user to a web browser to perform/complete the login process.
    public sealed class AwsLoginWithBrowser : BaseTelemetryEvent
    {
        
        /// Optional - The type of auth flow used for signing in
        public AuthType? AuthType;
        
        /// Optional - Where credentials are stored or retrieved from
        public CredentialSourceId? CredentialSourceId;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// Optional - The type of credential that was selected
        public CredentialType? CredentialType;
        
        /// Optional - If this was performed as part of the reauthentication flow.
        public System.Boolean? IsReAuth;
        
        /// Optional - Why was the connection/session put in to a state where it needs to be reauthenticated?
        public string ReAuthReason;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - Length of time, in milliseconds, that an authentication session has lived for. Useful for determining how frequently a user has to reauthenticate.
        public System.Int32? SessionDuration;
        
        /// The source of the operation
        public string Source;
        
        /// Optional - The client ID of an SSO registration.
        public string SsoRegistrationClientId;
        
        /// Optional - Date/time that an SSO client registration expires.
        public string SsoRegistrationExpiresAt;
        
        public AwsLoginWithBrowser()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Modify credentials (e.g. Add, Edit, Delete)
    public sealed class AwsModifyCredentials : BaseTelemetryEvent
    {
        
        /// The type of modification performed on the credentials
        public CredentialModification CredentialModification;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        /// The source of the operation
        public string Source;
        
        public AwsModifyCredentials()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// An setting was changed by users in the Toolkit. This metric can optionally provide the new state of the setting via settingState.
    public sealed class AwsModifySetting : BaseTelemetryEvent
    {
        
        /// The id of the setting being changed. Consistent namespace should be used for the id, e.g. codewhisperer_autoSuggestionActivation
        public string SettingId;
        
        /// Optional - The state of the setting being changed to. This should not be recorded for free-form settings like file-system paths. Instead, stick to things like flags, numbers, and enums.
        public string SettingState;
        
        public AwsModifySetting()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open the credentials file
    public sealed class AwsOpenCredentials : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public AwsOpenCredentials()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Opens a url
    public sealed class AwsOpenUrl : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The source of the operation
        public string Source;
        
        /// Optional - The url associated with a metric
        public string Url;
        
        public AwsOpenUrl()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Emitted when credentials are automatically refreshed by the AWS SDK or Toolkit
    public sealed class AwsRefreshCredentials : BaseTelemetryEvent
    {
        
        /// Optional - Where credentials are stored or retrieved from
        public CredentialSourceId? CredentialSourceId;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// Optional - The type of credential that was selected
        public CredentialType? CredentialType;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - Length of time, in milliseconds, that an authentication session has lived for. Useful for determining how frequently a user has to reauthenticate.
        public System.Int32? SessionDuration;
        
        /// Optional - The client ID of an SSO registration.
        public string SsoRegistrationClientId;
        
        /// Optional - Date/time that an SSO client registration expires.
        public string SsoRegistrationExpiresAt;
        
        public AwsRefreshCredentials()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Refresh the AWS explorer window
    public sealed class AwsRefreshExplorer : BaseTelemetryEvent
    {
        
        public AwsRefreshExplorer()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Report an issue with the plugin
    public sealed class AwsReportPluginIssue : BaseTelemetryEvent
    {
        
        public AwsReportPluginIssue()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Save credentials
    public sealed class AwsSaveCredentials : BaseTelemetryEvent
    {
        
        public AwsSaveCredentials()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Select a credentials profile
    public sealed class AwsSetCredentials : BaseTelemetryEvent
    {
        
        /// Optional - Where credentials are stored or retrieved from
        public CredentialSourceId? CredentialSourceId;
        
        /// Optional - The type of credential that was selected
        public CredentialType? CredentialType;
        
        public AwsSetCredentials()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// A partition change occurred
    public sealed class AwsSetPartition : BaseTelemetryEvent
    {
        
        /// The ID of the partition that was selected
        public string PartitionId;
        
        public AwsSetPartition()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// A region change occurred
    public sealed class AwsSetRegion : BaseTelemetryEvent
    {
        
        public AwsSetRegion()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open the repo for the extension
    public sealed class AwsShowExtensionSource : BaseTelemetryEvent
    {
        
        public AwsShowExtensionSource()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// An external tool was installed automatically
    public sealed class AwsToolInstallation : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The tool being installed
        public ToolId ToolId;
        
        public AwsToolInstallation()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Validate credentials when selecting new credentials
    public sealed class AwsValidateCredentials : BaseTelemetryEvent
    {
        
        /// Optional - Where credentials are stored or retrieved from
        public CredentialSourceId? CredentialSourceId;
        
        /// Optional - The type of credential that was selected
        public CredentialType? CredentialType;
        
        /// The result of the operation
        public Result Result;
        
        public AwsValidateCredentials()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Captures process of webview installation
    public sealed class AwsWebviewInstallation : BaseTelemetryEvent
    {
        
        /// An identifier associated with a UI element
        public string ElementId;
        
        /// Whether or not the operation was a retry
        public bool IsRetry;
        
        /// The result of the operation
        public Result Result;
        
        public AwsWebviewInstallation()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when user deletes a Beanstalk application
    public sealed class BeanstalkDeleteApplication : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public BeanstalkDeleteApplication()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when user deletes a Beanstalk environment
    public sealed class BeanstalkDeleteEnvironment : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public BeanstalkDeleteEnvironment()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when deploying an application to Elastic Beanstalk
    public sealed class BeanstalkDeploy : BaseTelemetryEvent
    {
        
        /// Optional - Whether or not Elastic Beanstalk enhanced health reporting and monitoring is being used
        public System.Boolean? EnhancedHealthEnabled;
        
        /// Optional - Application framework being used
        public string Framework;
        
        /// Whether or not the deploy targets a new destination (true) or an existing destination (false)
        public bool InitialDeploy;
        
        /// Optional - A generic name metadata
        public string Name;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        /// Optional - The source of the operation
        public string Source;
        
        /// Optional - Whether or not AWS X-Ray is enabled
        public System.Boolean? XrayEnabled;
        
        public BeanstalkDeploy()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Edit configuration of a Beanstalk environment
    public sealed class BeanstalkEditEnvironment : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public BeanstalkEditEnvironment()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view the status of the Beanstalk Application
    public sealed class BeanstalkOpenApplication : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public BeanstalkOpenApplication()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view the status of the Beanstalk Environment
    public sealed class BeanstalkOpenEnvironment : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public BeanstalkOpenEnvironment()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when user completes the Elastic Beanstalk publish wizard
    public sealed class BeanstalkPublishWizard : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        /// Optional - The source of the operation
        public string Source;
        
        public BeanstalkPublishWizard()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Rebuild a Beanstalk environment
    public sealed class BeanstalkRebuildEnvironment : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public BeanstalkRebuildEnvironment()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Restart application server for a Beanstalk environment
    public sealed class BeanstalkRestartApplication : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public BeanstalkRestartApplication()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when creating a CloudFormation project
    public sealed class CloudformationCreateProject : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Generic name of a template
        public string TemplateName;
        
        public CloudformationCreateProject()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when deleting a cloudformation stack
    public sealed class CloudformationDelete : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudformationDelete()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when deploying a CloudFormation template
    public sealed class CloudformationDeploy : BaseTelemetryEvent
    {
        
        /// Whether or not the deploy targets a new destination (true) or an existing destination (false)
        public bool InitialDeploy;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        /// Optional - The source of the operation
        public string Source;
        
        public CloudformationDeploy()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a CloudFormation stack in the stack viewer
    public sealed class CloudformationOpen : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudformationOpen()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when user completes the CloudFormation template publish wizard
    public sealed class CloudformationPublishWizard : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        /// Optional - The source of the operation
        public string Source;
        
        public CloudformationPublishWizard()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create a CloudFront Distribution
    public sealed class CloudfrontCreateDistribution : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudfrontCreateDistribution()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create a CloudFront Streaming Distribution
    public sealed class CloudfrontCreateStreamingDistribution : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudfrontCreateStreamingDistribution()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when user deletes a CloudFront Distribution
    public sealed class CloudfrontDeleteDistribution : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudfrontDeleteDistribution()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when user deletes a CloudFront Streaming Distribution
    public sealed class CloudfrontDeleteStreamingDistribution : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudfrontDeleteStreamingDistribution()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view the status of the CloudFront Distribution
    public sealed class CloudfrontOpenDistribution : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudfrontOpenDistribution()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view the Cloudfront Invalidation requests
    public sealed class CloudfrontOpenInvalidationRequest : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudfrontOpenInvalidationRequest()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view the status of the CloudFront Streaming Distribution
    public sealed class CloudfrontOpenStreamingDistribution : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudfrontOpenStreamingDistribution()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Start an insights query
    public sealed class CloudwatchinsightsExecuteQuery : BaseTelemetryEvent
    {
        
        /// User-specified search string type while starting an insights query
        public InsightsQueryStringType InsightsQueryStringType;
        
        /// User-selected time range type while starting an insights query
        public InsightsQueryTimeType InsightsQueryTimeType;
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchinsightsExecuteQuery()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Get all details for the selected log record
    public sealed class CloudwatchinsightsOpenDetailedLogRecord : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchinsightsOpenDetailedLogRecord()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open the insights query editor
    public sealed class CloudwatchinsightsOpenEditor : BaseTelemetryEvent
    {
        
        /// Dialog open trigger source location
        public InsightsDialogOpenSource InsightsDialogOpenSource;
        
        public CloudwatchinsightsOpenEditor()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Retrieve list of available saved queries from AWS
    public sealed class CloudwatchinsightsRetrieveQuery : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchinsightsRetrieveQuery()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Save query parameters to AWS
    public sealed class CloudwatchinsightsSaveQuery : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchinsightsSaveQuery()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Copy the ARN of a CloudWatch Logs entity
    public sealed class CloudwatchlogsCopyArn : BaseTelemetryEvent
    {
        
        /// CloudWatch Logs entity
        public CloudWatchResourceType CloudWatchResourceType;
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsCopyArn()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete a CloudWatch Logs entity.
    public sealed class CloudwatchlogsDelete : BaseTelemetryEvent
    {
        
        /// CloudWatch Logs entity
        public CloudWatchResourceType CloudWatchResourceType;
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsDelete()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Download a CloudWatch Logs entity. Value indicates the final size of the formatted stream in bytes.
    public sealed class CloudwatchlogsDownload : BaseTelemetryEvent
    {
        
        /// CloudWatch Logs entity
        public CloudWatchResourceType CloudWatchResourceType;
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsDownload()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Download a stream to a file on disk. Value indicates the final size of the formatted stream. (Deprecated - use cloudwatchlogs_download)
    public sealed class CloudwatchlogsDownloadStreamToFile : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsDownloadStreamToFile()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Filters a CloudWatch Logs entity. (Essentially a subset of cloudwatchlogs_open)
    public sealed class CloudwatchlogsFilter : BaseTelemetryEvent
    {
        
        /// CloudWatch Logs entity
        public CloudWatchResourceType CloudWatchResourceType;
        
        /// Optional - A text based filter was used
        public System.Boolean? HasTextFilter;
        
        /// Optional - A time based filter was used
        public System.Boolean? HasTimeFilter;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The source of the operation
        public string Source;
        
        public CloudwatchlogsFilter()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a CloudWatch Logs entity. ServiceType and source indicate where the request came from (example: while viewing an ECS container)
    public sealed class CloudwatchlogsOpen : BaseTelemetryEvent
    {
        
        /// Optional - Presentation mode used in a CloudWatch Logs operation
        public CloudWatchLogsPresentation? CloudWatchLogsPresentation;
        
        /// CloudWatch Logs entity
        public CloudWatchResourceType CloudWatchResourceType;
        
        /// Optional - A text based filter was used
        public System.Boolean? HasTextFilter;
        
        /// Optional - A time based filter was used
        public System.Boolean? HasTimeFilter;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        /// The source of the operation
        public string Source;
        
        public CloudwatchlogsOpen()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open the CloudWatch Logs group window. ServiceType indicates that it was opened from a different service (like directly from an ECS container) (Deprecated - use cloudwatchlogs_open)
    public sealed class CloudwatchlogsOpenGroup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        public CloudwatchlogsOpenGroup()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a CloudWatch Logs stream in the window. ServiceType indicates that it was opened from a different service (like directly from an ECS container) (Deprecated - use cloudwatchlogs_open)
    public sealed class CloudwatchlogsOpenStream : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        public CloudwatchlogsOpenStream()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Download a stream to memory then open in an editor.
    public sealed class CloudwatchlogsOpenStreamInEditor : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsOpenStreamInEditor()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Refresh a CloudWatch Logs entity
    public sealed class CloudwatchlogsRefresh : BaseTelemetryEvent
    {
        
        /// CloudWatch Logs entity
        public CloudWatchResourceType CloudWatchResourceType;
        
        public CloudwatchlogsRefresh()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Refresh group is pressed (Deprecated, use cloudwatchlogs_refresh)
    public sealed class CloudwatchlogsRefreshGroup : BaseTelemetryEvent
    {
        
        public CloudwatchlogsRefreshGroup()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Refresh stream is pressed (Deprecated, use cloudwatchlogs_refresh)
    public sealed class CloudwatchlogsRefreshStream : BaseTelemetryEvent
    {
        
        public CloudwatchlogsRefreshStream()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when a group is searched
    public sealed class CloudwatchlogsSearchGroup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsSearchGroup()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when a stream is searched
    public sealed class CloudwatchlogsSearchStream : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsSearchStream()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Show event around a time period in ms specified by Value
    public sealed class CloudwatchlogsShowEventsAround : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsShowEventsAround()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// When user starts a new LiveTail command
    public sealed class CloudwatchlogsStartLiveTail : BaseTelemetryEvent
    {
        
        /// Optional - Type of filter applied
        public FilterType? FilterType;
        
        /// Optional - A text based filter was used
        public System.Boolean? HasTextFilter;
        
        /// Session already open that matches new request
        public bool SessionAlreadyStarted;
        
        /// The source of the operation
        public string Source;
        
        public CloudwatchlogsStartLiveTail()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// When user stops a liveTailSession
    public sealed class CloudwatchlogsStopLiveTail : BaseTelemetryEvent
    {
        
        /// The source of the operation
        public string Source;
        
        public CloudwatchlogsStopLiveTail()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Tail stream off/on
    public sealed class CloudwatchlogsTailStream : BaseTelemetryEvent
    {
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        public CloudwatchlogsTailStream()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Copy the currently open (possibly filtered) messages to an editor
    public sealed class CloudwatchlogsViewCurrentMessagesInEditor : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsViewCurrentMessagesInEditor()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Word wrap events off/on
    public sealed class CloudwatchlogsWrapEvents : BaseTelemetryEvent
    {
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        public CloudwatchlogsWrapEvents()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Connect to a Amazon CodeCatalyst dev environment
    public sealed class CodecatalystConnect : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Opaque AWS Builder ID identifier
        public string UserId;
        
        public CodecatalystConnect()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create an Amazon CodeCatalyst Dev Environment
    public sealed class CodecatalystCreateDevEnvironment : BaseTelemetryEvent
    {
        
        /// Optional - Type of Git repository provided to the Amazon CodeCatalyst dev environment create wizard
        public CodecatalystCreateDevEnvironmentRepoType? CodecatalystCreateDevEnvironmentRepoType;
        
        /// The result of the operation
        public Result Result;
        
        /// Opaque AWS Builder ID identifier
        public string UserId;
        
        public CodecatalystCreateDevEnvironment()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Workflow statistic for connecting to a dev environment
    public sealed class CodecatalystDevEnvironmentWorkflowStatistic : BaseTelemetryEvent
    {
        
        /// Optional - Workflow error name
        public string CodecatalystDevEnvironmentWorkflowError;
        
        /// Workflow step name
        public string CodecatalystDevEnvironmentWorkflowStep;
        
        /// The result of the operation
        public Result Result;
        
        /// Opaque AWS Builder ID identifier
        public string UserId;
        
        public CodecatalystDevEnvironmentWorkflowStatistic()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Clone a Amazon CodeCatalyst code repository locally
    public sealed class CodecatalystLocalClone : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Opaque AWS Builder ID identifier
        public string UserId;
        
        public CodecatalystLocalClone()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Update properties of a Amazon CodeCatalyst Dev Environment
    public sealed class CodecatalystUpdateDevEnvironmentSettings : BaseTelemetryEvent
    {
        
        /// Locality of the Amazon CodeCatalyst update dev environment request (i.e., from the thin client or the local IDE instance)
        public CodecatalystUpdateDevEnvironmentLocationType CodecatalystUpdateDevEnvironmentLocationType;
        
        /// The result of the operation
        public Result Result;
        
        /// Opaque AWS Builder ID identifier
        public string UserId;
        
        public CodecatalystUpdateDevEnvironmentSettings()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Trigger a devfile update on a Amazon CodeCatalyst dev environment
    public sealed class CodecatalystUpdateDevfile : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Opaque AWS Builder ID identifier
        public string UserId;
        
        public CodecatalystUpdateDevfile()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// A repo is cloned from CodeCommit
    public sealed class CodecommitCloneRepo : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CodecommitCloneRepo()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// A repo is created in CodeCommit
    public sealed class CodecommitCreateRepo : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CodecommitCreateRepo()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// A connection is established to CodeCommit to perform actions on repos
    public sealed class CodecommitSetCredentials : BaseTelemetryEvent
    {
        
        /// Optional - The type of credential that was selected
        public CredentialType? CredentialType;
        
        /// The result of the operation
        public Result Result;
        
        public CodecommitSetCredentials()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Apply suggested changes to buildable units.
    public sealed class CodeTransformApplyChanges : BaseTelemetryEvent
    {
        
        /// The number of transformed files that have been accepted by the user
        public int CodeTransformNumberOfTransformedFilesAccepted;
        
        /// Optional - The number of transformed buildable units that have been accepted by the user
        public System.Int32? CodeTransformNumberOfTransformedUnitsAccepted;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        public CodeTransformApplyChanges()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User downloads code transform artifact
    public sealed class CodeTransformDownloadArtifact : BaseTelemetryEvent
    {
        
        /// Type of transform artifact
        public CodeTransformArtifactType CodeTransformArtifactType;
        
        /// The ID of the job currently running
        public string CodeTransformJobId;
        
        /// Optional - Any runtime errors
        public string CodeTransformRuntimeError;
        
        /// A millisecond value of the total run time
        public int CodeTransformRunTimeLatency;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        /// The byte size of the upload or download.
        public int CodeTransformTotalByteSize;
        
        public CodeTransformDownloadArtifact()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// The user interactivity when a transformation pause state is reached.
    public sealed class CodeTransformHumanInTheLoop : BaseTelemetryEvent
    {
        
        /// Optional - The ID of the job currently running
        public string CodeTransformJobId;
        
        /// A general field for logging metadata associated to Amazon Q transform metrics.
        public string CodeTransformMetadata;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        public CodeTransformHumanInTheLoop()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User initiates code transform from Q Chat Prompt.
    public sealed class CodeTransformInitiateTransform : BaseTelemetryEvent
    {
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        /// Optional - Where credentials are stored or retrieved from
        public CredentialSourceId? CredentialSourceId;
        
        public CodeTransformInitiateTransform()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// After a job is running the user has the ability to cancel the job.
    public sealed class CodeTransformJobIsCancelledByUser : BaseTelemetryEvent
    {
        
        /// Optional - Names of components that can cancel a transformation
        public CodeTransformCancelSrcComponents? CodeTransformCancelSrcComponents;
        
        /// Optional - The ID of the job currently running
        public string CodeTransformJobId;
        
        /// Optional - Any runtime errors
        public string CodeTransformRuntimeError;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        public CodeTransformJobIsCancelledByUser()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// The user closes their IDE and stops viewing the transformation.
    public sealed class CodeTransformJobIsClosedDuringIdeRun : BaseTelemetryEvent
    {
        
        /// The ID of the job currently running
        public string CodeTransformJobId;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        /// The current transformation job's status
        public string CodeTransformStatus;
        
        public CodeTransformJobIsClosedDuringIdeRun()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// The user was previously running a transformation and came back to IDE to see it still running
    public sealed class CodeTransformJobIsResumedAfterIdeClose : BaseTelemetryEvent
    {
        
        /// The ID of the job currently running
        public string CodeTransformJobId;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        /// The current transformation job's status
        public string CodeTransformStatus;
        
        public CodeTransformJobIsResumedAfterIdeClose()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Transform job started for uploaded project.
    public sealed class CodeTransformJobStart : BaseTelemetryEvent
    {
        
        /// Optional - The ID of the job currently running
        public string CodeTransformJobId;
        
        /// Optional - The number of projects selected for transformation
        public System.Int32? CodeTransformNumberOfProjects;
        
        /// Optional - The number of files that were transformed during a transformation job
        public System.Int32? CodeTransformNumberOfTransformedFiles;
        
        /// Optional - A millisecond value of the total run time
        public System.Int32? CodeTransformRunTimeLatency;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        /// Optional - The target solution or project(s) selected for transformation
        public string CodeTransformTarget;
        
        /// Optional - Where credentials are stored or retrieved from
        public CredentialSourceId? CredentialSourceId;
        
        /// Optional - The source of the operation
        public string Source;
        
        public CodeTransformJobStart()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// During the transformation progress, log the status steps returning from the API.
    public sealed class CodeTransformJobStatusChanged : BaseTelemetryEvent
    {
        
        /// The ID of the job currently running
        public string CodeTransformJobId;
        
        /// The current transformation job's previous status
        public string CodeTransformPreviousStatus;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        /// The current transformation job's status
        public string CodeTransformStatus;
        
        public CodeTransformJobStatusChanged()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Transform initiates local build.
    public sealed class CodeTransformLocalBuildProject : BaseTelemetryEvent
    {
        
        /// Type of build command
        public CodeTransformBuildCommand CodeTransformBuildCommand;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        public CodeTransformLocalBuildProject()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// A general error has occurred.
    public sealed class CodeTransformLogGeneralError : BaseTelemetryEvent
    {
        
        /// Optional - The ID of the job currently running
        public string CodeTransformJobId;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        public CodeTransformLogGeneralError()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// User provides input to project module and language selection.
    public sealed class CodeTransformSubmitSelection : BaseTelemetryEvent
    {
        
        /// Optional - Allowed Java versions to transform from
        public CodeTransformJavaSourceVersionsAllowed? CodeTransformJavaSourceVersionsAllowed;
        
        /// Optional - Allowed Java versions to transform to
        public CodeTransformJavaTargetVersionsAllowed? CodeTransformJavaTargetVersionsAllowed;
        
        /// Optional - The ID of the job currently running
        public string CodeTransformJobId;
        
        /// Optional - A hash identifying the projects chosen top level build file that is to be transformed.
        public string CodeTransformProjectId;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        /// Optional - The source of the operation
        public string Source;
        
        /// Optional - The target of the operation
        public string Target;
        
        /// Optional - User selection from a predefined menu (not user-provided input). See also `action`.
        public string UserChoice;
        
        public CodeTransformSubmitSelection()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// We want to log the total run time in the users experience for the IDE. The total runtime should end when all API's have finished running and the users is prompted for next step actions.
    public sealed class CodeTransformTotalRunTime : BaseTelemetryEvent
    {
        
        /// Optional - The build system version on the user's machine
        public string BuildSystemVersion;
        
        /// Optional - The ID of the job currently running
        public string CodeTransformJobId;
        
        /// Optional - The Java version on the user's machine
        public string CodeTransformLocalJavaVersion;
        
        /// Optional - The number of times the transformation plan was received during transformation
        public System.Int32? CodeTransformPlanReceivedCount;
        
        /// Optional - The outcome of the transformation
        public string CodeTransformResultStatusMessage;
        
        /// A millisecond value of the total run time
        public int CodeTransformRunTimeLatency;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        public CodeTransformTotalRunTime()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Transform initiates project artifact upload.
    public sealed class CodeTransformUploadProject : BaseTelemetryEvent
    {
        
        /// If dependencies are copied into upload artifact.
        public bool CodeTransformDependenciesCopied;
        
        /// Optional - The ID of the job currently running
        public string CodeTransformJobId;
        
        /// A millisecond value of the total run time
        public int CodeTransformRunTimeLatency;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        /// The byte size of the upload or download.
        public int CodeTransformTotalByteSize;
        
        public CodeTransformUploadProject()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Transform initiates project language, build tool, and build file validation.
    public sealed class CodeTransformValidateProject : BaseTelemetryEvent
    {
        
        /// Optional - The build system version on the user's machine
        public string BuildSystemVersion;
        
        /// Optional - Type of build system
        public CodeTransformBuildSystem? CodeTransformBuildSystem;
        
        /// Optional - The Java version on the user's machine
        public string CodeTransformLocalJavaVersion;
        
        /// Optional - A general field for logging metadata associated to Amazon Q transform metrics.
        public string CodeTransformMetadata;
        
        /// Optional - Names of the pre-validation errors that can occur
        public CodeTransformPreValidationError? CodeTransformPreValidationError;
        
        /// Represents the IDE session from which users start the transformation process
        public string CodeTransformSessionId;
        
        public CodeTransformValidateProject()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Client side invocation blocked by another invocation in progress
    public sealed class CodewhispererBlockedInvocation : BaseTelemetryEvent
    {
        
        /// Optional - The type of the Automated trigger to send request to CodeWhisperer service
        public CodewhispererAutomatedTriggerType? CodewhispererAutomatedTriggerType;
        
        /// cursor location offset in the editor when invoking CodeWhisperer for recommendation
        public int CodewhispererCursorOffset;
        
        /// Programming language of the CodeWhisperer recommendation
        public CodewhispererLanguage CodewhispererLanguage;
        
        /// The line number of the cursor when the event happens
        public int CodewhispererLineNumber;
        
        /// The type of the user trigger to send request to CodeWhisperer service
        public CodewhispererTriggerType CodewhispererTriggerType;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        public CodewhispererBlockedInvocation()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// The latency from each CodeWhisperer components in milliseconds
    public sealed class CodewhispererClientComponentLatency : BaseTelemetryEvent
    {
        
        /// The time it takes for the last GenerateCompletions response to be received after plugin makes a first call to GenerateCompletions API.
        public double CodewhispererAllCompletionsLatency;
        
        /// Completion Type of the inference results returned from CodeWhisperer model layer
        public CodewhispererCompletionType CodewhispererCompletionType;
        
        /// The time it takes to get the Sono/SSO credential for the invocation.
        public double CodewhispererCredentialFetchingLatency;
        
        /// Optional - The currently selected customization arn(None if using the base model)
        public string CodewhispererCustomizationArn;
        
        /// The time it takes for the first completion to be shown in the IDE after the user performs the CW trigger action.
        public double CodewhispererEndToEndLatency;
        
        /// The time it takes for the response to be received after the plugin makes a first GenerateCompletions API call.
        public double CodewhispererFirstCompletionLatency;
        
        /// Programming language of the CodeWhisperer recommendation
        public CodewhispererLanguage CodewhispererLanguage;
        
        /// The time it takes for the first completions to be displayed in the IDE after the plugin receives the initial Completions object.
        public double CodewhispererPostprocessingLatency;
        
        /// The time it takes for the plugin to make the first GenerateCompletions API call after the user performs the CW trigger action.
        public double CodewhispererPreprocessingLatency;
        
        /// The ID of the request to CodeWhisperer service
        public string CodewhispererRequestId;
        
        /// The unique identifier for a CodeWhisperer session(which can contain multiple requests)
        public string CodewhispererSessionId;
        
        /// The type of the user trigger to send request to CodeWhisperer service
        public CodewhispererTriggerType CodewhispererTriggerType;
        
        /// Optional - The user group identifier we assign to the customer and it should be unique identifier across different IDE platforms, i.e. Classifier, CrossFile etc.
        public string CodewhispererUserGroup;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        public CodewhispererClientComponentLatency()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Percentage of user tokens against suggestions until 5 mins of time
    public sealed class CodewhispererCodePercentage : BaseTelemetryEvent
    {
        
        /// The number of tokens that are accepted and not modified by the user
        public int CodewhispererAcceptedTokens;
        
        /// Optional - The currently selected customization arn(None if using the base model)
        public string CodewhispererCustomizationArn;
        
        /// Programming language of the CodeWhisperer recommendation
        public CodewhispererLanguage CodewhispererLanguage;
        
        /// The percentage of acceptance on suggested CodeWhisperer code on the overall code
        public int CodewhispererPercentage;
        
        /// Optional - The number of tokens in the original code suggestions
        public System.Int32? CodewhispererSuggestedTokens;
        
        /// The metrics generated by the user and acceptance of suggested CodeWhisperer code in the language CodeWhisperer supports.
        public int CodewhispererTotalTokens;
        
        /// Optional - The user group identifier we assign to the customer and it should be unique identifier across different IDE platforms, i.e. Classifier, CrossFile etc.
        public string CodewhispererUserGroup;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// The number of successful operations
        public int SuccessCount;
        
        public CodewhispererCodePercentage()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when a new chat tab is opened in the code scan view
    public sealed class CodewhispererCodeScanChatNewTab : BaseTelemetryEvent
    {
        
        /// Optional - Where credentials are stored or retrieved from
        public CredentialSourceId? CredentialSourceId;
        
        public CodewhispererCodeScanChatNewTab()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when a code scan issue suggested fix is applied
    public sealed class CodewhispererCodeScanIssueApplyFix : BaseTelemetryEvent
    {
        
        /// Optional - Captures the type of fix that was accepted
        public CodeFixAction? CodeFixAction;
        
        /// The IDE or OS component used for the action. (Examples: S3 download to filesystem, S3 upload from editor, ...).  See also `featureId` for specific feature names, `module` for low-level modules, and `resourceType`.
        public Component Component;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// The id of the detector which produced the code scan issue
        public string DetectorId;
        
        /// The id of a security finding from a code scan
        public string FindingId;
        
        /// Optional - The id of the rule which produced the code scan issue
        public string RuleId;
        
        public CodewhispererCodeScanIssueApplyFix()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Generated fix for a code scan issue. variant=refresh means the user chose to generate a fix again after one already exists.
    public sealed class CodewhispererCodeScanIssueGenerateFix : BaseTelemetryEvent
    {
        
        /// The IDE or OS component used for the action. (Examples: S3 download to filesystem, S3 upload from editor, ...).  See also `featureId` for specific feature names, `module` for low-level modules, and `resourceType`.
        public Component Component;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// The id of the detector which produced the code scan issue
        public string DetectorId;
        
        /// The id of a security finding from a code scan
        public string FindingId;
        
        /// Optional - The id of the rule which produced the code scan issue
        public string RuleId;
        
        /// Optional - A generic variant metadata
        public string Variant;
        
        public CodewhispererCodeScanIssueGenerateFix()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when a code scan issue is hovered over
    public sealed class CodewhispererCodeScanIssueHover : BaseTelemetryEvent
    {
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// The id of the detector which produced the code scan issue
        public string DetectorId;
        
        /// The id of a security finding from a code scan
        public string FindingId;
        
        /// Whether the security issue includes a suggested fix
        public bool IncludesFix;
        
        /// Optional - The id of the rule which produced the code scan issue
        public string RuleId;
        
        public CodewhispererCodeScanIssueHover()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User ignored a code scan issue. variant=all means the user ignored all issues of a specific type.
    public sealed class CodewhispererCodeScanIssueIgnore : BaseTelemetryEvent
    {
        
        /// The IDE or OS component used for the action. (Examples: S3 download to filesystem, S3 upload from editor, ...).  See also `featureId` for specific feature names, `module` for low-level modules, and `resourceType`.
        public Component Component;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// The id of the detector which produced the code scan issue
        public string DetectorId;
        
        /// The id of a security finding from a code scan
        public string FindingId;
        
        /// Optional - The id of the rule which produced the code scan issue
        public string RuleId;
        
        /// Optional - A generic variant metadata
        public string Variant;
        
        public CodewhispererCodeScanIssueIgnore()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when a code scan issue webview is opened
    public sealed class CodewhispererCodeScanIssueViewDetails : BaseTelemetryEvent
    {
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// The id of the detector which produced the code scan issue
        public string DetectorId;
        
        /// The id of a security finding from a code scan
        public string FindingId;
        
        /// Optional - The id of the rule which produced the code scan issue
        public string RuleId;
        
        public CodewhispererCodeScanIssueViewDetails()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Whether or not CodeWhisperer is enabled
    public sealed class CodewhispererEnabled : BaseTelemetryEvent
    {
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        /// The source of the operation
        public string Source;
        
        public CodewhispererEnabled()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// This metric provides the particular language and task type selected by the user in the onboarding page by clicking on the Try Example button.
    public sealed class CodewhispererOnboardingClick : BaseTelemetryEvent
    {
        
        /// The task type selected by the user in getting started page
        public CodewhispererGettingStartedTask CodewhispererGettingStartedTask;
        
        /// Programming language of the CodeWhisperer recommendation
        public CodewhispererLanguage CodewhispererLanguage;
        
        public CodewhispererOnboardingClick()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// The duration from user last modification to the first recommendation shown in milliseconds
    public sealed class CodewhispererPerceivedLatency : BaseTelemetryEvent
    {
        
        /// Completion Type of the inference results returned from CodeWhisperer model layer
        public CodewhispererCompletionType CodewhispererCompletionType;
        
        /// Optional - The currently selected customization arn(None if using the base model)
        public string CodewhispererCustomizationArn;
        
        /// Programming language of the CodeWhisperer recommendation
        public CodewhispererLanguage CodewhispererLanguage;
        
        /// The ID of the request to CodeWhisperer service
        public string CodewhispererRequestId;
        
        /// Optional - The unique identifier for a CodeWhisperer session(which can contain multiple requests)
        public string CodewhispererSessionId;
        
        /// The type of the user trigger to send request to CodeWhisperer service
        public CodewhispererTriggerType CodewhispererTriggerType;
        
        /// Optional - The user group identifier we assign to the customer and it should be unique identifier across different IDE platforms, i.e. Classifier, CrossFile etc.
        public string CodewhispererUserGroup;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        public CodewhispererPerceivedLatency()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Client side invocation of the CodeWhisperer Security Scan
    public sealed class CodewhispererSecurityScan : BaseTelemetryEvent
    {
        
        /// Time taken to fetch the upload URL and upload the artifacts in milliseconds
        public int ArtifactsUploadDuration;
        
        /// Time taken to invoke code scan service APIs in milliseconds
        public int CodeScanServiceInvocationsDuration;
        
        /// Optional - The uncompressed payload size in bytes of the build files in customer project context sent for security scan
        public System.Int32? CodewhispererCodeScanBuildPayloadBytes;
        
        /// Optional - The compressed payload size of built jars in bytes of customer project context sent for security scan. This is only applicable for Java project
        public System.Int32? CodewhispererCodeScanBuildZipFileBytes;
        
        /// Optional - The number of security issues detected with suggested fixes
        public System.Int32? CodewhispererCodeScanIssuesWithFixes;
        
        /// Optional - The ID of the security scan job
        public string CodewhispererCodeScanJobId;
        
        /// How many lines of code being sent for security scan
        public int CodewhispererCodeScanLines;
        
        /// Optional - The total size in bytes of customer project to perform security scan on
        public System.Double? CodewhispererCodeScanProjectBytes;
        
        /// Optional - The scope of the security scan being performed
        public CodewhispererCodeScanScope? CodewhispererCodeScanScope;
        
        /// The uncompressed payload size in bytes of the source files in customer project context sent for security scan
        public int CodewhispererCodeScanSrcPayloadBytes;
        
        /// The compressed payload size of source files in bytes of customer project context sent for security scan
        public int CodewhispererCodeScanSrcZipFileBytes;
        
        /// The number of security issues been detected
        public int CodewhispererCodeScanTotalIssues;
        
        /// Programming language of the CodeWhisperer recommendation
        public CodewhispererLanguage CodewhispererLanguage;
        
        /// Time taken for context truncation in milliseconds
        public int ContextTruncationDuration;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The source of the operation
        public string Source;
        
        public CodewhispererSecurityScan()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Client side invocation of the CodeWhisperer service for suggestion
    public sealed class CodewhispererServiceInvocation : BaseTelemetryEvent
    {
        
        /// Optional - The type of the Automated trigger to send request to CodeWhisperer service
        public CodewhispererAutomatedTriggerType? CodewhispererAutomatedTriggerType;
        
        /// Optional - Completion Type of the inference results returned from CodeWhisperer model layer
        public CodewhispererCompletionType? CodewhispererCompletionType;
        
        /// cursor location offset in the editor when invoking CodeWhisperer for recommendation
        public int CodewhispererCursorOffset;
        
        /// Optional - The currently selected customization arn(None if using the base model)
        public string CodewhispererCustomizationArn;
        
        /// Optional - The task type selected by the user in getting started page
        public CodewhispererGettingStartedTask? CodewhispererGettingStartedTask;
        
        /// Optional - Whether Import Recommendation is enabled.
        public System.Boolean? CodewhispererImportRecommendationEnabled;
        
        /// Programming language of the CodeWhisperer recommendation
        public CodewhispererLanguage CodewhispererLanguage;
        
        /// Optional - The last index of recommendation from a particular response
        public System.Int32? CodewhispererLastSuggestionIndex;
        
        /// The line number of the cursor when the event happens
        public int CodewhispererLineNumber;
        
        /// Optional - The ID of the request to CodeWhisperer service
        public string CodewhispererRequestId;
        
        /// Optional - the pre-defined set of values for runtime version of the language of CodeWhisperer recommendation
        public CodewhispererRuntime? CodewhispererRuntime;
        
        /// Optional - the original (free-text) of the runtime version of the language of CodeWhisperer recommendation
        public string CodewhispererRuntimeSource;
        
        /// Optional - The unique identifier for a CodeWhisperer session(which can contain multiple requests)
        public string CodewhispererSessionId;
        
        /// Optional - If the supplemental context is for test file(UTG) or src file
        public System.Boolean? CodewhispererSupplementalContextIsUtg;
        
        /// Optional - Latency to obtain supplemental context
        public System.Double? CodewhispererSupplementalContextLatency;
        
        /// Optional - Length of codewhisperer supplemental context extracted from files
        public System.Int32? CodewhispererSupplementalContextLength;
        
        /// Optional - If the supplemental context fetching timeout or not
        public System.Boolean? CodewhispererSupplementalContextTimeout;
        
        /// The type of the user trigger to send request to CodeWhisperer service
        public CodewhispererTriggerType CodewhispererTriggerType;
        
        /// Optional - The user group identifier we assign to the customer and it should be unique identifier across different IDE platforms, i.e. Classifier, CrossFile etc.
        public string CodewhispererUserGroup;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// The result of the operation
        public Result Result;
        
        public CodewhispererServiceInvocation()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User acceptance or rejection of each suggestion returned by the CodeWhisperer service request
    public sealed class CodewhispererUserDecision : BaseTelemetryEvent
    {
        
        /// Completion Type of the inference results returned from CodeWhisperer model layer
        public CodewhispererCompletionType CodewhispererCompletionType;
        
        /// Optional - The task type selected by the user in getting started page
        public CodewhispererGettingStartedTask? CodewhispererGettingStartedTask;
        
        /// Programming language of the CodeWhisperer recommendation
        public CodewhispererLanguage CodewhispererLanguage;
        
        /// Optional - The number of recommendations received so far when user makes a decision
        public System.Int32? CodewhispererPaginationProgress;
        
        /// The ID of the request to CodeWhisperer service
        public string CodewhispererRequestId;
        
        /// Optional - the pre-defined set of values for runtime version of the language of CodeWhisperer recommendation
        public CodewhispererRuntime? CodewhispererRuntime;
        
        /// Optional - the original (free-text) of the runtime version of the language of CodeWhisperer recommendation
        public string CodewhispererRuntimeSource;
        
        /// Optional - The unique identifier for a CodeWhisperer session(which can contain multiple requests)
        public string CodewhispererSessionId;
        
        /// Optional - The number of import statements included with recommendation.
        public System.Int32? CodewhispererSuggestionImportCount;
        
        /// The index for each suggestion, respectively, in the list of suggestions returned from service invocation
        public int CodewhispererSuggestionIndex;
        
        /// Number of references the particular suggestion is referenced with.
        public int CodewhispererSuggestionReferenceCount;
        
        /// Optional - The list of unique license names for a particular suggestion
        public string CodewhispererSuggestionReferences;
        
        /// User decision of each of the suggestion returned from CodeWhisperer
        public CodewhispererSuggestionState CodewhispererSuggestionState;
        
        /// Optional - If the supplemental context is for test file(UTG) or src file
        public System.Boolean? CodewhispererSupplementalContextIsUtg;
        
        /// Optional - Length of codewhisperer supplemental context extracted from files
        public System.Int32? CodewhispererSupplementalContextLength;
        
        /// Optional - If the supplemental context fetching timeout or not
        public System.Boolean? CodewhispererSupplementalContextTimeout;
        
        /// The type of the user trigger to send request to CodeWhisperer service
        public CodewhispererTriggerType CodewhispererTriggerType;
        
        /// Optional - The user group identifier we assign to the customer and it should be unique identifier across different IDE platforms, i.e. Classifier, CrossFile etc.
        public string CodewhispererUserGroup;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        public CodewhispererUserDecision()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Percentage of user modifications for the selected suggestion until a fixed period of time
    public sealed class CodewhispererUserModification : BaseTelemetryEvent
    {
        
        /// The number of characters user has accepted through inline completion service
        public int CodewhispererCharactersAccepted;
        
        /// number of characters modified by users within the accepted inline suggestion
        public int CodewhispererCharactersModified;
        
        /// Completion Type of the inference results returned from CodeWhisperer model layer
        public CodewhispererCompletionType CodewhispererCompletionType;
        
        /// Programming language of the CodeWhisperer recommendation
        public CodewhispererLanguage CodewhispererLanguage;
        
        /// The percentage of user modifications on the suggested code
        public double CodewhispererModificationPercentage;
        
        /// The ID of the request to CodeWhisperer service
        public string CodewhispererRequestId;
        
        /// Optional - the pre-defined set of values for runtime version of the language of CodeWhisperer recommendation
        public CodewhispererRuntime? CodewhispererRuntime;
        
        /// Optional - the original (free-text) of the runtime version of the language of CodeWhisperer recommendation
        public string CodewhispererRuntimeSource;
        
        /// Optional - The unique identifier for a CodeWhisperer session(which can contain multiple requests)
        public string CodewhispererSessionId;
        
        /// The index for each suggestion, respectively, in the list of suggestions returned from service invocation
        public int CodewhispererSuggestionIndex;
        
        /// The type of the user trigger to send request to CodeWhisperer service
        public CodewhispererTriggerType CodewhispererTriggerType;
        
        /// Optional - The user group identifier we assign to the customer and it should be unique identifier across different IDE platforms, i.e. Classifier, CrossFile etc.
        public string CodewhispererUserGroup;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        public CodewhispererUserModification()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User decision aggregated at trigger level
    public sealed class CodewhispererUserTriggerDecision : BaseTelemetryEvent
    {
        
        /// Optional - The type of the Automated trigger to send request to CodeWhisperer service
        public CodewhispererAutomatedTriggerType? CodewhispererAutomatedTriggerType;
        
        /// Optional - The number of characters user has accepted through inline completion service
        public System.Int32? CodewhispererCharactersAccepted;
        
        /// Optional - The number of characters originally recommended to the user in partial acceptance scenario.
        public System.Int32? CodewhispererCharactersRecommended;
        
        /// Optional - The result from Classifier trigger.
        public System.Double? CodewhispererClassifierResult;
        
        /// Optional - The threshold of Classifier trigger.
        public System.Double? CodewhispererClassifierThreshold;
        
        /// Completion Type of the inference results returned from CodeWhisperer model layer
        public CodewhispererCompletionType CodewhispererCompletionType;
        
        /// cursor location offset in the editor when invoking CodeWhisperer for recommendation
        public int CodewhispererCursorOffset;
        
        /// Optional - The currently selected customization arn(None if using the base model)
        public string CodewhispererCustomizationArn;
        
        /// Optional - Feature assignments for a particular user
        public string CodewhispererFeatureEvaluations;
        
        /// The request id of the first request in a paginated session.
        public string CodewhispererFirstRequestId;
        
        /// Optional - The task type selected by the user in getting started page
        public CodewhispererGettingStartedTask? CodewhispererGettingStartedTask;
        
        /// Optional - If user has accepted only part of the recommendation or not.
        public System.Boolean? CodewhispererIsPartialAcceptance;
        
        /// Programming language of the CodeWhisperer recommendation
        public CodewhispererLanguage CodewhispererLanguage;
        
        /// The line number of the cursor when the event happens
        public int CodewhispererLineNumber;
        
        /// Optional - The number of times the user accept part of the recommendations.
        public System.Int32? CodewhispererPartialAcceptanceCount;
        
        /// Optional - The aggregated user decision from previous trigger. 
        public CodewhispererPreviousSuggestionState? CodewhispererPreviousSuggestionState;
        
        /// Optional - The unique identifier for a CodeWhisperer session(which can contain multiple requests)
        public string CodewhispererSessionId;
        
        /// The total number of code suggestions in a paginated session.
        public int CodewhispererSuggestionCount;
        
        /// The number of import statements included with recommendation.
        public int CodewhispererSuggestionImportCount;
        
        /// User decision of each of the suggestion returned from CodeWhisperer
        public CodewhispererSuggestionState CodewhispererSuggestionState;
        
        /// Optional - If the supplemental context is for test file(UTG) or src file
        public System.Boolean? CodewhispererSupplementalContextIsUtg;
        
        /// Optional - Length of codewhisperer supplemental context extracted from files
        public System.Int32? CodewhispererSupplementalContextLength;
        
        /// Optional - Name tag or identifier for supplemental context fetching strategy being used for us to easier analyze corresponding acceptance rate
        public string CodewhispererSupplementalContextStrategyId;
        
        /// Optional - If the supplemental context fetching timeout or not
        public System.Boolean? CodewhispererSupplementalContextTimeout;
        
        /// Optional - The time from last document change to the current document change. 
        public System.Double? CodewhispererTimeSinceLastDocumentChange;
        
        /// Optional - The time from last user decision to current invocation. 
        public System.Double? CodewhispererTimeSinceLastUserDecision;
        
        /// Optional - The time from user trigger to the first recommendation is received. 
        public System.Double? CodewhispererTimeToFirstRecommendation;
        
        /// Optional - The time that recommendations are shown to the user in a paginated session.
        public System.Double? CodewhispererTotalShownTime;
        
        /// Optional - The character that triggered recommendation for special characters trigger.
        public string CodewhispererTriggerCharacter;
        
        /// The type of the user trigger to send request to CodeWhisperer service
        public CodewhispererTriggerType CodewhispererTriggerType;
        
        /// The length of additional characters inputted by the user since the invocation. 
        public int CodewhispererTypeaheadLength;
        
        /// Optional - The user group identifier we assign to the customer and it should be unique identifier across different IDE platforms, i.e. Classifier, CrossFile etc.
        public string CodewhispererUserGroup;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        public CodewhispererUserTriggerDecision()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User requested that a resource be opened in the browser using the deeplink service
    public sealed class DeeplinkOpen : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        /// The source of the operation
        public string Source;
        
        public DeeplinkOpen()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Copy the dynamic resource identifier
    public sealed class DynamicresourceCopyIdentifier : BaseTelemetryEvent
    {
        
        /// The dynamic resource type being interacted with. See also `component` for UI components, `featureId` for specific feature names, or `module` for low-level modules.
        public string ResourceType;
        
        public DynamicresourceCopyIdentifier()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open the dynamic resource model in the IDE
    public sealed class DynamicresourceGetResource : BaseTelemetryEvent
    {
        
        /// The dynamic resource type being interacted with. See also `component` for UI components, `featureId` for specific feature names, or `module` for low-level modules.
        public string ResourceType;
        
        /// The result of the operation
        public Result Result;
        
        public DynamicresourceGetResource()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Expand a Resource Type node
    public sealed class DynamicresourceListResource : BaseTelemetryEvent
    {
        
        /// The dynamic resource type being interacted with. See also `component` for UI components, `featureId` for specific feature names, or `module` for low-level modules.
        public string ResourceType;
        
        /// The result of the operation
        public Result Result;
        
        public DynamicresourceListResource()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// A dynamic resource mutation request completed
    public sealed class DynamicresourceMutateResource : BaseTelemetryEvent
    {
        
        /// The dynamic resource operation being executed
        public DynamicResourceOperation DynamicResourceOperation;
        
        /// The dynamic resource type being interacted with. See also `component` for UI components, `featureId` for specific feature names, or `module` for low-level modules.
        public string ResourceType;
        
        /// The result of the operation
        public Result Result;
        
        public DynamicresourceMutateResource()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Change the list of available dynamic resources in the AWS Explorer
    public sealed class DynamicresourceSelectResources : BaseTelemetryEvent
    {
        
        public DynamicresourceSelectResources()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create a DynamoDB table
    public sealed class DynamodbCreateTable : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public DynamodbCreateTable()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Deletes a record in DynamoDB record
    public sealed class DynamodbDeleteRecord : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public DynamodbDeleteRecord()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete a DynamoDB table
    public sealed class DynamodbDeleteTable : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public DynamodbDeleteTable()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Modify a DynamoDB entity
    public sealed class DynamodbEdit : BaseTelemetryEvent
    {
        
        /// The type of DynamoDB entity referenced by a metric or operation
        public DynamoDbTarget DynamoDbTarget;
        
        /// The result of the operation
        public Result Result;
        
        public DynamodbEdit()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Fetch records from a DynamoDB table in the table browser
    public sealed class DynamodbFetchRecords : BaseTelemetryEvent
    {
        
        /// Optional - Number of occurrences a metric, or some other metric-defined count.
        public System.Int32? Count;
        
        /// The type of fetch being performed
        public DynamoDbFetchType DynamoDbFetchType;
        
        /// Optional - The type of index being hit for the query/scan operation
        public DynamoDbIndexType? DynamoDbIndexType;
        
        /// The result of the operation
        public Result Result;
        
        public DynamodbFetchRecords()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Fetches the tables in a DynamoDB entity
    public sealed class DynamodbFetchTables : BaseTelemetryEvent
    {
        
        /// Optional - Number of occurrences a metric, or some other metric-defined count.
        public System.Int32? Count;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The source of the operation
        public string Source;
        
        public DynamodbFetchTables()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a DynamoDB table in the table browser
    public sealed class DynamodbOpenTable : BaseTelemetryEvent
    {
        
        /// Optional - Number of occurrences a metric, or some other metric-defined count.
        public System.Int32? Count;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The source of the operation
        public string Source;
        
        public DynamodbOpenTable()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// View a DynamoDB entity
    public sealed class DynamodbView : BaseTelemetryEvent
    {
        
        /// The type of DynamoDB entity referenced by a metric or operation
        public DynamoDbTarget DynamoDbTarget;
        
        /// The result of the operation
        public Result Result;
        
        public DynamodbView()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Change the state of an EC2 Instance
    public sealed class Ec2ChangeState : BaseTelemetryEvent
    {
        
        /// Actions that can affect an EC2 Instance state
        public Ec2InstanceState Ec2InstanceState;
        
        /// The result of the operation
        public Result Result;
        
        public Ec2ChangeState()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Remove the private key of an EC2 Key Pair from internal storage
    public sealed class Ec2ClearPrivateKey : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2ClearPrivateKey()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Perform a connection to an EC2 Instance
    public sealed class Ec2ConnectToInstance : BaseTelemetryEvent
    {
        
        /// Ways to connect to an EC2 Instance
        public Ec2ConnectionType Ec2ConnectionType;
        
        /// The result of the operation
        public Result Result;
        
        public Ec2ConnectToInstance()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Copy AMI image to another region
    public sealed class Ec2CopyAmiToRegion : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2CopyAmiToRegion()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create an image from an EC2 Instance
    public sealed class Ec2CreateAmi : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2CreateAmi()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create (allocate) an Elastic IP address
    public sealed class Ec2CreateElasticIp : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2CreateElasticIp()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create an EC2 Key Pair
    public sealed class Ec2CreateKeyPair : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2CreateKeyPair()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create an EC2 security group
    public sealed class Ec2CreateSecurityGroup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2CreateSecurityGroup()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create an EC2 volume snapshot
    public sealed class Ec2CreateSnapshot : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2CreateSnapshot()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create an EC2 volume
    public sealed class Ec2CreateVolume : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2CreateVolume()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete (de-register) an AMI image
    public sealed class Ec2DeleteAmi : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2DeleteAmi()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete (release) an Elastic IP address
    public sealed class Ec2DeleteElasticIp : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2DeleteElasticIp()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete an EC2 Key Pair
    public sealed class Ec2DeleteKeyPair : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2DeleteKeyPair()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete an EC2 security group
    public sealed class Ec2DeleteSecurityGroup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2DeleteSecurityGroup()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete an EC2 Volume Snapshot
    public sealed class Ec2DeleteSnapshot : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2DeleteSnapshot()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete an EC2 Volume
    public sealed class Ec2DeleteVolume : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2DeleteVolume()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Edit AMI image permissions
    public sealed class Ec2EditAmiPermission : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2EditAmiPermission()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Associate or disassociate an Elastic IP with an EC2 Instance
    public sealed class Ec2EditInstanceElasticIp : BaseTelemetryEvent
    {
        
        /// Optional - True if turned on, false if turned off
        public System.Boolean? Enabled;
        
        /// The result of the operation
        public Result Result;
        
        public Ec2EditInstanceElasticIp()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Adjust the shutdown behavior of an EC2 Instance
    public sealed class Ec2EditInstanceShutdownBehavior : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2EditInstanceShutdownBehavior()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Adjust the termination protection of an EC2 Instance
    public sealed class Ec2EditInstanceTerminationProtection : BaseTelemetryEvent
    {
        
        /// Optional - True if turned on, false if turned off
        public System.Boolean? Enabled;
        
        /// The result of the operation
        public Result Result;
        
        public Ec2EditInstanceTerminationProtection()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Adjust the instance type of an EC2 Instance
    public sealed class Ec2EditInstanceType : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2EditInstanceType()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Adjust an EC2 Instance's user data
    public sealed class Ec2EditInstanceUserData : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2EditInstanceUserData()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Alter an EC2 security group permission
    public sealed class Ec2EditSecurityGroupPermission : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2EditSecurityGroupPermission()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Attach (enabled = true) or detach a volume
    public sealed class Ec2EditVolumeAttachment : BaseTelemetryEvent
    {
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        /// The result of the operation
        public Result Result;
        
        public Ec2EditVolumeAttachment()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Save the private key of an EC2 Key Pair out to disk
    public sealed class Ec2ExportPrivateKey : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2ExportPrivateKey()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Store the private key of an EC2 Key Pair in internal storage
    public sealed class Ec2ImportPrivateKey : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2ImportPrivateKey()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Launch an EC2 Instance
    public sealed class Ec2LaunchInstance : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2LaunchInstance()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view EC2 AMIs
    public sealed class Ec2OpenAMIs : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2OpenAMIs()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view EC2 Elastic IPs
    public sealed class Ec2OpenElasticIPs : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2OpenElasticIPs()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view EC2 Instances
    public sealed class Ec2OpenInstances : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2OpenInstances()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open to view EC2 Key pairs
    public sealed class Ec2OpenKeyPairs : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2OpenKeyPairs()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view EC2 Security Groups
    public sealed class Ec2OpenSecurityGroups : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2OpenSecurityGroups()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view EC2 Volumes
    public sealed class Ec2OpenVolumes : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2OpenVolumes()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// View the system log of an EC2 Instance
    public sealed class Ec2ViewInstanceSystemLog : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2ViewInstanceSystemLog()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// View an EC2 Instance's user data
    public sealed class Ec2ViewInstanceUserData : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2ViewInstanceUserData()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when the user copies the repository uri from a node
    public sealed class EcrCopyRepositoryUri : BaseTelemetryEvent
    {
        
        public EcrCopyRepositoryUri()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when the user copies the repository tag uri from a node. The tag uri is the repository uri + : + the tag name
    public sealed class EcrCopyTagUri : BaseTelemetryEvent
    {
        
        public EcrCopyTagUri()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when creating a new ECR repository
    public sealed class EcrCreateRepository : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcrCreateRepository()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when deleting an existing ECR repository
    public sealed class EcrDeleteRepository : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcrDeleteRepository()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when deleting a tag in an ECR repository. The operation is a batch operation by default, value represents the number of tags deleted.
    public sealed class EcrDeleteTags : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcrDeleteTags()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when deploying an image to ECR
    public sealed class EcrDeployImage : BaseTelemetryEvent
    {
        
        /// Optional - The source content specified in the ECR deployment request
        public EcrDeploySource? EcrDeploySource;
        
        /// The result of the operation
        public Result Result;
        
        public EcrDeployImage()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete an ECS cluster
    public sealed class EcsDeleteCluster : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcsDeleteCluster()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete ECS Scheduled task(s)
    public sealed class EcsDeleteScheduledTask : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcsDeleteScheduledTask()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when user deletes an ECS service
    public sealed class EcsDeleteService : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcsDeleteService()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when deploying a scheduled task to an ECS cluster
    public sealed class EcsDeployScheduledTask : BaseTelemetryEvent
    {
        
        /// Infrastructure type used by ECS tasks and services
        public EcsLaunchType EcsLaunchType;
        
        /// The result of the operation
        public Result Result;
        
        public EcsDeployScheduledTask()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when deploying a service to an ECS cluster
    public sealed class EcsDeployService : BaseTelemetryEvent
    {
        
        /// Infrastructure type used by ECS tasks and services
        public EcsLaunchType EcsLaunchType;
        
        /// The result of the operation
        public Result Result;
        
        public EcsDeployService()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when deploying a task to an ECS cluster
    public sealed class EcsDeployTask : BaseTelemetryEvent
    {
        
        /// Infrastructure type used by ECS tasks and services
        public EcsLaunchType EcsLaunchType;
        
        /// The result of the operation
        public Result Result;
        
        public EcsDeployTask()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when ECS execute command is disabled
    public sealed class EcsDisableExecuteCommand : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcsDisableExecuteCommand()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Edit configuration of an ECS service
    public sealed class EcsEditService : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcsEditService()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when ECS execute command is enabled
    public sealed class EcsEnableExecuteCommand : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcsEnableExecuteCommand()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open to view status of an ECS Cluster
    public sealed class EcsOpenCluster : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcsOpenCluster()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open to view status of an ECS Repository
    public sealed class EcsOpenRepository : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcsOpenRepository()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when user completes the ECS publish wizard
    public sealed class EcsPublishWizard : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcsPublishWizard()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when the ECS execute command is run
    public sealed class EcsRunExecuteCommand : BaseTelemetryEvent
    {
        
        /// Type of execution selected while running the execute command
        public EcsExecuteCommandType EcsExecuteCommandType;
        
        /// The result of the operation
        public Result Result;
        
        public EcsRunExecuteCommand()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Stop ECS task(s)
    public sealed class EcsStopTask : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcsStopTask()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called while submitting in-IDE feedback
    public sealed class FeedbackResult : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public FeedbackResult()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Use authoring features such as autocompletion, syntax checking, and highlighting, for AWS filetypes (CFN, SAM, etc.). Emit this _once_ per file-editing session for a given file. For generic code files see `ide_editCodeFile`.
    public sealed class FileEditAwsFile : BaseTelemetryEvent
    {
        
        /// AWS filetype kind
        public AwsFiletype AwsFiletype;
        
        /// Optional - Filename extension (examples: .txt, .yml, .yaml, .asl.yaml, ...), or empty string if the filename does not contain dot (.) between two chars.
        public string FilenameExt;
        
        /// The result of the operation
        public Result Result;
        
        public FileEditAwsFile()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create an IAM resource
    public sealed class IamCreate : BaseTelemetryEvent
    {
        
        /// The type of IAM resource referenced by a metric or operation
        public IamResourceType IamResourceType;
        
        /// The result of the operation
        public Result Result;
        
        public IamCreate()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create Access Key for an IAM user
    public sealed class IamCreateUserAccessKey : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public IamCreateUserAccessKey()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete an IAM resource
    public sealed class IamDelete : BaseTelemetryEvent
    {
        
        /// The type of IAM resource referenced by a metric or operation
        public IamResourceType IamResourceType;
        
        /// The result of the operation
        public Result Result;
        
        public IamDelete()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete Access Key for an IAM user
    public sealed class IamDeleteUserAccessKey : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public IamDeleteUserAccessKey()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Edits policy/configuration associated with an IAM resource
    public sealed class IamEdit : BaseTelemetryEvent
    {
        
        /// The type of IAM resource referenced by a metric or operation
        public IamResourceType IamResourceType;
        
        /// The result of the operation
        public Result Result;
        
        public IamEdit()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view/edit an IAM resource
    public sealed class IamOpen : BaseTelemetryEvent
    {
        
        /// The type of IAM resource referenced by a metric or operation
        public IamResourceType IamResourceType;
        
        /// The result of the operation
        public Result Result;
        
        public IamOpen()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view/edit IAM Group Policy
    public sealed class IamOpenGroup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public IamOpenGroup()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view/edit IAM Role Policy
    public sealed class IamOpenRole : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public IamOpenRole()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view/edit IAM User Configuration
    public sealed class IamOpenUser : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public IamOpenUser()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User opened a code file with the given file extension. Client should DEDUPLICATE this metric (ideally hourly/daily). AWS-specific files should (also) emit `file_editAwsFile`.
    public sealed class IdeEditCodeFile : BaseTelemetryEvent
    {
        
        /// Optional - Filename extension (examples: .txt, .yml, .yaml, .asl.yaml, ...), or empty string if the filename does not contain dot (.) between two chars.
        public string FilenameExt;
        
        public IdeEditCodeFile()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when opening the local configuration of a Lambda to edit
    public sealed class LambdaConfigure : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public LambdaConfigure()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when creating lambdas remotely
    public sealed class LambdaCreate : BaseTelemetryEvent
    {
        
        /// The lambda runtime
        public Runtime Runtime;
        
        public LambdaCreate()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when creating a lambda project
    public sealed class LambdaCreateProject : BaseTelemetryEvent
    {
        
        /// Language used for the project.
        public string Language;
        
        /// The result of the operation
        public Result Result;
        
        /// Generic name of a template
        public string TemplateName;
        
        /// Optional - A generic variant metadata
        public string Variant;
        
        public LambdaCreateProject()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// called when deleting lambdas remotely
    public sealed class LambdaDelete : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public LambdaDelete()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when deploying a Lambda Function
    public sealed class LambdaDeploy : BaseTelemetryEvent
    {
        
        /// Whether or not the deploy targets a new destination (true) or an existing destination (false)
        public bool InitialDeploy;
        
        /// Optional - Lambda architecture identifier
        public LambdaArchitecture? LambdaArchitecture;
        
        /// The Lambda Package type of the function
        public LambdaPackageType LambdaPackageType;
        
        /// Optional - Language used for the project.
        public string Language;
        
        /// Optional - Language-specific identification. Examples: v4.6.1, netcoreapp3.1, nodejs12.x. Not AWS Lambda specific. Allows for additional details when other fields are opaque, such as the Lambda runtime value 'provided'.
        public string Platform;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        /// Optional - The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        /// Optional - The source of the operation
        public string Source;
        
        /// Optional - Whether or not AWS X-Ray is enabled
        public System.Boolean? XrayEnabled;
        
        public LambdaDeploy()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when creating lambdas remotely
    public sealed class LambdaEditFunction : BaseTelemetryEvent
    {
        
        /// The Lambda Package type of the function
        public LambdaPackageType LambdaPackageType;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - If the operation was an update or not
        public System.Boolean? Update;
        
        public LambdaEditFunction()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Jump to a lambda handler from elsewhere
    public sealed class LambdaGoToHandler : BaseTelemetryEvent
    {
        
        /// Optional - The source of the operation
        public string Source;
        
        public LambdaGoToHandler()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when importing a remote Lambda function
    public sealed class LambdaImport : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        public LambdaImport()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when invoking lambdas locally (with SAM in most toolkits)
    public sealed class LambdaInvokeLocal : BaseTelemetryEvent
    {
        
        /// If the action was run in debug mode or not
        public bool Debug;
        
        /// Optional - Lambda architecture identifier
        public LambdaArchitecture? LambdaArchitecture;
        
        /// The Lambda Package type of the function
        public LambdaPackageType LambdaPackageType;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        /// Optional - The source of the operation
        public string Source;
        
        /// Optional - A generic version metadata
        public string Version;
        
        public LambdaInvokeLocal()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when invoking lambdas remotely
    public sealed class LambdaInvokeRemote : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        /// Optional - The source of the operation
        public string Source;
        
        public LambdaInvokeRemote()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when user completes the Lambda publish wizard
    public sealed class LambdaPublishWizard : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client, or look for serviceId in metadata in the service2.json
        public string ServiceType;
        
        /// Optional - The source of the operation
        public string Source;
        
        public LambdaPublishWizard()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when updating a Lambda function's code outside the context of a SAM template
    public sealed class LambdaUpdateFunctionCode : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        public LambdaUpdateFunctionCode()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when creating a new database connection configuration to for a RDS database. In Datagrip we do not get this infromation if it is created directly, so this is only counts actions.
    public sealed class RdsCreateConnectionConfiguration : BaseTelemetryEvent
    {
        
        /// How the database credentials are being retrieved
        public DatabaseCredentials DatabaseCredentials;
        
        /// Optional - The database engine used (mysql/postgres/redshift)
        public string DatabaseEngine;
        
        /// The result of the operation
        public Result Result;
        
        public RdsCreateConnectionConfiguration()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create a RDS security group
    public sealed class RdsCreateSecurityGroup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public RdsCreateSecurityGroup()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create a RDS subnet group
    public sealed class RdsCreateSubnetGroup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public RdsCreateSubnetGroup()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete a RDS DB instance
    public sealed class RdsDeleteInstance : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public RdsDeleteInstance()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete RDS security group(s)
    public sealed class RdsDeleteSecurityGroup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public RdsDeleteSecurityGroup()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete RDS subnet group(s)
    public sealed class RdsDeleteSubnetGroup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public RdsDeleteSubnetGroup()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when getting IAM/SecretsManager credentials for a RDS database. Value represents how long it takes in ms.
    public sealed class RdsGetCredentials : BaseTelemetryEvent
    {
        
        /// How the database credentials are being retrieved
        public DatabaseCredentials DatabaseCredentials;
        
        /// The database engine used (mysql/postgres/redshift)
        public string DatabaseEngine;
        
        /// The result of the operation
        public Result Result;
        
        public RdsGetCredentials()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Launch a RDS DB instance
    public sealed class RdsLaunchInstance : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public RdsLaunchInstance()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view RDS DB Instances
    public sealed class RdsOpenInstances : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public RdsOpenInstances()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view RDS Security Groups
    public sealed class RdsOpenSecurityGroups : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public RdsOpenSecurityGroups()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view RDS Subnet Groups
    public sealed class RdsOpenSubnets : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public RdsOpenSubnets()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when creating a new database connection configuration to for a Redshift database. In Datagrip we do not get this infromation if it is created directly, so this only counts actions.
    public sealed class RedshiftCreateConnectionConfiguration : BaseTelemetryEvent
    {
        
        /// How the database credentials are being retrieved
        public DatabaseCredentials DatabaseCredentials;
        
        /// The result of the operation
        public Result Result;
        
        public RedshiftCreateConnectionConfiguration()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when getting IAM/SecretsManager credentials for a Redshift database. Value represents how long it takes in ms.
    public sealed class RedshiftGetCredentials : BaseTelemetryEvent
    {
        
        /// How the database credentials are being retrieved
        public DatabaseCredentials DatabaseCredentials;
        
        /// The result of the operation
        public Result Result;
        
        public RedshiftGetCredentials()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Copy the bucket name to the clipboard
    public sealed class S3CopyBucketName : BaseTelemetryEvent
    {
        
        public S3CopyBucketName()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Copy the path of a S3 object to the clipboard
    public sealed class S3CopyPath : BaseTelemetryEvent
    {
        
        public S3CopyPath()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Copy the S3 URI of a S3 object to the clipboard (e.g. s3://<bucketName>/abc.txt)
    public sealed class S3CopyUri : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3CopyUri()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Copy the URL of a S3 object to the clipboard
    public sealed class S3CopyUrl : BaseTelemetryEvent
    {
        
        /// Whether or not it was a presigned request
        public bool Presigned;
        
        /// The result of the operation
        public Result Result;
        
        public S3CopyUrl()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create a S3 bucket
    public sealed class S3CreateBucket : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3CreateBucket()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create an S3 folder
    public sealed class S3CreateFolder : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3CreateFolder()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete a S3 bucket
    public sealed class S3DeleteBucket : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3DeleteBucket()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete S3 object(s)
    public sealed class S3DeleteObject : BaseTelemetryEvent
    {
        
        /// Optional - The number of failed operations
        public System.Int32? FailedCount;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The number of successful operations
        public System.Int32? SuccessCount;
        
        public S3DeleteObject()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Download S3 object(s)
    public sealed class S3DownloadObject : BaseTelemetryEvent
    {
        
        /// Optional - The IDE or OS component used for the action. (Examples: S3 download to filesystem, S3 upload from editor, ...).  See also `featureId` for specific feature names, `module` for low-level modules, and `resourceType`.
        public Component? Component;
        
        /// Optional - The number of failed operations
        public System.Int32? FailedCount;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The number of successful operations
        public System.Int32? SuccessCount;
        
        public S3DownloadObject()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Download multiple S3 objects
    public sealed class S3DownloadObjects : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3DownloadObjects()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Edit or view one or more S3 objects in the IDE
    public sealed class S3EditObject : BaseTelemetryEvent
    {
        
        /// Optional - The IDE or OS component used for the action. (Examples: S3 download to filesystem, S3 upload from editor, ...).  See also `featureId` for specific feature names, `module` for low-level modules, and `resourceType`.
        public Component? Component;
        
        /// The result of the operation
        public Result Result;
        
        public S3EditObject()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view S3 bucket properties
    public sealed class S3OpenBucketProperties : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3OpenBucketProperties()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a view of a S3 bucket
    public sealed class S3OpenEditor : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3OpenEditor()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view S3 Multipart upload
    public sealed class S3OpenMultipartUpload : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3OpenMultipartUpload()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Rename a single S3 object
    public sealed class S3RenameObject : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3RenameObject()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Upload S3 object(s)
    public sealed class S3UploadObject : BaseTelemetryEvent
    {
        
        /// Optional - The IDE or OS component used for the action. (Examples: S3 download to filesystem, S3 upload from editor, ...).  See also `featureId` for specific feature names, `module` for low-level modules, and `resourceType`.
        public Component? Component;
        
        /// Optional - The number of failed operations
        public System.Int32? FailedCount;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The number of successful operations
        public System.Int32? SuccessCount;
        
        public S3UploadObject()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Upload multiple S3 objects
    public sealed class S3UploadObjects : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3UploadObjects()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when building a SAM application
    public sealed class SamBuild : BaseTelemetryEvent
    {
        
        /// Optional - The Lambda Package type of the function
        public LambdaPackageType? LambdaPackageType;
        
        /// Optional - The source of the operation
        public string Source;
        
        /// Optional - A generic version metadata
        public string Version;
        
        public SamBuild()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when deploying a SAM application
    public sealed class SamDeploy : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The source of the operation
        public string Source;
        
        /// Optional - A generic version metadata
        public string Version;
        
        public SamDeploy()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when checking if the SAM executable on the local machine is valid with a valid version
    public sealed class SamInfo : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - A generic version metadata
        public string Version;
        
        public SamInfo()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when initing a SAM application
    public sealed class SamInit : BaseTelemetryEvent
    {
        
        /// Optional - The name of the EventBridge Schema used in the operation
        public string EventBridgeSchema;
        
        /// Optional - Lambda architecture identifier
        public LambdaArchitecture? LambdaArchitecture;
        
        /// Optional - The Lambda Package type of the function
        public LambdaPackageType? LambdaPackageType;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        /// Optional - Generic name of a template
        public string TemplateName;
        
        /// Optional - A generic version metadata
        public string Version;
        
        public SamInit()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when syncing a SAM application
    public sealed class SamSync : BaseTelemetryEvent
    {
        
        /// Optional - The Lambda Package type of the function
        public LambdaPackageType? LambdaPackageType;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The source of the operation
        public string Source;
        
        /// Describes which parts of an application (that we know of) were synced to the cloud. "Code" resources follow the SAM spec: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-cli-command-reference-sam-sync.html
        public SyncedResources SyncedResources;
        
        /// Optional - A generic version metadata
        public string Version;
        
        public SamSync()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when downloading an EventBridge schema
    public sealed class SchemasDownload : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - Languages targeted by the schemas service
        public SchemaLanguage? SchemaLanguage;
        
        public SchemasDownload()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when searching an EventBridge schema registry
    public sealed class SchemasSearch : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public SchemasSearch()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when selecting an EventBridge schema to view
    public sealed class SchemasView : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public SchemasView()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when stopping the IDE on a best effort basis
    public sealed class SessionEnd : BaseTelemetryEvent
    {
        
        public SessionEnd()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when starting the plugin
    public sealed class SessionStart : BaseTelemetryEvent
    {
        
        public SessionStart()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Create a SNS Subscription
    public sealed class SnsCreateSubscription : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public SnsCreateSubscription()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create a SNS Topic
    public sealed class SnsCreateTopic : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public SnsCreateTopic()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when user deletes SNS subscription(s)
    public sealed class SnsDeleteSubscription : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public SnsDeleteSubscription()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when user deletes a SNS Topic
    public sealed class SnsDeleteTopic : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public SnsDeleteTopic()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view SNS Subscriptions
    public sealed class SnsOpenSubscriptions : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public SnsOpenSubscriptions()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view details of SNS Topic
    public sealed class SnsOpenTopic : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public SnsOpenTopic()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Publish message to a SNS topic
    public sealed class SnsPublishMessage : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public SnsPublishMessage()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Configure the queue as a trigger for a Lambda
    public sealed class SqsConfigureLambdaTrigger : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsConfigureLambdaTrigger()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Create a new SQS queue
    public sealed class SqsCreateQueue : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The type of an SQS Queue
        public SqsQueueType? SqsQueueType;
        
        public SqsCreateQueue()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Delete one or more messages from an SQS queue. Value indicates the number of messages that we tried to delete.
    public sealed class SqsDeleteMessages : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsDeleteMessages()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called when user deletes a SQS queue
    public sealed class SqsDeleteQueue : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The type of an SQS Queue
        public SqsQueueType? SqsQueueType;
        
        public SqsDeleteQueue()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Edit the Queue parameters
    public sealed class SqsEditQueueParameters : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsEditQueueParameters()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open an SQS queue. Initially opens to either the send message pane or poll messages pane.
    public sealed class SqsOpenQueue : BaseTelemetryEvent
    {
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsOpenQueue()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Purge all messages from the queue
    public sealed class SqsPurgeQueue : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsPurgeQueue()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Send a message to an SQS queue
    public sealed class SqsSendMessage : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsSendMessage()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Subscribe the queue to messages from an sns topic
    public sealed class SqsSubscribeSns : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsSubscribeSns()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after closing a threat composer file
    public sealed class ThreatComposerClosed : BaseTelemetryEvent
    {
        
        /// Metric-defined identifier
        public string Id;
        
        public ThreatComposerClosed()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after a new threat composer file is created using command pallet or New File option
    public sealed class ThreatComposerCreated : BaseTelemetryEvent
    {
        
        /// Metric-defined identifier
        public string Id;
        
        public ThreatComposerCreated()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after an error is thrown from the threat composer view
    public sealed class ThreatComposerError : BaseTelemetryEvent
    {
        
        /// Metric-defined identifier
        public string Id;
        
        public ThreatComposerError()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after a threat composer file has been saved
    public sealed class ThreatComposerFileSaved : BaseTelemetryEvent
    {
        
        /// Metric-defined identifier
        public string Id;
        
        /// Type of save executed
        public SaveType SaveType;
        
        public ThreatComposerFileSaved()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Called after opening a threat composer file
    public sealed class ThreatComposerOpened : BaseTelemetryEvent
    {
        
        /// Metric-defined identifier
        public string Id;
        
        public ThreatComposerOpened()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// The user closed 'something' (specified by 'module'). Examples: a view, feature, resource, ...
    public sealed class ToolkitCloseModule : BaseTelemetryEvent
    {
        
        /// Free-form module name for both high-level features such as "PublishToAWS", and lower-level modules such as "ToolkitContextProvider". Use `component` for UI components, or `featureId` for specific feature names. See also `resourceType`.
        public string Module;
        
        public ToolkitCloseModule()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Represents the current enabled state of a feature. Used to track user journey through a feature. Emitted after feature-specific operations of interest in the Toolkit.
    public sealed class ToolkitFeatureState : BaseTelemetryEvent
    {
        
        /// Optional - Status of the an auth connection.
        public AuthStatus? AuthStatus;
        
        /// Optional - Where credentials are stored or retrieved from
        public CredentialSourceId? CredentialSourceId;
        
        /// Optional - The type of credential that was selected
        public CredentialType? CredentialType;
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        /// The id of the feature the user is interacting in. See also: `component`, `featureId`, `module`, `resourceType`.
        public FeatureId FeatureId;
        
        /// The source of the operation
        public string Source;
        
        public ToolkitFeatureState()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// The toolkit tried to retrieve blob data from a url
    public sealed class ToolkitGetExternalResource : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The url associated with a metric
        public string Url;
        
        public ToolkitGetExternalResource()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// The Toolkit has completed initialization
    public sealed class ToolkitInit : BaseTelemetryEvent
    {
        
        /// Optional - The result of the operation
        public Result? Result;
        
        public ToolkitInit()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// The Toolkit has completed initialization for the specified module.
    public sealed class ToolkitInitModule : BaseTelemetryEvent
    {
        
        /// Optional - A generic number of attempts
        public System.Int32? Attempts;
        
        /// Free-form module name for both high-level features such as "PublishToAWS", and lower-level modules such as "ToolkitContextProvider". Use `component` for UI components, or `featureId` for specific feature names. See also `resourceType`.
        public string Module;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - A generic version metadata
        public string Version;
        
        public ToolkitInitModule()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// User invoked an action. `source` is the notification that produced the action
    public sealed class ToolkitInvokeAction : BaseTelemetryEvent
    {
        
        /// Name of an action that was taken, displayed, etc. See also `userChoice`.
        public string Action;
        
        /// The IDE or OS component used for the action. (Examples: S3 download to filesystem, S3 upload from editor, ...).  See also `featureId` for specific feature names, `module` for low-level modules, and `resourceType`.
        public Component Component;
        
        /// Metric-defined identifier
        public string Id;
        
        /// The result of the operation
        public Result Result;
        
        /// The source of the operation
        public string Source;
        
        public ToolkitInvokeAction()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User opened 'something' (specified by 'module'). Examples: a view, feature, resource, ...
    public sealed class ToolkitOpenModule : BaseTelemetryEvent
    {
        
        /// Free-form module name for both high-level features such as "PublishToAWS", and lower-level modules such as "ToolkitContextProvider". Use `component` for UI components, or `featureId` for specific feature names. See also `resourceType`.
        public string Module;
        
        /// The result of the operation
        public Result Result;
        
        /// The source of the operation
        public string Source;
        
        public ToolkitOpenModule()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Toolkit presented an action. `source` is the notification that produced the action. See also `toolkit_showNotification`.
    public sealed class ToolkitShowAction : BaseTelemetryEvent
    {
        
        /// The IDE or OS component used for the action. (Examples: S3 download to filesystem, S3 upload from editor, ...).  See also `featureId` for specific feature names, `module` for low-level modules, and `resourceType`.
        public Component Component;
        
        /// Metric-defined identifier
        public string Id;
        
        /// The result of the operation
        public Result Result;
        
        /// The source of the operation
        public string Source;
        
        public ToolkitShowAction()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Show a notification message, optionally with selected action set in `userChoice`. See also `toolkit_showAction`.
    public sealed class ToolkitShowNotification : BaseTelemetryEvent
    {
        
        /// The IDE or OS component used for the action. (Examples: S3 download to filesystem, S3 upload from editor, ...).  See also `featureId` for specific feature names, `module` for low-level modules, and `resourceType`.
        public Component Component;
        
        /// Metric-defined identifier
        public string Id;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - User selection from a predefined menu (not user-provided input). See also `action`.
        public string UserChoice;
        
        public ToolkitShowNotification()
        {
            this.Passive = true;
            this.TrackPerformance = false;
        }
    }
    
    /// Generic metric for tracking arbitrary scenarios that are not yet formalized into a full metric.
    public sealed class ToolkitTrackScenario : BaseTelemetryEvent
    {
        
        /// Uniquely identifies a message with which the user interacts.
        public string AmazonqConversationId;
        
        /// Number of occurrences a metric, or some other metric-defined count.
        public int Count;
        
        /// Optional - The start URL of current SSO connection
        public string CredentialStartUrl;
        
        /// Scenarios to count in telemetry
        public string Scenario;
        
        public ToolkitTrackScenario()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// View logs for the toolkit
    public sealed class ToolkitViewLogs : BaseTelemetryEvent
    {
        
        public ToolkitViewLogs()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// User clicked/activated a UI element. This does not necessarily have to be an explicit mouse click. Any user action that has the same behavior as a mouse click can use this event.
    public sealed class UiClick : BaseTelemetryEvent
    {
        
        /// An identifier associated with a UI element
        public string ElementId;
        
        public UiClick()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view VPC Network ACLs
    public sealed class VpcOpenACLs : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public VpcOpenACLs()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view VPC Internet Gateway
    public sealed class VpcOpenGateways : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public VpcOpenGateways()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view VPC RouteTable
    public sealed class VpcOpenRouteTables : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public VpcOpenRouteTables()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view VPC Subnets
    public sealed class VpcOpenSubnets : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public VpcOpenSubnets()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
    
    /// Open a window to view VPC details
    public sealed class VpcOpenVPCs : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public VpcOpenVPCs()
        {
            this.Passive = false;
            this.TrackPerformance = false;
        }
    }
}
