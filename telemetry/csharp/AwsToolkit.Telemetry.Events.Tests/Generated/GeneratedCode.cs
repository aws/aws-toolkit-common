//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Amazon.AwsToolkit.Telemetry.Events.Core;
using System;
using System.Collections.Generic;

/// --------------------------------------------------------------------------------
/// This file is generated from https://github.com/aws/aws-toolkit-common/tree/master/telemetry
/// --------------------------------------------------------------------------------

namespace Amazon.AwsToolkit.Telemetry.Events.Generated
{
    
    
    /// Contains methods to record telemetry events
    public static partial class ToolkitTelemetryEvent
    {
        
        /// Records Telemetry Event:
        /// Copying an API Gateway remote URL
        public static void RecordApigatewayCopyUrl(this ITelemetryLogger telemetryLogger, ApigatewayCopyUrl payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apigateway_copyUrl";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Invoking one simulated API Gateway call using the SAM cli
        public static void RecordApigatewayInvokeLocal(this ITelemetryLogger telemetryLogger, ApigatewayInvokeLocal payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apigateway_invokeLocal";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum.AddMetadata("httpMethod", payload.HttpMethod);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("debug", payload.Debug);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Calling a remote API Gateway
        public static void RecordApigatewayInvokeRemote(this ITelemetryLogger telemetryLogger, ApigatewayInvokeRemote payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apigateway_invokeRemote";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("httpMethod", payload.HttpMethod);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when starting a local API Gateway server simulator with SAM. Only called when starting it for long running testing, not for single invokes
        public static void RecordApigatewayStartLocalServer(this ITelemetryLogger telemetryLogger, ApigatewayStartLocalServer payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "apigateway_startLocalServer";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the ARN of an AWS resource
        public static void RecordAwsCopyArn(this ITelemetryLogger telemetryLogger, AwsCopyArn payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_copyArn";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("serviceType", payload.ServiceType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete an AWS resource
        public static void RecordAwsDeleteResource(this ITelemetryLogger telemetryLogger, AwsDeleteResource payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_deleteResource";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("serviceType", payload.ServiceType);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Select a credentials profile
        public static void RecordAwsSetCredentials(this ITelemetryLogger telemetryLogger, AwsSetCredentials payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_setCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                if (payload.CredentialType.HasValue)
                {
                    datum.AddMetadata("credentialType", payload.CredentialType.Value);
                }

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// A region change occurred
        public static void RecordAwsSetRegion(this ITelemetryLogger telemetryLogger, AwsSetRegion payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_setRegion";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("regionId", payload.RegionId);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// A partition change occurred
        public static void RecordAwsSetPartition(this ITelemetryLogger telemetryLogger, AwsSetPartition payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_setPartition";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("partitionId", payload.PartitionId);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open the credentials file
        public static void RecordAwsOpenCredentials(this ITelemetryLogger telemetryLogger, AwsOpenCredentials payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_openCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Load credentials from a credential source
        public static void RecordAwsLoadCredentials(this ITelemetryLogger telemetryLogger, AwsLoadCredentials payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_loadCredentials";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("credentialSourceId", payload.CredentialSourceId);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create a new credentials file
        public static void RecordAwsCreateCredentials(this ITelemetryLogger telemetryLogger, AwsCreateCredentials payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_createCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Inject selected AWS credentials into a third-party run (e.g. RunConfiguration)
        public static void RecordAwsInjectCredentials(this ITelemetryLogger telemetryLogger, AwsInjectCredentials payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_injectCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("runtimeString", payload.RuntimeString);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Validate credentials when selecting new credentials
        public static void RecordAwsValidateCredentials(this ITelemetryLogger telemetryLogger, AwsValidateCredentials payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_validateCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                if (payload.CredentialType.HasValue)
                {
                    datum.AddMetadata("credentialType", payload.CredentialType.Value);
                }

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open docs for the extension
        public static void RecordAwsHelp(this ITelemetryLogger telemetryLogger, AwsHelp payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_help";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open the quickstart guide
        public static void RecordAwsHelpQuickstart(this ITelemetryLogger telemetryLogger, AwsHelpQuickstart payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_helpQuickstart";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open the repo for the extension
        public static void RecordAwsShowExtensionSource(this ITelemetryLogger telemetryLogger, AwsShowExtensionSource payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_showExtensionSource";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Refresh the AWS explorer window
        public static void RecordAwsRefreshExplorer(this ITelemetryLogger telemetryLogger, AwsRefreshExplorer payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_refreshExplorer";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Report an issue with the plugin
        public static void RecordAwsReportPluginIssue(this ITelemetryLogger telemetryLogger, AwsReportPluginIssue payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "aws_reportPluginIssue";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying an application to Elastic Beanstalk
        public static void RecordBeanstalkDeploy(this ITelemetryLogger telemetryLogger, BeanstalkDeploy payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "beanstalk_deploy";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("regionId", payload.RegionId);

                datum.AddMetadata("initialDeploy", payload.InitialDeploy);

                datum.AddMetadata("name", payload.Name);

                datum.AddMetadata("framework", payload.Framework);

                if (payload.XrayEnabled.HasValue)
                {
                    datum.AddMetadata("xrayEnabled", payload.XrayEnabled.Value);
                }

                if (payload.EnhancedHealthEnabled.HasValue)
                {
                    datum.AddMetadata("enhancedHealthEnabled", payload.EnhancedHealthEnabled.Value);
                }

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view the status of the Beanstalk Application
        public static void RecordBeanstalkOpenApplication(this ITelemetryLogger telemetryLogger, BeanstalkOpenApplication payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "beanstalk_openApplication";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view the status of the Beanstalk Environment
        public static void RecordBeanstalkOpenEnvironment(this ITelemetryLogger telemetryLogger, BeanstalkOpenEnvironment payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "beanstalk_openEnvironment";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view the status of the CloudFront Distribution
        public static void RecordCloudfrontOpenDistribution(this ITelemetryLogger telemetryLogger, CloudfrontOpenDistribution payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudfront_openDistribution";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view the status of the CloudFront Streaming Distribution
        public static void RecordCloudfrontOpenStreamingDistribution(this ITelemetryLogger telemetryLogger, CloudfrontOpenStreamingDistribution payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudfront_openStreamingDistribution";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view the Cloudfront Invalidation requests
        public static void RecordCloudfrontOpenInvalidationRequest(this ITelemetryLogger telemetryLogger, CloudfrontOpenInvalidationRequest payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudfront_openInvalidationRequest";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open the CloudWatch Logs group window. ServiceType indicates that it was opened from a different service (like directly from an ECS container)
        public static void RecordCloudwatchlogsOpenGroup(this ITelemetryLogger telemetryLogger, CloudwatchlogsOpenGroup payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_openGroup";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                if (payload.ServiceType.HasValue)
                {
                    datum.AddMetadata("serviceType", payload.ServiceType.Value);
                }

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a CloudWatch Logs stream in the window. ServiceType indicates that it was opened from a different service (like directly from an ECS container)
        public static void RecordCloudwatchlogsOpenStream(this ITelemetryLogger telemetryLogger, CloudwatchlogsOpenStream payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_openStream";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                if (payload.ServiceType.HasValue)
                {
                    datum.AddMetadata("serviceType", payload.ServiceType.Value);
                }

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Download a stream to a file on disk. Value indicates the final size of the formatted stream.
        public static void RecordCloudwatchlogsDownloadStreamToFile(this ITelemetryLogger telemetryLogger, CloudwatchlogsDownloadStreamToFile payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_downloadStreamToFile";
                datum.Unit = Unit.Bytes;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Download a stream to memory then open in an editor.
        public static void RecordCloudwatchlogsOpenStreamInEditor(this ITelemetryLogger telemetryLogger, CloudwatchlogsOpenStreamInEditor payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_openStreamInEditor";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the currently open (possibly filtered) messages to an editor
        public static void RecordCloudwatchlogsViewCurrentMessagesInEditor(this ITelemetryLogger telemetryLogger, CloudwatchlogsViewCurrentMessagesInEditor payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_viewCurrentMessagesInEditor";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Word wrap events off/on
        public static void RecordCloudwatchlogsWrapEvents(this ITelemetryLogger telemetryLogger, CloudwatchlogsWrapEvents payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_wrapEvents";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("enabled", payload.Enabled);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Tail stream off/on
        public static void RecordCloudwatchlogsTailStream(this ITelemetryLogger telemetryLogger, CloudwatchlogsTailStream payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_tailStream";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("enabled", payload.Enabled);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Refresh group is pressed
        public static void RecordCloudwatchlogsRefreshGroup(this ITelemetryLogger telemetryLogger, CloudwatchlogsRefreshGroup payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_refreshGroup";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Refresh stream is pressed
        public static void RecordCloudwatchlogsRefreshStream(this ITelemetryLogger telemetryLogger, CloudwatchlogsRefreshStream payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_refreshStream";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when a stream is searched
        public static void RecordCloudwatchlogsSearchStream(this ITelemetryLogger telemetryLogger, CloudwatchlogsSearchStream payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_searchStream";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when a group is searched
        public static void RecordCloudwatchlogsSearchGroup(this ITelemetryLogger telemetryLogger, CloudwatchlogsSearchGroup payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_searchGroup";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Show event around a time period in ms specified by Value
        public static void RecordCloudwatchlogsShowEventsAround(this ITelemetryLogger telemetryLogger, CloudwatchlogsShowEventsAround payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchlogs_showEventsAround";
                datum.Unit = Unit.Milliseconds;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying a CloudFormation template
        public static void RecordCloudformationDeploy(this ITelemetryLogger telemetryLogger, CloudformationDeploy payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudformation_deploy";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("regionId", payload.RegionId);

                datum.AddMetadata("initialDeploy", payload.InitialDeploy);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a CloudFormation stack in the stack viewer
        public static void RecordCloudformationOpen(this ITelemetryLogger telemetryLogger, CloudformationOpen payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudformation_open";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// A repo is cloned from CodeCommit
        public static void RecordCodecommitCloneRepo(this ITelemetryLogger telemetryLogger, CodecommitCloneRepo payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codecommit_cloneRepo";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// A repo is created in CodeCommit
        public static void RecordCodecommitCreateRepo(this ITelemetryLogger telemetryLogger, CodecommitCreateRepo payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codecommit_createRepo";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// A connection is established to CodeCommit to perform actions on repos
        public static void RecordCodecommitSetCredentials(this ITelemetryLogger telemetryLogger, CodecommitSetCredentials payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "codecommit_setCredentials";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                if (payload.CredentialType.HasValue)
                {
                    datum.AddMetadata("credentialType", payload.CredentialType.Value);
                }

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a DynamoDB table in the table browser
        public static void RecordDynamodbOpenTable(this ITelemetryLogger telemetryLogger, DynamodbOpenTable payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "dynamodb_openTable";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view EC2 Instances
        public static void RecordEc2OpenInstances(this ITelemetryLogger telemetryLogger, Ec2OpenInstances payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_openInstances";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view EC2 AMIs
        public static void RecordEc2OpenAMIs(this ITelemetryLogger telemetryLogger, Ec2OpenAMIs payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_openAMIs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view EC2 Elastic IPs
        public static void RecordEc2OpenElasticIPs(this ITelemetryLogger telemetryLogger, Ec2OpenElasticIPs payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_openElasticIPs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open to view EC2 Key pairs
        public static void RecordEc2OpenKeyPairs(this ITelemetryLogger telemetryLogger, Ec2OpenKeyPairs payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_openKeyPairs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view EC2 Security Groups
        public static void RecordEc2OpenSecurityGroups(this ITelemetryLogger telemetryLogger, Ec2OpenSecurityGroups payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_openSecurityGroups";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view EC2 Volumes
        public static void RecordEc2OpenVolumes(this ITelemetryLogger telemetryLogger, Ec2OpenVolumes payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ec2_openVolumes";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open to view status of an ECS Cluster
        public static void RecordEcsOpenCluster(this ITelemetryLogger telemetryLogger, EcsOpenCluster payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_openCluster";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when the user copies the repository uri from a node
        public static void RecordEcrCopyRepositoryUri(this ITelemetryLogger telemetryLogger, EcrCopyRepositoryUri payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecr_copyRepositoryUri";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when the user copies the repository tag uri from a node. The tag uri is the repository uri + : + the tag name
        public static void RecordEcrCopyTagUri(this ITelemetryLogger telemetryLogger, EcrCopyTagUri payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecr_copyTagUri";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when creating a new ECR repository
        public static void RecordEcrCreateRepository(this ITelemetryLogger telemetryLogger, EcrCreateRepository payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecr_createRepository";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deleting an existing ECR repository
        public static void RecordEcrDeleteRepository(this ITelemetryLogger telemetryLogger, EcrDeleteRepository payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecr_deleteRepository";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deleting a tag in an ECR repository. The operation is a batch operation by default, value represents the number of tags deleted.
        public static void RecordEcrDeleteTags(this ITelemetryLogger telemetryLogger, EcrDeleteTags payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecr_deleteTags";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying an image to ECR
        public static void RecordEcrDeployImage(this ITelemetryLogger telemetryLogger, EcrDeployImage payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecr_deployImage";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("regionId", payload.RegionId);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying a scheduled task to an ECS cluster
        public static void RecordEcsDeployScheduledTask(this ITelemetryLogger telemetryLogger, EcsDeployScheduledTask payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_deployScheduledTask";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("regionId", payload.RegionId);

                datum.AddMetadata("ecsLaunchType", payload.EcsLaunchType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying a service to an ECS cluster
        public static void RecordEcsDeployService(this ITelemetryLogger telemetryLogger, EcsDeployService payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_deployService";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("regionId", payload.RegionId);

                datum.AddMetadata("ecsLaunchType", payload.EcsLaunchType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying a task to an ECS cluster
        public static void RecordEcsDeployTask(this ITelemetryLogger telemetryLogger, EcsDeployTask payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_deployTask";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("regionId", payload.RegionId);

                datum.AddMetadata("ecsLaunchType", payload.EcsLaunchType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open to view status of an ECS Repository
        public static void RecordEcsOpenRepository(this ITelemetryLogger telemetryLogger, EcsOpenRepository payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "ecs_openRepository";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called while submitting in-IDE feedback
        public static void RecordFeedbackResult(this ITelemetryLogger telemetryLogger, FeedbackResult payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "feedback_result";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view/edit IAM Role Policy
        public static void RecordIamOpenRole(this ITelemetryLogger telemetryLogger, IamOpenRole payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "iam_openRole";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view/edit IAM Group Policy
        public static void RecordIamOpenGroup(this ITelemetryLogger telemetryLogger, IamOpenGroup payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "iam_openGroup";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view/edit IAM User Configuration
        public static void RecordIamOpenUser(this ITelemetryLogger telemetryLogger, IamOpenUser payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "iam_openUser";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// called when deleting lambdas remotely
        public static void RecordLambdaDelete(this ITelemetryLogger telemetryLogger, LambdaDelete payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_delete";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("duration", payload.Duration);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when opening the local configuration of a Lambda to edit
        public static void RecordLambdaConfigure(this ITelemetryLogger telemetryLogger, LambdaConfigure payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_configure";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when creating lambdas remotely
        public static void RecordLambdaCreate(this ITelemetryLogger telemetryLogger, LambdaCreate payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_create";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("runtime", payload.Runtime);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Jump to a lambda handler from elsewhere
        public static void RecordLambdaGoToHandler(this ITelemetryLogger telemetryLogger, LambdaGoToHandler payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_goToHandler";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when creating lambdas remotely
        public static void RecordLambdaEditFunction(this ITelemetryLogger telemetryLogger, LambdaEditFunction payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_editFunction";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                if (payload.Update.HasValue)
                {
                    datum.AddMetadata("update", payload.Update.Value);
                }

                datum.AddMetadata("lambdaPackageType", payload.LambdaPackageType);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when invoking lambdas remotely
        public static void RecordLambdaInvokeRemote(this ITelemetryLogger telemetryLogger, LambdaInvokeRemote payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_invokeRemote";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when invoking lambdas locally (with SAM in most toolkits)
        public static void RecordLambdaInvokeLocal(this ITelemetryLogger telemetryLogger, LambdaInvokeLocal payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_invokeLocal";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum.AddMetadata("version", payload.Version);

                datum.AddMetadata("lambdaPackageType", payload.LambdaPackageType);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("debug", payload.Debug);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when importing a remote Lambda function
        public static void RecordLambdaImport(this ITelemetryLogger telemetryLogger, LambdaImport payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_import";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when updating a Lambda function's code outside the context of a SAM template
        public static void RecordLambdaUpdateFunctionCode(this ITelemetryLogger telemetryLogger, LambdaUpdateFunctionCode payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_updateFunctionCode";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying a Lambda Function
        public static void RecordLambdaDeploy(this ITelemetryLogger telemetryLogger, LambdaDeploy payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "lambda_deploy";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("lambdaPackageType", payload.LambdaPackageType);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("regionId", payload.RegionId);

                datum.AddMetadata("initialDeploy", payload.InitialDeploy);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum.AddMetadata("platform", payload.Platform);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deleting a cloudformation stack
        public static void RecordCloudformationDelete(this ITelemetryLogger telemetryLogger, CloudformationDelete payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudformation_delete";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when getting IAM/SecretsManager credentials for a RDS database. Value represents how long it takes in ms.
        public static void RecordRdsGetCredentials(this ITelemetryLogger telemetryLogger, RdsGetCredentials payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_getCredentials";
                datum.Unit = Unit.Milliseconds;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("databaseCredentials", payload.DatabaseCredentials);

                datum.AddMetadata("databaseEngine", payload.DatabaseEngine);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view RDS DB Instances
        public static void RecordRdsOpenInstances(this ITelemetryLogger telemetryLogger, RdsOpenInstances payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_openInstances";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view RDS Security Groups
        public static void RecordRdsOpenSecurityGroups(this ITelemetryLogger telemetryLogger, RdsOpenSecurityGroups payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_openSecurityGroups";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view RDS Subnet Groups
        public static void RecordRdsOpenSubnets(this ITelemetryLogger telemetryLogger, RdsOpenSubnets payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_openSubnets";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when creating a new database connection configuration to for a RDS database. In Datagrip we do not get this infromation if it is created directly, so this is only counts actions.
        public static void RecordRdsCreateConnectionConfiguration(this ITelemetryLogger telemetryLogger, RdsCreateConnectionConfiguration payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "rds_createConnectionConfiguration";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("databaseCredentials", payload.DatabaseCredentials);

                datum.AddMetadata("databaseEngine", payload.DatabaseEngine);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when getting IAM/SecretsManager credentials for a Redshift database. Value represents how long it takes in ms.
        public static void RecordRedshiftGetCredentials(this ITelemetryLogger telemetryLogger, RedshiftGetCredentials payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "redshift_getCredentials";
                datum.Unit = Unit.Milliseconds;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("databaseCredentials", payload.DatabaseCredentials);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when creating a new database connection configuration to for a Redshift database. In Datagrip we do not get this infromation if it is created directly, so this only counts actions.
        public static void RecordRedshiftCreateConnectionConfiguration(this ITelemetryLogger telemetryLogger, RedshiftCreateConnectionConfiguration payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "redshift_createConnectionConfiguration";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("databaseCredentials", payload.DatabaseCredentials);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when deploying a sam application
        public static void RecordSamDeploy(this ITelemetryLogger telemetryLogger, SamDeploy payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sam_deploy";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("version", payload.Version);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when initing a sam application
        public static void RecordSamInit(this ITelemetryLogger telemetryLogger, SamInit payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sam_init";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                datum.AddMetadata("templateName", payload.TemplateName);

                datum.AddMetadata("version", payload.Version);

                if (payload.LambdaPackageType.HasValue)
                {
                    datum.AddMetadata("lambdaPackageType", payload.LambdaPackageType.Value);
                }

                datum.AddMetadata("reason", payload.Reason);

                datum.AddMetadata("eventBridgeSchema", payload.EventBridgeSchema);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when selecting an EventBridge schema to view
        public static void RecordSchemasView(this ITelemetryLogger telemetryLogger, SchemasView payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "schemas_view";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when downloading an EventBridge schema
        public static void RecordSchemasDownload(this ITelemetryLogger telemetryLogger, SchemasDownload payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "schemas_download";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                if (payload.SchemaLanguage.HasValue)
                {
                    datum.AddMetadata("schemaLanguage", payload.SchemaLanguage.Value);
                }

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when searching an EventBridge schema registry
        public static void RecordSchemasSearch(this ITelemetryLogger telemetryLogger, SchemasSearch payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "schemas_search";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when starting the plugin
        public static void RecordSessionStart(this ITelemetryLogger telemetryLogger, SessionStart payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "session_start";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Called when stopping the IDE on a best effort basis
        public static void RecordSessionEnd(this ITelemetryLogger telemetryLogger, SessionEnd payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "session_end";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the bucket name to the clipboard
        public static void RecordS3CopyBucketName(this ITelemetryLogger telemetryLogger, S3CopyBucketName payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_copyBucketName";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the path of a S3 object to the clipboard
        public static void RecordS3CopyPath(this ITelemetryLogger telemetryLogger, S3CopyPath payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_copyPath";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the S3 URI of a S3 object to the clipboard (e.g. s3://<bucketName>/abc.txt)
        public static void RecordS3CopyUri(this ITelemetryLogger telemetryLogger, S3CopyUri payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_copyUri";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Copy the URL of a S3 object to the clipboard
        public static void RecordS3CopyUrl(this ITelemetryLogger telemetryLogger, S3CopyUrl payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_copyUrl";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("presigned", payload.Presigned);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create a S3 bucket
        public static void RecordS3CreateBucket(this ITelemetryLogger telemetryLogger, S3CreateBucket payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_createBucket";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete a S3 bucket
        public static void RecordS3DeleteBucket(this ITelemetryLogger telemetryLogger, S3DeleteBucket payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_deleteBucket";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete a single S3 object
        public static void RecordS3DeleteObject(this ITelemetryLogger telemetryLogger, S3DeleteObject payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_deleteObject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create an S3 folder
        public static void RecordS3CreateFolder(this ITelemetryLogger telemetryLogger, S3CreateFolder payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_createFolder";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Download a single S3 object
        public static void RecordS3DownloadObject(this ITelemetryLogger telemetryLogger, S3DownloadObject payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_downloadObject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Download multiple S3 objects
        public static void RecordS3DownloadObjects(this ITelemetryLogger telemetryLogger, S3DownloadObjects payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_downloadObjects";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Upload a single S3 object
        public static void RecordS3UploadObject(this ITelemetryLogger telemetryLogger, S3UploadObject payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_uploadObject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Rename a single S3 object
        public static void RecordS3RenameObject(this ITelemetryLogger telemetryLogger, S3RenameObject payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_renameObject";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Upload multiple S3 objects
        public static void RecordS3UploadObjects(this ITelemetryLogger telemetryLogger, S3UploadObjects payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_uploadObjects";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a view of a S3 bucket
        public static void RecordS3OpenEditor(this ITelemetryLogger telemetryLogger, S3OpenEditor payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_openEditor";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view S3 bucket properties
        public static void RecordS3OpenBucketProperties(this ITelemetryLogger telemetryLogger, S3OpenBucketProperties payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_openBucketProperties";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view S3 Multipart upload
        public static void RecordS3OpenMultipartUpload(this ITelemetryLogger telemetryLogger, S3OpenMultipartUpload payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "s3_openMultipartUpload";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// The Toolkit has completed initialization
        public static void RecordToolkitInit(this ITelemetryLogger telemetryLogger, ToolkitInit payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "toolkit_init";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("duration", payload.Duration);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open an SQS queue. Initially opens to either the send message pane or poll messages pane.
        public static void RecordSqsOpenQueue(this ITelemetryLogger telemetryLogger, SqsOpenQueue payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_openQueue";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Create a new SQS queue
        public static void RecordSqsCreateQueue(this ITelemetryLogger telemetryLogger, SqsCreateQueue payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_createQueue";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                if (payload.SqsQueueType.HasValue)
                {
                    datum.AddMetadata("sqsQueueType", payload.SqsQueueType.Value);
                }

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Send a message to an SQS queue
        public static void RecordSqsSendMessage(this ITelemetryLogger telemetryLogger, SqsSendMessage payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_sendMessage";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Delete one or more messages from an SQS queue. Value indicates the number of messages that we tried to delete.
        public static void RecordSqsDeleteMessages(this ITelemetryLogger telemetryLogger, SqsDeleteMessages payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_deleteMessages";
                datum.Unit = Unit.Count;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Subscribe the queue to messages from an sns topic
        public static void RecordSqsSubscribeSns(this ITelemetryLogger telemetryLogger, SqsSubscribeSns payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_subscribeSns";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Configure the queue as a trigger for a Lambda
        public static void RecordSqsConfigureLambdaTrigger(this ITelemetryLogger telemetryLogger, SqsConfigureLambdaTrigger payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_configureLambdaTrigger";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Edit the Queue parameters
        public static void RecordSqsEditQueueParameters(this ITelemetryLogger telemetryLogger, SqsEditQueueParameters payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_editQueueParameters";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Purge all messages from the queue
        public static void RecordSqsPurgeQueue(this ITelemetryLogger telemetryLogger, SqsPurgeQueue payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sqs_purgeQueue";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("sqsQueueType", payload.SqsQueueType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view details of SNS Topic
        public static void RecordSnsOpenTopic(this ITelemetryLogger telemetryLogger, SnsOpenTopic payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sns_openTopic";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view SNS Subscriptions
        public static void RecordSnsOpenSubscriptions(this ITelemetryLogger telemetryLogger, SnsOpenSubscriptions payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "sns_openSubscriptions";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view VPC RouteTable
        public static void RecordVpcOpenRouteTables(this ITelemetryLogger telemetryLogger, VpcOpenRouteTables payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "vpc_openRouteTables";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view VPC Internet Gateway
        public static void RecordVpcOpenGateways(this ITelemetryLogger telemetryLogger, VpcOpenGateways payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "vpc_openGateways";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view VPC Network ACLs
        public static void RecordVpcOpenACLs(this ITelemetryLogger telemetryLogger, VpcOpenACLs payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "vpc_openACLs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view VPC Subnets
        public static void RecordVpcOpenSubnets(this ITelemetryLogger telemetryLogger, VpcOpenSubnets payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "vpc_openSubnets";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open a window to view VPC details
        public static void RecordVpcOpenVPCs(this ITelemetryLogger telemetryLogger, VpcOpenVPCs payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "vpc_openVPCs";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Open the insights query editor
        public static void RecordCloudwatchinsightsOpenEditor(this ITelemetryLogger telemetryLogger, CloudwatchinsightsOpenEditor payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchinsights_openEditor";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("insightsDialogOpenSource", payload.InsightsDialogOpenSource);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Start an insights query
        public static void RecordCloudwatchinsightsExecuteQuery(this ITelemetryLogger telemetryLogger, CloudwatchinsightsExecuteQuery payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchinsights_executeQuery";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("insightsQueryTimeType", payload.InsightsQueryTimeType);

                datum.AddMetadata("insightsQueryStringType", payload.InsightsQueryStringType);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Save query parameters to AWS
        public static void RecordCloudwatchinsightsSaveQuery(this ITelemetryLogger telemetryLogger, CloudwatchinsightsSaveQuery payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchinsights_saveQuery";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Retrieve list of available saved queries from AWS
        public static void RecordCloudwatchinsightsRetrieveQuery(this ITelemetryLogger telemetryLogger, CloudwatchinsightsRetrieveQuery payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchinsights_retrieveQuery";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Get all details for the selected log record
        public static void RecordCloudwatchinsightsOpenDetailedLogRecord(this ITelemetryLogger telemetryLogger, CloudwatchinsightsOpenDetailedLogRecord payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "cloudwatchinsights_openDetailedLogRecord";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("result", payload.Result);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// The toolkit tried to retrieve blob data from a url
        public static void RecordToolkitGetExternalResource(this ITelemetryLogger telemetryLogger, ToolkitGetExternalResource payload)
        {
            try
            {
                var metrics = new Metrics();
                if (payload.CreatedOn.HasValue)
                {
                    metrics.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    metrics.CreatedOn = System.DateTime.Now;
                }
                metrics.Data = new List<MetricDatum>();

                var datum = new MetricDatum();
                datum.MetricName = "toolkit_getExternalResource";
                datum.Unit = Unit.None;
                datum.Passive = payload.Passive;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }
                datum.AddMetadata("awsAccount", payload.AwsAccount);
                datum.AddMetadata("awsRegion", payload.AwsRegion);

                datum.AddMetadata("url", payload.Url);

                datum.AddMetadata("result", payload.Result);

                datum.AddMetadata("reason", payload.Reason);

                metrics.Data.Add(datum);
                telemetryLogger.Record(metrics);
            }
            catch (System.Exception e)
            {
                telemetryLogger.Logger.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
    }
    
    /// Metric field type
    /// The result of the operation
    public struct Result
    {
        
        private string _value;
        
        /// Succeeded
        public static readonly Result Succeeded = new Result("Succeeded");
        
        /// Failed
        public static readonly Result Failed = new Result("Failed");
        
        /// Cancelled
        public static readonly Result Cancelled = new Result("Cancelled");
        
        public Result(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The Lambda Package type of the function
    public struct LambdaPackageType
    {
        
        private string _value;
        
        /// Zip
        public static readonly LambdaPackageType Zip = new LambdaPackageType("Zip");
        
        /// Image
        public static readonly LambdaPackageType Image = new LambdaPackageType("Image");
        
        public LambdaPackageType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client.
    public struct ServiceType
    {
        
        private string _value;
        
        /// apigateway
        public static readonly ServiceType Apigateway = new ServiceType("apigateway");
        
        /// beanstalk
        public static readonly ServiceType Beanstalk = new ServiceType("beanstalk");
        
        /// cloudformation
        public static readonly ServiceType Cloudformation = new ServiceType("cloudformation");
        
        /// cloudfront
        public static readonly ServiceType Cloudfront = new ServiceType("cloudfront");
        
        /// dynamodb
        public static readonly ServiceType Dynamodb = new ServiceType("dynamodb");
        
        /// ec2
        public static readonly ServiceType Ec2 = new ServiceType("ec2");
        
        /// ecr
        public static readonly ServiceType Ecr = new ServiceType("ecr");
        
        /// ecs
        public static readonly ServiceType Ecs = new ServiceType("ecs");
        
        /// iam
        public static readonly ServiceType Iam = new ServiceType("iam");
        
        /// lambda
        public static readonly ServiceType Lambda = new ServiceType("lambda");
        
        /// logs
        public static readonly ServiceType Logs = new ServiceType("logs");
        
        /// rds
        public static readonly ServiceType Rds = new ServiceType("rds");
        
        /// redshift
        public static readonly ServiceType Redshift = new ServiceType("redshift");
        
        /// s3
        public static readonly ServiceType S3 = new ServiceType("s3");
        
        /// schemas
        public static readonly ServiceType Schemas = new ServiceType("schemas");
        
        /// sns
        public static readonly ServiceType Sns = new ServiceType("sns");
        
        /// sqs
        public static readonly ServiceType Sqs = new ServiceType("sqs");
        
        /// stepfunctions
        public static readonly ServiceType Stepfunctions = new ServiceType("stepfunctions");
        
        /// vpc
        public static readonly ServiceType Vpc = new ServiceType("vpc");
        
        public ServiceType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The lambda runtime
    public struct Runtime
    {
        
        private string _value;
        
        /// dotnetcore3.1
        public static readonly Runtime Dotnetcore31 = new Runtime("dotnetcore3.1");
        
        /// dotnetcore2.1
        public static readonly Runtime Dotnetcore21 = new Runtime("dotnetcore2.1");
        
        /// dotnet5.0
        public static readonly Runtime Dotnet50 = new Runtime("dotnet5.0");
        
        /// nodejs12.x
        public static readonly Runtime Nodejs12x = new Runtime("nodejs12.x");
        
        /// nodejs10.x
        public static readonly Runtime Nodejs10x = new Runtime("nodejs10.x");
        
        /// nodejs8.10
        public static readonly Runtime Nodejs810 = new Runtime("nodejs8.10");
        
        /// ruby2.5
        public static readonly Runtime Ruby25 = new Runtime("ruby2.5");
        
        /// java8
        public static readonly Runtime Java8 = new Runtime("java8");
        
        /// java8.al2
        public static readonly Runtime Java8al2 = new Runtime("java8.al2");
        
        /// java11
        public static readonly Runtime Java11 = new Runtime("java11");
        
        /// go1.x
        public static readonly Runtime Go1x = new Runtime("go1.x");
        
        /// python3.8
        public static readonly Runtime Python38 = new Runtime("python3.8");
        
        /// python3.7
        public static readonly Runtime Python37 = new Runtime("python3.7");
        
        /// python3.6
        public static readonly Runtime Python36 = new Runtime("python3.6");
        
        /// python2.7
        public static readonly Runtime Python27 = new Runtime("python2.7");
        
        public Runtime(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Languages targeted by the schemas service
    public struct SchemaLanguage
    {
        
        private string _value;
        
        /// Java8
        public static readonly SchemaLanguage Java8 = new SchemaLanguage("Java8");
        
        /// Python36
        public static readonly SchemaLanguage Python36 = new SchemaLanguage("Python36");
        
        /// TypeScript3
        public static readonly SchemaLanguage TypeScript3 = new SchemaLanguage("TypeScript3");
        
        public SchemaLanguage(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The type of credential that was selected
    public struct CredentialType
    {
        
        private string _value;
        
        /// staticProfile
        public static readonly CredentialType StaticProfile = new CredentialType("staticProfile");
        
        /// staticSessionProfile
        public static readonly CredentialType StaticSessionProfile = new CredentialType("staticSessionProfile");
        
        /// credentialProcessProfile
        public static readonly CredentialType CredentialProcessProfile = new CredentialType("credentialProcessProfile");
        
        /// assumeRoleProfile
        public static readonly CredentialType AssumeRoleProfile = new CredentialType("assumeRoleProfile");
        
        /// assumeMfaRoleProfile
        public static readonly CredentialType AssumeMfaRoleProfile = new CredentialType("assumeMfaRoleProfile");
        
        /// ssoProfile
        public static readonly CredentialType SsoProfile = new CredentialType("ssoProfile");
        
        /// envVars
        public static readonly CredentialType EnvVars = new CredentialType("envVars");
        
        /// windowsCredentialStore
        public static readonly CredentialType WindowsCredentialStore = new CredentialType("windowsCredentialStore");
        
        /// ecsMetatdata
        public static readonly CredentialType EcsMetatdata = new CredentialType("ecsMetatdata");
        
        /// ec2Metadata
        public static readonly CredentialType Ec2Metadata = new CredentialType("ec2Metadata");
        
        /// other
        public static readonly CredentialType Other = new CredentialType("other");
        
        public CredentialType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// How the database credentials are being retrieved
    public struct DatabaseCredentials
    {
        
        private string _value;
        
        /// IAM
        public static readonly DatabaseCredentials IAM = new DatabaseCredentials("IAM");
        
        /// SecretsManager
        public static readonly DatabaseCredentials SecretsManager = new DatabaseCredentials("SecretsManager");
        
        public DatabaseCredentials(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// The type of an SQS Queue
    public struct SqsQueueType
    {
        
        private string _value;
        
        /// standard
        public static readonly SqsQueueType Standard = new SqsQueueType("standard");
        
        /// fifo
        public static readonly SqsQueueType Fifo = new SqsQueueType("fifo");
        
        public SqsQueueType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Dialog open trigger source location
    public struct InsightsDialogOpenSource
    {
        
        private string _value;
        
        /// explorer
        public static readonly InsightsDialogOpenSource Explorer = new InsightsDialogOpenSource("explorer");
        
        /// resultsWindow
        public static readonly InsightsDialogOpenSource ResultsWindow = new InsightsDialogOpenSource("resultsWindow");
        
        public InsightsDialogOpenSource(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// User-selected time range type while starting an insights query
    public struct InsightsQueryTimeType
    {
        
        private string _value;
        
        /// relative
        public static readonly InsightsQueryTimeType Relative = new InsightsQueryTimeType("relative");
        
        /// absolute
        public static readonly InsightsQueryTimeType Absolute = new InsightsQueryTimeType("absolute");
        
        public InsightsQueryTimeType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// User-specified search string type while starting an insights query
    public struct InsightsQueryStringType
    {
        
        private string _value;
        
        /// insights
        public static readonly InsightsQueryStringType Insights = new InsightsQueryStringType("insights");
        
        /// searchTerm
        public static readonly InsightsQueryStringType SearchTerm = new InsightsQueryStringType("searchTerm");
        
        public InsightsQueryStringType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Metric field type
    /// Infrastructure type used by ECS tasks and services
    public struct EcsLaunchType
    {
        
        private string _value;
        
        /// ec2
        public static readonly EcsLaunchType Ec2 = new EcsLaunchType("ec2");
        
        /// fargate
        public static readonly EcsLaunchType Fargate = new EcsLaunchType("fargate");
        
        public EcsLaunchType(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Copying an API Gateway remote URL
    public sealed class ApigatewayCopyUrl : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public ApigatewayCopyUrl()
        {
            this.Passive = false;
        }
    }
    
    /// Invoking one simulated API Gateway call using the SAM cli
    public sealed class ApigatewayInvokeLocal : BaseTelemetryEvent
    {
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        /// Optional - Any valid HTTP method (GET/HEAD/etc)
        public string HttpMethod;
        
        /// The result of the operation
        public Result Result;
        
        /// If the action was run in debug mode or not
        public bool Debug;
        
        public ApigatewayInvokeLocal()
        {
            this.Passive = false;
        }
    }
    
    /// Calling a remote API Gateway
    public sealed class ApigatewayInvokeRemote : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - Any valid HTTP method (GET/HEAD/etc)
        public string HttpMethod;
        
        public ApigatewayInvokeRemote()
        {
            this.Passive = false;
        }
    }
    
    /// Called when starting a local API Gateway server simulator with SAM. Only called when starting it for long running testing, not for single invokes
    public sealed class ApigatewayStartLocalServer : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public ApigatewayStartLocalServer()
        {
            this.Passive = false;
        }
    }
    
    /// Copy the ARN of an AWS resource
    public sealed class AwsCopyArn : BaseTelemetryEvent
    {
        
        /// The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client.
        public ServiceType ServiceType;
        
        public AwsCopyArn()
        {
            this.Passive = false;
        }
    }
    
    /// Delete an AWS resource
    public sealed class AwsDeleteResource : BaseTelemetryEvent
    {
        
        /// The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client.
        public ServiceType ServiceType;
        
        /// The result of the operation
        public Result Result;
        
        public AwsDeleteResource()
        {
            this.Passive = false;
        }
    }
    
    /// Select a credentials profile
    public sealed class AwsSetCredentials : BaseTelemetryEvent
    {
        
        /// Optional - The type of credential that was selected
        public CredentialType? CredentialType;
        
        public AwsSetCredentials()
        {
            this.Passive = false;
        }
    }
    
    /// A region change occurred
    public sealed class AwsSetRegion : BaseTelemetryEvent
    {
        
        /// The ID of the region that was selected
        public string RegionId;
        
        public AwsSetRegion()
        {
            this.Passive = false;
        }
    }
    
    /// A partition change occurred
    public sealed class AwsSetPartition : BaseTelemetryEvent
    {
        
        /// The ID of the partition that was selected
        public string PartitionId;
        
        public AwsSetPartition()
        {
            this.Passive = false;
        }
    }
    
    /// Open the credentials file
    public sealed class AwsOpenCredentials : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public AwsOpenCredentials()
        {
            this.Passive = false;
        }
    }
    
    /// Load credentials from a credential source
    public sealed class AwsLoadCredentials : BaseTelemetryEvent
    {
        
        /// The ID of the source of credentials (e.g. profile)
        public string CredentialSourceId;
        
        public AwsLoadCredentials()
        {
            this.Passive = true;
        }
    }
    
    /// Create a new credentials file
    public sealed class AwsCreateCredentials : BaseTelemetryEvent
    {
        
        public AwsCreateCredentials()
        {
            this.Passive = false;
        }
    }
    
    /// Inject selected AWS credentials into a third-party run (e.g. RunConfiguration)
    public sealed class AwsInjectCredentials : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - A free-text field to record runtimes that may be separate from Lambda runtimes
        public string RuntimeString;
        
        public AwsInjectCredentials()
        {
            this.Passive = false;
        }
    }
    
    /// Validate credentials when selecting new credentials
    public sealed class AwsValidateCredentials : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The type of credential that was selected
        public CredentialType? CredentialType;
        
        public AwsValidateCredentials()
        {
            this.Passive = true;
        }
    }
    
    /// Open docs for the extension
    public sealed class AwsHelp : BaseTelemetryEvent
    {
        
        public AwsHelp()
        {
            this.Passive = false;
        }
    }
    
    /// Open the quickstart guide
    public sealed class AwsHelpQuickstart : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public AwsHelpQuickstart()
        {
            this.Passive = true;
        }
    }
    
    /// Open the repo for the extension
    public sealed class AwsShowExtensionSource : BaseTelemetryEvent
    {
        
        public AwsShowExtensionSource()
        {
            this.Passive = false;
        }
    }
    
    /// Refresh the AWS explorer window
    public sealed class AwsRefreshExplorer : BaseTelemetryEvent
    {
        
        public AwsRefreshExplorer()
        {
            this.Passive = false;
        }
    }
    
    /// Report an issue with the plugin
    public sealed class AwsReportPluginIssue : BaseTelemetryEvent
    {
        
        public AwsReportPluginIssue()
        {
            this.Passive = false;
        }
    }
    
    /// Called when deploying an application to Elastic Beanstalk
    public sealed class BeanstalkDeploy : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The ID of the region that was selected
        public string RegionId;
        
        /// Whether or not the deploy targets a new destination (true) or an existing destination (false)
        public bool InitialDeploy;
        
        /// Optional - A generic name metadata
        public string Name;
        
        /// Optional - Application framework being used
        public string Framework;
        
        /// Optional - Whether or not AWS X-Ray is enabled
        public System.Boolean? XrayEnabled;
        
        /// Optional - Whether or not Elastic Beanstalk enhanced health reporting and monitoring is being used
        public System.Boolean? EnhancedHealthEnabled;
        
        public BeanstalkDeploy()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view the status of the Beanstalk Application
    public sealed class BeanstalkOpenApplication : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public BeanstalkOpenApplication()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view the status of the Beanstalk Environment
    public sealed class BeanstalkOpenEnvironment : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public BeanstalkOpenEnvironment()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view the status of the CloudFront Distribution
    public sealed class CloudfrontOpenDistribution : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudfrontOpenDistribution()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view the status of the CloudFront Streaming Distribution
    public sealed class CloudfrontOpenStreamingDistribution : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudfrontOpenStreamingDistribution()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view the Cloudfront Invalidation requests
    public sealed class CloudfrontOpenInvalidationRequest : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudfrontOpenInvalidationRequest()
        {
            this.Passive = false;
        }
    }
    
    /// Open the CloudWatch Logs group window. ServiceType indicates that it was opened from a different service (like directly from an ECS container)
    public sealed class CloudwatchlogsOpenGroup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client.
        public ServiceType? ServiceType;
        
        public CloudwatchlogsOpenGroup()
        {
            this.Passive = false;
        }
    }
    
    /// Open a CloudWatch Logs stream in the window. ServiceType indicates that it was opened from a different service (like directly from an ECS container)
    public sealed class CloudwatchlogsOpenStream : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client.
        public ServiceType? ServiceType;
        
        public CloudwatchlogsOpenStream()
        {
            this.Passive = false;
        }
    }
    
    /// Download a stream to a file on disk. Value indicates the final size of the formatted stream.
    public sealed class CloudwatchlogsDownloadStreamToFile : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsDownloadStreamToFile()
        {
            this.Passive = false;
        }
    }
    
    /// Download a stream to memory then open in an editor.
    public sealed class CloudwatchlogsOpenStreamInEditor : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsOpenStreamInEditor()
        {
            this.Passive = false;
        }
    }
    
    /// Copy the currently open (possibly filtered) messages to an editor
    public sealed class CloudwatchlogsViewCurrentMessagesInEditor : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsViewCurrentMessagesInEditor()
        {
            this.Passive = false;
        }
    }
    
    /// Word wrap events off/on
    public sealed class CloudwatchlogsWrapEvents : BaseTelemetryEvent
    {
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        public CloudwatchlogsWrapEvents()
        {
            this.Passive = false;
        }
    }
    
    /// Tail stream off/on
    public sealed class CloudwatchlogsTailStream : BaseTelemetryEvent
    {
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        public CloudwatchlogsTailStream()
        {
            this.Passive = false;
        }
    }
    
    /// Refresh group is pressed
    public sealed class CloudwatchlogsRefreshGroup : BaseTelemetryEvent
    {
        
        public CloudwatchlogsRefreshGroup()
        {
            this.Passive = false;
        }
    }
    
    /// Refresh stream is pressed
    public sealed class CloudwatchlogsRefreshStream : BaseTelemetryEvent
    {
        
        public CloudwatchlogsRefreshStream()
        {
            this.Passive = false;
        }
    }
    
    /// Called when a stream is searched
    public sealed class CloudwatchlogsSearchStream : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsSearchStream()
        {
            this.Passive = false;
        }
    }
    
    /// Called when a group is searched
    public sealed class CloudwatchlogsSearchGroup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsSearchGroup()
        {
            this.Passive = false;
        }
    }
    
    /// Show event around a time period in ms specified by Value
    public sealed class CloudwatchlogsShowEventsAround : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchlogsShowEventsAround()
        {
            this.Passive = false;
        }
    }
    
    /// Called when deploying a CloudFormation template
    public sealed class CloudformationDeploy : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The ID of the region that was selected
        public string RegionId;
        
        /// Whether or not the deploy targets a new destination (true) or an existing destination (false)
        public bool InitialDeploy;
        
        public CloudformationDeploy()
        {
            this.Passive = false;
        }
    }
    
    /// Open a CloudFormation stack in the stack viewer
    public sealed class CloudformationOpen : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudformationOpen()
        {
            this.Passive = false;
        }
    }
    
    /// A repo is cloned from CodeCommit
    public sealed class CodecommitCloneRepo : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CodecommitCloneRepo()
        {
            this.Passive = false;
        }
    }
    
    /// A repo is created in CodeCommit
    public sealed class CodecommitCreateRepo : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CodecommitCreateRepo()
        {
            this.Passive = false;
        }
    }
    
    /// A connection is established to CodeCommit to perform actions on repos
    public sealed class CodecommitSetCredentials : BaseTelemetryEvent
    {
        
        /// Optional - The type of credential that was selected
        public CredentialType? CredentialType;
        
        public CodecommitSetCredentials()
        {
            this.Passive = true;
        }
    }
    
    /// Open a DynamoDB table in the table browser
    public sealed class DynamodbOpenTable : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public DynamodbOpenTable()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view EC2 Instances
    public sealed class Ec2OpenInstances : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2OpenInstances()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view EC2 AMIs
    public sealed class Ec2OpenAMIs : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2OpenAMIs()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view EC2 Elastic IPs
    public sealed class Ec2OpenElasticIPs : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2OpenElasticIPs()
        {
            this.Passive = false;
        }
    }
    
    /// Open to view EC2 Key pairs
    public sealed class Ec2OpenKeyPairs : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2OpenKeyPairs()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view EC2 Security Groups
    public sealed class Ec2OpenSecurityGroups : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2OpenSecurityGroups()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view EC2 Volumes
    public sealed class Ec2OpenVolumes : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public Ec2OpenVolumes()
        {
            this.Passive = false;
        }
    }
    
    /// Open to view status of an ECS Cluster
    public sealed class EcsOpenCluster : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcsOpenCluster()
        {
            this.Passive = false;
        }
    }
    
    /// Called when the user copies the repository uri from a node
    public sealed class EcrCopyRepositoryUri : BaseTelemetryEvent
    {
        
        public EcrCopyRepositoryUri()
        {
            this.Passive = false;
        }
    }
    
    /// Called when the user copies the repository tag uri from a node. The tag uri is the repository uri + : + the tag name
    public sealed class EcrCopyTagUri : BaseTelemetryEvent
    {
        
        public EcrCopyTagUri()
        {
            this.Passive = false;
        }
    }
    
    /// Called when creating a new ECR repository
    public sealed class EcrCreateRepository : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcrCreateRepository()
        {
            this.Passive = false;
        }
    }
    
    /// Called when deleting an existing ECR repository
    public sealed class EcrDeleteRepository : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcrDeleteRepository()
        {
            this.Passive = false;
        }
    }
    
    /// Called when deleting a tag in an ECR repository. The operation is a batch operation by default, value represents the number of tags deleted.
    public sealed class EcrDeleteTags : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcrDeleteTags()
        {
            this.Passive = false;
        }
    }
    
    /// Called when deploying an image to ECR
    public sealed class EcrDeployImage : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The ID of the region that was selected
        public string RegionId;
        
        public EcrDeployImage()
        {
            this.Passive = false;
        }
    }
    
    /// Called when deploying a scheduled task to an ECS cluster
    public sealed class EcsDeployScheduledTask : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The ID of the region that was selected
        public string RegionId;
        
        /// Infrastructure type used by ECS tasks and services
        public EcsLaunchType EcsLaunchType;
        
        public EcsDeployScheduledTask()
        {
            this.Passive = false;
        }
    }
    
    /// Called when deploying a service to an ECS cluster
    public sealed class EcsDeployService : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The ID of the region that was selected
        public string RegionId;
        
        /// Infrastructure type used by ECS tasks and services
        public EcsLaunchType EcsLaunchType;
        
        public EcsDeployService()
        {
            this.Passive = false;
        }
    }
    
    /// Called when deploying a task to an ECS cluster
    public sealed class EcsDeployTask : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The ID of the region that was selected
        public string RegionId;
        
        /// Infrastructure type used by ECS tasks and services
        public EcsLaunchType EcsLaunchType;
        
        public EcsDeployTask()
        {
            this.Passive = false;
        }
    }
    
    /// Open to view status of an ECS Repository
    public sealed class EcsOpenRepository : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public EcsOpenRepository()
        {
            this.Passive = false;
        }
    }
    
    /// Called while submitting in-IDE feedback
    public sealed class FeedbackResult : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public FeedbackResult()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view/edit IAM Role Policy
    public sealed class IamOpenRole : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public IamOpenRole()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view/edit IAM Group Policy
    public sealed class IamOpenGroup : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public IamOpenGroup()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view/edit IAM User Configuration
    public sealed class IamOpenUser : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public IamOpenUser()
        {
            this.Passive = false;
        }
    }
    
    /// called when deleting lambdas remotely
    public sealed class LambdaDelete : BaseTelemetryEvent
    {
        
        /// The duration of the operation in milliseconds
        public double Duration;
        
        /// The result of the operation
        public Result Result;
        
        public LambdaDelete()
        {
            this.Passive = false;
        }
    }
    
    /// Called when opening the local configuration of a Lambda to edit
    public sealed class LambdaConfigure : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public LambdaConfigure()
        {
            this.Passive = false;
        }
    }
    
    /// Called when creating lambdas remotely
    public sealed class LambdaCreate : BaseTelemetryEvent
    {
        
        /// The lambda runtime
        public Runtime Runtime;
        
        public LambdaCreate()
        {
            this.Passive = false;
        }
    }
    
    /// Jump to a lambda handler from elsewhere
    public sealed class LambdaGoToHandler : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public LambdaGoToHandler()
        {
            this.Passive = false;
        }
    }
    
    /// Called when creating lambdas remotely
    public sealed class LambdaEditFunction : BaseTelemetryEvent
    {
        
        /// Optional - If the operation was an update or not
        public System.Boolean? Update;
        
        /// The Lambda Package type of the function
        public LambdaPackageType LambdaPackageType;
        
        /// The result of the operation
        public Result Result;
        
        public LambdaEditFunction()
        {
            this.Passive = false;
        }
    }
    
    /// Called when invoking lambdas remotely
    public sealed class LambdaInvokeRemote : BaseTelemetryEvent
    {
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        /// The result of the operation
        public Result Result;
        
        public LambdaInvokeRemote()
        {
            this.Passive = false;
        }
    }
    
    /// Called when invoking lambdas locally (with SAM in most toolkits)
    public sealed class LambdaInvokeLocal : BaseTelemetryEvent
    {
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        /// Optional - A generic version metadata
        public string Version;
        
        /// The Lambda Package type of the function
        public LambdaPackageType LambdaPackageType;
        
        /// The result of the operation
        public Result Result;
        
        /// If the action was run in debug mode or not
        public bool Debug;
        
        public LambdaInvokeLocal()
        {
            this.Passive = false;
        }
    }
    
    /// Called when importing a remote Lambda function
    public sealed class LambdaImport : BaseTelemetryEvent
    {
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        /// The result of the operation
        public Result Result;
        
        public LambdaImport()
        {
            this.Passive = false;
        }
    }
    
    /// Called when updating a Lambda function's code outside the context of a SAM template
    public sealed class LambdaUpdateFunctionCode : BaseTelemetryEvent
    {
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        /// The result of the operation
        public Result Result;
        
        public LambdaUpdateFunctionCode()
        {
            this.Passive = false;
        }
    }
    
    /// Called when deploying a Lambda Function
    public sealed class LambdaDeploy : BaseTelemetryEvent
    {
        
        /// The Lambda Package type of the function
        public LambdaPackageType LambdaPackageType;
        
        /// The result of the operation
        public Result Result;
        
        /// The ID of the region that was selected
        public string RegionId;
        
        /// Whether or not the deploy targets a new destination (true) or an existing destination (false)
        public bool InitialDeploy;
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        /// Optional - Language-specific identification. Examples: v4.6.1, netcoreapp3.1, nodejs12.x. Not AWS Lambda specific. Allows for additional details when other fields are opaque, such as the Lambda runtime value 'provided'.
        public string Platform;
        
        public LambdaDeploy()
        {
            this.Passive = false;
        }
    }
    
    /// Called when deleting a cloudformation stack
    public sealed class CloudformationDelete : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudformationDelete()
        {
            this.Passive = false;
        }
    }
    
    /// Called when getting IAM/SecretsManager credentials for a RDS database. Value represents how long it takes in ms.
    public sealed class RdsGetCredentials : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// How the database credentials are being retrieved
        public DatabaseCredentials DatabaseCredentials;
        
        /// The database engine used (mysql/postgres/redshift)
        public string DatabaseEngine;
        
        public RdsGetCredentials()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view RDS DB Instances
    public sealed class RdsOpenInstances : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public RdsOpenInstances()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view RDS Security Groups
    public sealed class RdsOpenSecurityGroups : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public RdsOpenSecurityGroups()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view RDS Subnet Groups
    public sealed class RdsOpenSubnets : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public RdsOpenSubnets()
        {
            this.Passive = false;
        }
    }
    
    /// Called when creating a new database connection configuration to for a RDS database. In Datagrip we do not get this infromation if it is created directly, so this is only counts actions.
    public sealed class RdsCreateConnectionConfiguration : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// How the database credentials are being retrieved
        public DatabaseCredentials DatabaseCredentials;
        
        /// Optional - The database engine used (mysql/postgres/redshift)
        public string DatabaseEngine;
        
        public RdsCreateConnectionConfiguration()
        {
            this.Passive = false;
        }
    }
    
    /// Called when getting IAM/SecretsManager credentials for a Redshift database. Value represents how long it takes in ms.
    public sealed class RedshiftGetCredentials : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// How the database credentials are being retrieved
        public DatabaseCredentials DatabaseCredentials;
        
        public RedshiftGetCredentials()
        {
            this.Passive = false;
        }
    }
    
    /// Called when creating a new database connection configuration to for a Redshift database. In Datagrip we do not get this infromation if it is created directly, so this only counts actions.
    public sealed class RedshiftCreateConnectionConfiguration : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// How the database credentials are being retrieved
        public DatabaseCredentials DatabaseCredentials;
        
        public RedshiftCreateConnectionConfiguration()
        {
            this.Passive = false;
        }
    }
    
    /// Called when deploying a sam application
    public sealed class SamDeploy : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - A generic version metadata
        public string Version;
        
        public SamDeploy()
        {
            this.Passive = false;
        }
    }
    
    /// Called when initing a sam application
    public sealed class SamInit : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
        
        /// Optional - Generic name of a template
        public string TemplateName;
        
        /// Optional - A generic version metadata
        public string Version;
        
        /// Optional - The Lambda Package type of the function
        public LambdaPackageType? LambdaPackageType;
        
        /// Optional - The reason for a metric or exception depending on context
        public string Reason;
        
        /// Optional - The name of the EventBridge Schema used in the operation
        public string EventBridgeSchema;
        
        public SamInit()
        {
            this.Passive = false;
        }
    }
    
    /// Called when selecting an EventBridge schema to view
    public sealed class SchemasView : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public SchemasView()
        {
            this.Passive = false;
        }
    }
    
    /// Called when downloading an EventBridge schema
    public sealed class SchemasDownload : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - Languages targeted by the schemas service
        public SchemaLanguage? SchemaLanguage;
        
        public SchemasDownload()
        {
            this.Passive = false;
        }
    }
    
    /// Called when searching an EventBridge schema registry
    public sealed class SchemasSearch : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public SchemasSearch()
        {
            this.Passive = false;
        }
    }
    
    /// Called when starting the plugin
    public sealed class SessionStart : BaseTelemetryEvent
    {
        
        public SessionStart()
        {
            this.Passive = true;
        }
    }
    
    /// Called when stopping the IDE on a best effort basis
    public sealed class SessionEnd : BaseTelemetryEvent
    {
        
        public SessionEnd()
        {
            this.Passive = true;
        }
    }
    
    /// Copy the bucket name to the clipboard
    public sealed class S3CopyBucketName : BaseTelemetryEvent
    {
        
        public S3CopyBucketName()
        {
            this.Passive = false;
        }
    }
    
    /// Copy the path of a S3 object to the clipboard
    public sealed class S3CopyPath : BaseTelemetryEvent
    {
        
        public S3CopyPath()
        {
            this.Passive = false;
        }
    }
    
    /// Copy the S3 URI of a S3 object to the clipboard (e.g. s3://<bucketName>/abc.txt)
    public sealed class S3CopyUri : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3CopyUri()
        {
            this.Passive = false;
        }
    }
    
    /// Copy the URL of a S3 object to the clipboard
    public sealed class S3CopyUrl : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Whether or not it was a presigned request
        public bool Presigned;
        
        public S3CopyUrl()
        {
            this.Passive = false;
        }
    }
    
    /// Create a S3 bucket
    public sealed class S3CreateBucket : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3CreateBucket()
        {
            this.Passive = false;
        }
    }
    
    /// Delete a S3 bucket
    public sealed class S3DeleteBucket : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3DeleteBucket()
        {
            this.Passive = false;
        }
    }
    
    /// Delete a single S3 object
    public sealed class S3DeleteObject : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3DeleteObject()
        {
            this.Passive = false;
        }
    }
    
    /// Create an S3 folder
    public sealed class S3CreateFolder : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3CreateFolder()
        {
            this.Passive = false;
        }
    }
    
    /// Download a single S3 object
    public sealed class S3DownloadObject : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3DownloadObject()
        {
            this.Passive = false;
        }
    }
    
    /// Download multiple S3 objects
    public sealed class S3DownloadObjects : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3DownloadObjects()
        {
            this.Passive = false;
        }
    }
    
    /// Upload a single S3 object
    public sealed class S3UploadObject : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3UploadObject()
        {
            this.Passive = false;
        }
    }
    
    /// Rename a single S3 object
    public sealed class S3RenameObject : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3RenameObject()
        {
            this.Passive = false;
        }
    }
    
    /// Upload multiple S3 objects
    public sealed class S3UploadObjects : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3UploadObjects()
        {
            this.Passive = false;
        }
    }
    
    /// Open a view of a S3 bucket
    public sealed class S3OpenEditor : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3OpenEditor()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view S3 bucket properties
    public sealed class S3OpenBucketProperties : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3OpenBucketProperties()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view S3 Multipart upload
    public sealed class S3OpenMultipartUpload : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public S3OpenMultipartUpload()
        {
            this.Passive = false;
        }
    }
    
    /// The Toolkit has completed initialization
    public sealed class ToolkitInit : BaseTelemetryEvent
    {
        
        /// The duration of the operation in milliseconds
        public double Duration;
        
        public ToolkitInit()
        {
            this.Passive = true;
        }
    }
    
    /// Open an SQS queue. Initially opens to either the send message pane or poll messages pane.
    public sealed class SqsOpenQueue : BaseTelemetryEvent
    {
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsOpenQueue()
        {
            this.Passive = false;
        }
    }
    
    /// Create a new SQS queue
    public sealed class SqsCreateQueue : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The type of an SQS Queue
        public SqsQueueType? SqsQueueType;
        
        public SqsCreateQueue()
        {
            this.Passive = false;
        }
    }
    
    /// Send a message to an SQS queue
    public sealed class SqsSendMessage : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsSendMessage()
        {
            this.Passive = false;
        }
    }
    
    /// Delete one or more messages from an SQS queue. Value indicates the number of messages that we tried to delete.
    public sealed class SqsDeleteMessages : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsDeleteMessages()
        {
            this.Passive = false;
        }
    }
    
    /// Subscribe the queue to messages from an sns topic
    public sealed class SqsSubscribeSns : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsSubscribeSns()
        {
            this.Passive = false;
        }
    }
    
    /// Configure the queue as a trigger for a Lambda
    public sealed class SqsConfigureLambdaTrigger : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsConfigureLambdaTrigger()
        {
            this.Passive = false;
        }
    }
    
    /// Edit the Queue parameters
    public sealed class SqsEditQueueParameters : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsEditQueueParameters()
        {
            this.Passive = false;
        }
    }
    
    /// Purge all messages from the queue
    public sealed class SqsPurgeQueue : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// The type of an SQS Queue
        public SqsQueueType SqsQueueType;
        
        public SqsPurgeQueue()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view details of SNS Topic
    public sealed class SnsOpenTopic : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public SnsOpenTopic()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view SNS Subscriptions
    public sealed class SnsOpenSubscriptions : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public SnsOpenSubscriptions()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view VPC RouteTable
    public sealed class VpcOpenRouteTables : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public VpcOpenRouteTables()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view VPC Internet Gateway
    public sealed class VpcOpenGateways : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public VpcOpenGateways()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view VPC Network ACLs
    public sealed class VpcOpenACLs : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public VpcOpenACLs()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view VPC Subnets
    public sealed class VpcOpenSubnets : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public VpcOpenSubnets()
        {
            this.Passive = false;
        }
    }
    
    /// Open a window to view VPC details
    public sealed class VpcOpenVPCs : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public VpcOpenVPCs()
        {
            this.Passive = false;
        }
    }
    
    /// Open the insights query editor
    public sealed class CloudwatchinsightsOpenEditor : BaseTelemetryEvent
    {
        
        /// Dialog open trigger source location
        public InsightsDialogOpenSource InsightsDialogOpenSource;
        
        public CloudwatchinsightsOpenEditor()
        {
            this.Passive = false;
        }
    }
    
    /// Start an insights query
    public sealed class CloudwatchinsightsExecuteQuery : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        /// User-selected time range type while starting an insights query
        public InsightsQueryTimeType InsightsQueryTimeType;
        
        /// User-specified search string type while starting an insights query
        public InsightsQueryStringType InsightsQueryStringType;
        
        public CloudwatchinsightsExecuteQuery()
        {
            this.Passive = false;
        }
    }
    
    /// Save query parameters to AWS
    public sealed class CloudwatchinsightsSaveQuery : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchinsightsSaveQuery()
        {
            this.Passive = false;
        }
    }
    
    /// Retrieve list of available saved queries from AWS
    public sealed class CloudwatchinsightsRetrieveQuery : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchinsightsRetrieveQuery()
        {
            this.Passive = false;
        }
    }
    
    /// Get all details for the selected log record
    public sealed class CloudwatchinsightsOpenDetailedLogRecord : BaseTelemetryEvent
    {
        
        /// The result of the operation
        public Result Result;
        
        public CloudwatchinsightsOpenDetailedLogRecord()
        {
            this.Passive = false;
        }
    }
    
    /// The toolkit tried to retrieve blob data from a url
    public sealed class ToolkitGetExternalResource : BaseTelemetryEvent
    {
        
        /// The url associated with a metric
        public string Url;
        
        /// The result of the operation
        public Result Result;
        
        /// Optional - The reason for a metric or exception depending on context
        public string Reason;
        
        public ToolkitGetExternalResource()
        {
            this.Passive = true;
        }
    }
}
