//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using log4net;

/// --------------------------------------------------------------------------------
/// This file is generated from https://github.com/aws/aws-toolkit-common/tree/master/telemetry
/// --------------------------------------------------------------------------------

namespace Test
{
    
    
    /// Contains methods to record telemetry events
    public static class ToolkitTelemetryEvent
    {
        
        private static ILog LOGGER = LogManager.GetLogger(typeof(ToolkitTelemetryEvent));
        
        /// Utility method for generated code to add a metadata to a datum 
        /// Metadata is only added if the value is non-blank
        private static void AddMetadata(this Amazon.ToolkitTelemetry.Model.MetricDatum metricDatum, string key, string value)
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                return;
            }

            var entry = new Amazon.ToolkitTelemetry.Model.MetadataEntry();
            entry.Key = key;
            entry.Value = value;

            metricDatum.Metadata.Add(entry);
        }
        
        /// Utility method for generated code to add a metadata to a datum (object overload)
        /// Metadata is only added if the value is non-blank
        private static void AddMetadata(this Amazon.ToolkitTelemetry.Model.MetricDatum metricDatum, string key, object value)
        {
            if ((value == null))
            {
                return;
            }

            metricDatum.AddMetadata(key, value.ToString());
        }
        
        /// Utility method for generated code to add a metadata to a datum (bool overload)
        /// Metadata is only added if the value is non-blank
        private static void AddMetadata(this Amazon.ToolkitTelemetry.Model.MetricDatum metricDatum, string key, bool value)
        {
            string valueStr = "false";
            if (value)
            {
                valueStr = "true";
            }

            metricDatum.AddMetadata(key, valueStr);
        }
        
        /// Utility method for generated code to add a metadata to a datum (double overload)
        /// Metadata is only added if the value is non-blank
        private static void AddMetadata(this Amazon.ToolkitTelemetry.Model.MetricDatum metricDatum, string key, double value)
        {
            metricDatum.AddMetadata(key, value.ToString(System.Globalization.CultureInfo.InvariantCulture));
        }
        
        /// Utility method for generated code to add a metadata to a datum (int overload)
        /// Metadata is only added if the value is non-blank
        private static void AddMetadata(this Amazon.ToolkitTelemetry.Model.MetricDatum metricDatum, string key, int value)
        {
            metricDatum.AddMetadata(key, value.ToString(System.Globalization.CultureInfo.InvariantCulture));
        }
        
        /// Records Telemetry Event:
        /// Emits milliseconds
        public static void RecordEmitSomeIntMs(this ITelemetryLogger telemetryLogger, EmitSomeIntMs payload)
        {
            try
            {
                var telemetryEvent = new TelemetryEvent();
                if (payload.CreatedOn.HasValue)
                {
                    telemetryEvent.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    telemetryEvent.CreatedOn = System.DateTime.Now;
                }
                telemetryEvent.Data = new List<Amazon.ToolkitTelemetry.Model.MetricDatum>();

                var datum = new Amazon.ToolkitTelemetry.Model.MetricDatum();
                datum.MetricName = "emit_someIntMs";
                datum.Unit = Amazon.ToolkitTelemetry.Unit.Milliseconds;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }

                telemetryEvent.Data.Add(datum);
                telemetryLogger.Record(telemetryEvent);
            }
            catch (System.Exception e)
            {
                LOGGER.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Emits something without a unit defined
        public static void RecordEmitNoUnit(this ITelemetryLogger telemetryLogger, EmitNoUnit payload)
        {
            try
            {
                var telemetryEvent = new TelemetryEvent();
                if (payload.CreatedOn.HasValue)
                {
                    telemetryEvent.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    telemetryEvent.CreatedOn = System.DateTime.Now;
                }
                telemetryEvent.Data = new List<Amazon.ToolkitTelemetry.Model.MetricDatum>();

                var datum = new Amazon.ToolkitTelemetry.Model.MetricDatum();
                datum.MetricName = "emit_noUnit";
                datum.Unit = Amazon.ToolkitTelemetry.Unit.None;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }

                telemetryEvent.Data.Add(datum);
                telemetryLogger.Record(telemetryEvent);
            }
            catch (System.Exception e)
            {
                LOGGER.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Emits a bunch of metadata varieties
        public static void RecordEmitSomeBigBlob(this ITelemetryLogger telemetryLogger, EmitSomeBigBlob payload)
        {
            try
            {
                var telemetryEvent = new TelemetryEvent();
                if (payload.CreatedOn.HasValue)
                {
                    telemetryEvent.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    telemetryEvent.CreatedOn = System.DateTime.Now;
                }
                telemetryEvent.Data = new List<Amazon.ToolkitTelemetry.Model.MetricDatum>();

                var datum = new Amazon.ToolkitTelemetry.Model.MetricDatum();
                datum.MetricName = "emit_someBigBlob";
                datum.Unit = Amazon.ToolkitTelemetry.Unit.Count;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }

                datum.AddMetadata("duration", payload.Duration);

                datum.AddMetadata("attempts", payload.Attempts);

                datum.AddMetadata("enabled", payload.Enabled);

                datum.AddMetadata("name", payload.Name);

                datum.AddMetadata("runtime", payload.Runtime);

                telemetryEvent.Data.Add(datum);
                telemetryLogger.Record(telemetryEvent);
            }
            catch (System.Exception e)
            {
                LOGGER.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Emits a bunch of metadata varieties - required not set
        public static void RecordEmitSomeBigBlob2(this ITelemetryLogger telemetryLogger, EmitSomeBigBlob2 payload)
        {
            try
            {
                var telemetryEvent = new TelemetryEvent();
                if (payload.CreatedOn.HasValue)
                {
                    telemetryEvent.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    telemetryEvent.CreatedOn = System.DateTime.Now;
                }
                telemetryEvent.Data = new List<Amazon.ToolkitTelemetry.Model.MetricDatum>();

                var datum = new Amazon.ToolkitTelemetry.Model.MetricDatum();
                datum.MetricName = "emit_someBigBlob2";
                datum.Unit = Amazon.ToolkitTelemetry.Unit.Count;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }

                datum.AddMetadata("duration", payload.Duration);

                datum.AddMetadata("attempts", payload.Attempts);

                datum.AddMetadata("enabled", payload.Enabled);

                datum.AddMetadata("name", payload.Name);

                datum.AddMetadata("runtime", payload.Runtime);

                telemetryEvent.Data.Add(datum);
                telemetryLogger.Record(telemetryEvent);
            }
            catch (System.Exception e)
            {
                LOGGER.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
        
        /// Records Telemetry Event:
        /// Emits a bunch of optional metadata varieties
        public static void RecordEmitSomeBigOptionalBlob(this ITelemetryLogger telemetryLogger, EmitSomeBigOptionalBlob payload)
        {
            try
            {
                var telemetryEvent = new TelemetryEvent();
                if (payload.CreatedOn.HasValue)
                {
                    telemetryEvent.CreatedOn = payload.CreatedOn.Value;
                }
                else
                {
                    telemetryEvent.CreatedOn = System.DateTime.Now;
                }
                telemetryEvent.Data = new List<Amazon.ToolkitTelemetry.Model.MetricDatum>();

                var datum = new Amazon.ToolkitTelemetry.Model.MetricDatum();
                datum.MetricName = "emit_someBigOptionalBlob";
                datum.Unit = Amazon.ToolkitTelemetry.Unit.Count;
                if (payload.Value.HasValue)
                {
                    datum.Value = payload.Value.Value;
                }
                else
                {
                    datum.Value = 1;
                }

                if (payload.Duration.HasValue)
                {
                    datum.AddMetadata("duration", payload.Duration.Value);
                }

                if (payload.Attempts.HasValue)
                {
                    datum.AddMetadata("attempts", payload.Attempts.Value);
                }

                if (payload.Enabled.HasValue)
                {
                    datum.AddMetadata("enabled", payload.Enabled.Value);
                }

                datum.AddMetadata("name", payload.Name);

                if (payload.Runtime.HasValue)
                {
                    datum.AddMetadata("runtime", payload.Runtime.Value);
                }

                telemetryEvent.Data.Add(datum);
                telemetryLogger.Record(telemetryEvent);
            }
            catch (System.Exception e)
            {
                LOGGER.Error("Error recording telemetry event", e);
                System.Diagnostics.Debug.Assert(false, "Error Recording Telemetry");
            }
        }
    }
    
    public abstract class BaseMetricData
    {
        
        public DateTime? CreatedOn;
        
        public double? Value;
    }
    
    /// Generalized Telemetry information to send to the backend
    /// <seealso cref="ITelemetryLogger"/>
    public sealed class TelemetryEvent
    {
        
        /// Timestamp is applied to all Data entries when sent to server
        public System.DateTime CreatedOn;
        
        public IList<Amazon.ToolkitTelemetry.Model.MetricDatum> Data;
    }
    
    /// Implementations handle sending Telemetry Events to the backend.
    public interface ITelemetryLogger
    {
        
        /// Send Telemetry information
        void Record(TelemetryEvent telemetryEvent);
    }
    
    /// Metric field type
    /// The lambda runtime
    public struct Runtime
    {
        
        private string _value;
        
        /// dotnetcore2.1
        public static readonly Runtime Dotnetcore21 = new Runtime("dotnetcore2.1");
        
        /// java11
        public static readonly Runtime Java11 = new Runtime("java11");
        
        public Runtime(string value)
        {
            this._value = value;
        }
        
        public override string ToString()
        {
            return this._value;
        }
    }
    
    /// Emits milliseconds
    public sealed class EmitSomeIntMs : BaseMetricData
    {
    }
    
    /// Emits something without a unit defined
    public sealed class EmitNoUnit : BaseMetricData
    {
    }
    
    /// Emits a bunch of metadata varieties
    public sealed class EmitSomeBigBlob : BaseMetricData
    {
        
        /// The duration of the operation in milliseconds
        public double Duration;
        
        /// A generic number of attempts
        public int Attempts;
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        /// A generic name metadata
        public string Name;
        
        /// The lambda runtime
        public Runtime Runtime;
    }
    
    /// Emits a bunch of metadata varieties - required not set
    public sealed class EmitSomeBigBlob2 : BaseMetricData
    {
        
        /// The duration of the operation in milliseconds
        public double Duration;
        
        /// A generic number of attempts
        public int Attempts;
        
        /// True if turned on, false if turned off
        public bool Enabled;
        
        /// A generic name metadata
        public string Name;
        
        /// The lambda runtime
        public Runtime Runtime;
    }
    
    /// Emits a bunch of optional metadata varieties
    public sealed class EmitSomeBigOptionalBlob : BaseMetricData
    {
        
        /// Optional - The duration of the operation in milliseconds
        public System.Double? Duration;
        
        /// Optional - A generic number of attempts
        public System.Int32? Attempts;
        
        /// Optional - True if turned on, false if turned off
        public System.Boolean? Enabled;
        
        /// Optional - A generic name metadata
        public string Name;
        
        /// Optional - The lambda runtime
        public Runtime? Runtime;
    }
}
