{
    "types": [
        {
            "name": "duration",
            "type": "double",
            "description": "The duration of the operation in milliseconds"
        },
        {
            "name": "result",
            "allowedValues": ["Succeeded", "Failed", "Cancelled"],
            "description": "The result of the operation"
        },
        {
            "name": "lambdaPackageType",
            "allowedValues": [
                "Zip",
                "Image"
            ],
            "description": "The Lambda Package type of the function"
        },
        {
            "name": "serviceType",
            "allowedValues": [
                "apigateway",
                "beanstalk",
                "cloudformation",
                "cloudfront",
                "dynamodb",
                "ec2",
                "ecr",
                "ecs",
                "iam",
                "lambda",
                "logs",
                "rds",
                "redshift",
                "s3",
                "schemas",
                "sns",
                "sqs",
                "stepfunctions",
                "vpc"
            ],
            "type": "string",
            "description": "The name of the AWS service acted on. These values come from the AWS SDK. To find them in the JAVA SDK search for SERVICE_NAME in each service client."
        },
        {
            "name": "name",
            "type": "string",
            "description": "A generic name metadata"
        },
        {
            "name": "attempts",
            "type": "int",
            "description": "A generic number of attempts"
        },
        {
            "name": "version",
            "type": "string",
            "description": "A generic version metadata"
        },
        {
            "name": "reason",
            "type": "string",
            "description": "The reason for a metric or exception depending on context"
        },
        {
            "name": "eventBridgeSchema",
            "type": "string",
            "description": "The name of the EventBridge Schema used in the operation"
        },
        {
            "name": "runtime",
            "type": "string",
            "allowedValues": [
                "dotnetcore3.1",
                "dotnetcore2.1",
                "dotnet5.0",
                "nodejs12.x",
                "nodejs10.x",
                "nodejs8.10",
                "ruby2.5",
                "java8",
                "java8.al2",
                "java11",
                "go1.x",
                "python3.8",
                "python3.7",
                "python3.6",
                "python2.7"
            ],
            "description": "The lambda runtime"
        },
        {
            "name": "runtimeString",
            "type": "string",
            "description": "A free-text field to record runtimes that may be separate from Lambda runtimes"
        },
        {
            "name": "templateName",
            "type": "string",
            "description": "Generic name of a template"
        },
        {
            "name": "debug",
            "type": "boolean",
            "description": "If the action was run in debug mode or not"
        },
        {
            "name": "httpMethod",
            "type": "string",
            "description": "Any valid HTTP method (GET/HEAD/etc)"
        },
        {
            "name": "oldVersion",
            "type": "string",
            "description": "The old version of something. Useful when updating dependent resources."
        },
        {
            "name": "update",
            "type": "boolean",
            "description": "If the operation was an update or not"
        },
        {
            "name": "schemaLanguage",
            "type": "string",
            "allowedValues": ["Java8", "Python36", "TypeScript3"],
            "description": "Languages targeted by the schemas service"
        },
        {
            "name": "workflowToken",
            "type": "string",
            "description": "A token used for flow metrics to link calls together"
        },
        {
            "name": "enabled",
            "type": "boolean",
            "description": "True if turned on, false if turned off"
        },
        {
            "name": "credentialSourceId",
            "type": "string",
            "description": "The ID of the source of credentials (e.g. profile)"
        },
        {
            "name": "credentialType",
            "type": "string",
            "description": "The type of credential that was selected",
            "allowedValues": [
                "staticProfile",
                "staticSessionProfile",
                "credentialProcessProfile",
                "assumeRoleProfile",
                "assumeMfaRoleProfile",
                "ssoProfile",
                "envVars",
                "windowsCredentialStore",
                "ecsMetatdata",
                "ec2Metadata",
                "other"
            ]
        },
        {
            "name": "regionId",
            "type": "string",
            "description": "The ID of the region that was selected"
        },
        {
            "name": "partitionId",
            "type": "string",
            "description": "The ID of the partition that was selected"
        },
        {
            "name": "initialDeploy",
            "type": "boolean",
            "description": "Whether or not the deploy targets a new destination (true) or an existing destination (false)"
        },
        {
            "name": "framework",
            "type": "string",
            "description": "Application framework being used"
        },
        {
            "name": "xrayEnabled",
            "type": "boolean",
            "description": "Whether or not AWS X-Ray is enabled"
        },
        {
            "name": "enhancedHealthEnabled",
            "type": "boolean",
            "description": "Whether or not Elastic Beanstalk enhanced health reporting and monitoring is being used"
        },
        {
            "name": "databaseEngine",
            "type": "string",
            "description": "The database engine used (mysql/postgres/redshift)"
        },
        {
            "name": "databaseCredentials",
            "type": "string",
            "allowedValues": ["IAM", "SecretsManager"],
            "description": "How the database credentials are being retrieved"
        },
        {
            "name": "sqsQueueType",
            "allowedValues": ["standard", "fifo"],
            "description": "The type of an SQS Queue"
        },
        {
            "name": "presigned",
            "type": "boolean",
            "description": "Whether or not it was a presigned request"
        },
        {
            "name": "platform",
            "type": "string",
            "description": "Language-specific identification. Examples: v4.6.1, netcoreapp3.1, nodejs12.x. Not AWS Lambda specific. Allows for additional details when other fields are opaque, such as the Lambda runtime value 'provided'."
        },
        {
            "name": "insightsDialogOpenSource",
            "allowedValues": ["explorer", "resultsWindow"],
            "description": "Dialog open trigger source location"
        },
        {
            "name": "insightsQueryTimeType",
            "allowedValues": ["relative", "absolute"],
            "description": "User-selected time range type while starting an insights query"
        },
        {
            "name": "insightsQueryStringType",
            "allowedValues": ["insights", "searchTerm"],
            "description": "User-specified search string type while starting an insights query"
        },
        {
            "name": "ecsLaunchType",
            "allowedValues": ["ec2", "fargate"],
            "description": "Infrastructure type used by ECS tasks and services"
        }
    ],
    "metrics": [
        {
            "name": "apigateway_copyUrl",
            "description": "Copying an API Gateway remote URL",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "apigateway_invokeLocal",
            "description": "Invoking one simulated API Gateway call using the SAM cli",
            "metadata": [
                { "type": "runtime", "required": false },
                { "type": "httpMethod", "required": false },
                { "type": "result" },
                { "type": "debug" }
            ]
        },
        {
            "name": "apigateway_invokeRemote",
            "description": "Calling a remote API Gateway",
            "metadata": [{ "type": "result" }, { "type": "httpMethod", "required": false }]
        },
        {
            "name": "apigateway_startLocalServer",
            "description": "Called when starting a local API Gateway server simulator with SAM. Only called when starting it for long running testing, not for single invokes",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "aws_copyArn",
            "description": "Copy the ARN of an AWS resource",
            "metadata": [{ "type": "serviceType" }]
        },
        {
            "name": "aws_deleteResource",
            "description": "Delete an AWS resource",
            "metadata": [{ "type": "serviceType" }, { "type": "result" }]
        },
        {
            "name": "aws_setCredentials",
            "description": "Select a credentials profile",
            "metadata": [{ "type": "credentialType", "required": false }]
        },
        {
            "name": "aws_setRegion",
            "description": "A region change occurred",
            "metadata": [{ "type": "regionId" }]
        },
        {
            "name": "aws_setPartition",
            "description": "A partition change occurred",
            "metadata": [{ "type": "partitionId" }]
        },
        {
            "name": "aws_openCredentials",
            "description": "Open the credentials file",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "aws_loadCredentials",
            "description": "Load credentials from a credential source",
            "unit": "Count",
            "metadata": [{ "type": "credentialSourceId" }],
            "passive": true
        },
        {
            "name": "aws_createCredentials",
            "description": "Create a new credentials file"
        },
        {
            "name": "aws_injectCredentials",
            "description": "Inject selected AWS credentials into a third-party run (e.g. RunConfiguration)",
            "metadata": [{ "type": "result" }, { "type": "runtimeString", "required": false }]
        },
        {
            "name": "aws_validateCredentials",
            "description": "Validate credentials when selecting new credentials",
            "metadata": [{ "type": "result" }, { "type": "credentialType", "required": false }],
            "passive": true
        },
        {
            "name": "aws_help",
            "description": "Open docs for the extension"
        },
        {
            "name": "aws_helpQuickstart",
            "description": "Open the quickstart guide",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "aws_showExtensionSource",
            "description": "Open the repo for the extension"
        },
        {
            "name": "aws_refreshExplorer",
            "description": "Refresh the AWS explorer window"
        },
        {
            "name": "aws_reportPluginIssue",
            "description": "Report an issue with the plugin"
        },
        {
            "name": "beanstalk_deploy",
            "description": "Called when deploying an application to Elastic Beanstalk",
            "metadata": [
                { "type": "result" },
                { "type": "regionId" },
                { "type": "initialDeploy" },
                { "type": "name", "required": false },
                { "type": "framework", "required": false },
                { "type": "xrayEnabled", "required": false },
                { "type": "enhancedHealthEnabled", "required": false }
            ]
        },
        {
            "name": "beanstalk_openApplication",
            "description": "Open a window to view the status of the Beanstalk Application",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "beanstalk_openEnvironment",
            "description": "Open a window to view the status of the Beanstalk Environment",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "cloudfront_openDistribution",
            "description": "Open a window to view the status of the CloudFront Distribution",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "cloudfront_openStreamingDistribution",
            "description": "Open a window to view the status of the CloudFront Streaming Distribution",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "cloudfront_openInvalidationRequest",
            "description": "Open a window to view the Cloudfront Invalidation requests",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "cloudwatchlogs_openGroup",
            "description": "Open the CloudWatch Logs group window. ServiceType indicates that it was opened from a different service (like directly from an ECS container)",
            "metadata": [{ "type": "result" }, { "type": "serviceType", "required": false }]
        },
        {
            "name": "cloudwatchlogs_openStream",
            "description": "Open a CloudWatch Logs stream in the window. ServiceType indicates that it was opened from a different service (like directly from an ECS container)",
            "metadata": [{ "type": "result" }, { "type": "serviceType", "required": false }]
        },
        {
            "name": "cloudwatchlogs_downloadStreamToFile",
            "unit": "Bytes",
            "description": "Download a stream to a file on disk. Value indicates the final size of the formatted stream.",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "cloudwatchlogs_openStreamInEditor",
            "description": "Download a stream to memory then open in an editor.",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "cloudwatchlogs_viewCurrentMessagesInEditor",
            "description": "Copy the currently open (possibly filtered) messages to an editor",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "cloudwatchlogs_wrapEvents",
            "description": "Word wrap events off/on",
            "metadata": [{ "type": "enabled" }]
        },
        {
            "name": "cloudwatchlogs_tailStream",
            "description": "Tail stream off/on",
            "metadata": [{ "type": "enabled" }]
        },
        {
            "name": "cloudwatchlogs_refreshGroup",
            "description": "Refresh group is pressed"
        },
        {
            "name": "cloudwatchlogs_refreshStream",
            "description": "Refresh stream is pressed"
        },
        {
            "name": "cloudwatchlogs_searchStream",
            "description": "Called when a stream is searched",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "cloudwatchlogs_searchGroup",
            "description": "Called when a group is searched",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "cloudwatchlogs_showEventsAround",
            "description": "Show event around a time period in ms specified by Value",
            "unit": "Milliseconds",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "cloudformation_deploy",
            "description": "Called when deploying a CloudFormation template",
            "metadata": [{ "type": "result" }, { "type": "regionId" }, { "type": "initialDeploy" }]
        },
        {
            "name": "cloudformation_open",
            "description": "Open a CloudFormation stack in the stack viewer",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "dynamodb_openTable",
            "description": "Open a DynamoDB table in the table browser",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "ec2_openInstances",
            "description": "Open a window to view EC2 Instances",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "ec2_openAMIs",
            "description": "Open a window to view EC2 AMIs",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "ec2_openElasticIPs",
            "description": "Open a window to view EC2 Elastic IPs",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "ec2_openKeyPairs",
            "description": "Open to view EC2 Key pairs",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "ec2_openSecurityGroups",
            "description": "Open a window to view EC2 Security Groups",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "ec2_openVolumes",
            "description": "Open a window to view EC2 Volumes",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "ecs_openCluster",
            "description": "Open to view status of an ECS Cluster",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "ecr_copyRepositoryUri",
            "description": "Called when the user copies the repository uri from a node"
        },
        {
            "name": "ecr_copyTagUri",
            "description": "Called when the user copies the repository tag uri from a node. The tag uri is the repository uri + : + the tag name"
        },
        {
            "name": "ecr_createRepository",
            "description": "Called when creating a new ECR repository",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "ecr_deleteRepository",
            "description": "Called when deleting an existing ECR repository",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "ecr_deleteTags",
            "unit": "Count",
            "description": "Called when deleting a tag in an ECR repository. The operation is a batch operation by default, value represents the number of tags deleted.",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "ecr_deployImage",
            "description": "Called when deploying an image to ECR",
            "metadata": [{ "type": "result" }, { "type": "regionId" }]
        },
        {
            "name": "ecs_deployScheduledTask",
            "description": "Called when deploying a scheduled task to an ECS cluster",
            "metadata": [{ "type": "result" }, { "type": "regionId" }, { "type": "ecsLaunchType" }]
        },
        {
            "name": "ecs_deployService",
            "description": "Called when deploying a service to an ECS cluster",
            "metadata": [{ "type": "result" }, { "type": "regionId" }, { "type": "ecsLaunchType" }]
        },
        {
            "name": "ecs_deployTask",
            "description": "Called when deploying a task to an ECS cluster",
            "metadata": [{ "type": "result" }, { "type": "regionId" }, { "type": "ecsLaunchType" }]
        },
        {
            "name": "ecs_openRepository",
            "description": "Open to view status of an ECS Repository",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "feedback_result",
            "description": "Called while submitting in-IDE feedback",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "iam_openRole",
            "description": "Open a window to view/edit IAM Role Policy",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "iam_openGroup",
            "description": "Open a window to view/edit IAM Group Policy",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "iam_openUser",
            "description": "Open a window to view/edit IAM User Configuration",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "lambda_delete",
            "description": "called when deleting lambdas remotely",
            "unit": "None",
            "metadata": [{ "type": "duration" }, { "type": "result" }]
        },
        {
            "name": "lambda_configure",
            "description": "Called when opening the local configuration of a Lambda to edit",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "lambda_create",
            "description": "Called when creating lambdas remotely",
            "metadata": [{ "type": "runtime" }]
        },
        {
            "name": "lambda_goToHandler",
            "description": "Jump to a lambda handler from elsewhere",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "lambda_editFunction",
            "description": "Called when creating lambdas remotely",
            "metadata": [{ "type": "update", "required": false }, {"type": "lambdaPackageType"}, { "type": "result" }]
        },
        {
            "name": "lambda_invokeRemote",
            "description": "Called when invoking lambdas remotely",
            "metadata": [{ "type": "runtime", "required": false }, { "type": "result" }]
        },
        {
            "name": "lambda_invokeLocal",
            "description": "Called when invoking lambdas locally (with SAM in most toolkits)",
            "metadata": [{ "type": "runtime", "required": false }, {"type": "lambdaPackageType"}, { "type": "result" }, { "type": "debug" }]
        },
        {
            "name": "lambda_import",
            "description": "Called when importing a remote Lambda function",
            "metadata": [{ "type": "runtime", "required": false }, { "type": "result" }]
        },
        {
            "name": "lambda_updateFunctionCode",
            "description": "Called when updating a Lambda function's code outside the context of a SAM template",
            "metadata": [{ "type": "runtime", "required": false }, { "type": "result" }]
        },
        {
            "name": "lambda_deploy",
            "description": "Called when deploying a Lambda Function",
            "metadata": [
                { "type": "lambdaPackageType" },
                { "type": "result" },
                { "type": "regionId" },
                { "type": "initialDeploy" },
                { "type": "runtime", "required": false },
                { "type": "platform", "required": false }
            ]
        },
        {
            "name": "cloudformation_delete",
            "description": "Called when deleting a cloudformation stack",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "rds_getCredentials",
            "description": "Called when getting IAM/SecretsManager credentials for a RDS database. Value represents how long it takes in ms.",
            "unit": "Milliseconds",
            "metadata": [{ "type": "result" }, { "type": "databaseCredentials" }, { "type": "databaseEngine" }]
        },
        {
            "name": "rds_openInstances",
            "description": "Open a window to view RDS DB Instances",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "rds_openSecurityGroups",
            "description": "Open a window to view RDS Security Groups",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "rds_openSubnets",
            "description": "Open a window to view RDS Subnet Groups",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "rds_createConnectionConfiguration",
            "description": "Called when creating a new database connection configuration to for a RDS database. In Datagrip we do not get this infromation if it is created directly, so this is only counts actions.",
            "metadata": [
                { "type": "result" },
                { "type": "databaseCredentials" },
                { "type": "databaseEngine", "required": false }
            ]
        },
        {
            "name": "redshift_getCredentials",
            "description": "Called when getting IAM/SecretsManager credentials for a Redshift database. Value represents how long it takes in ms.",
            "unit": "Milliseconds",
            "metadata": [{ "type": "result" }, { "type": "databaseCredentials" }]
        },
        {
            "name": "redshift_createConnectionConfiguration",
            "description": "Called when creating a new database connection configuration to for a Redshift database. In Datagrip we do not get this infromation if it is created directly, so this only counts actions.",
            "metadata": [{ "type": "result" }, { "type": "databaseCredentials" }]
        },
        {
            "name": "sam_deploy",
            "description": "Called when deploying a sam application",
            "metadata": [{ "type": "result" }, { "type": "version", "required": false }]
        },
        {
            "name": "sam_init",
            "description": "Called when initing a sam application",
            "metadata": [
                { "type": "result" },
                { "type": "name", "required": false },
                { "type": "runtime", "required": false },
                { "type": "templateName", "required": false },
                { "type": "version", "required": false },
                { "type": "lambdaPackageType", "required": false },
                { "type": "reason", "required": false },
                { "type": "eventBridgeSchema", "required": false }
            ]
        },
        {
            "name": "schemas_view",
            "description": "Called when selecting an EventBridge schema to view",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "schemas_download",
            "description": "Called when downloading an EventBridge schema",
            "metadata": [{ "type": "result" }, { "type": "schemaLanguage", "required": false }]
        },
        {
            "name": "schemas_search",
            "description": "Called when searching an EventBridge schema registry",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "session_start",
            "description": "Called when starting the plugin",
            "passive": true
        },
        {
            "name": "session_end",
            "description": "Called when stopping the IDE on a best effort basis",
            "passive": true
        },
        {
            "name": "s3_copyBucketName",
            "description": "Copy the bucket name to the clipboard"
        },
        {
            "name": "s3_copyPath",
            "description": "Copy the path of a S3 object to the clipboard"
        },
        {
            "name": "s3_copyUrl",
            "description": "Copy the URL of a S3 object to the clipboard",
            "metadata": [{ "type": "result" }, { "type": "presigned" }]
        },
        {
            "name": "s3_createBucket",
            "description": "Create a S3 bucket",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "s3_deleteBucket",
            "description": "Delete a S3 bucket",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "s3_deleteObject",
            "description": "Delete a single S3 object",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "s3_createFolder",
            "description": "Create an S3 folder",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "s3_downloadObject",
            "description": "Download a single S3 object",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "s3_downloadObjects",
            "description": "Download multiple S3 objects",
            "unit": "Count",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "s3_uploadObject",
            "description": "Upload a single S3 object",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "s3_renameObject",
            "description": "Rename a single S3 object",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "s3_uploadObjects",
            "description": "Upload multiple S3 objects",
            "unit": "Count",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "s3_openEditor",
            "description": "Open a view of a S3 bucket",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "s3_openBucketProperties",
            "description": "Open a window to view S3 bucket properties",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "s3_openMultipartUpload",
            "description": "Open a window to view S3 Multipart upload",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "toolkit_init",
            "description": "The Toolkit has completed initialization",
            "metadata": [{ "type": "duration" }],
            "passive": true
        },
        {
            "name": "sqs_openQueue",
            "description": "Open an SQS queue. Initially opens to either the send message pane or poll messages pane.",
            "metadata": [{ "type": "sqsQueueType" }]
        },
        {
            "name": "sqs_createQueue",
            "description": "Create a new SQS queue",
            "metadata": [{ "type": "result" }, { "type": "sqsQueueType", "required": false }]
        },
        {
            "name": "sqs_sendMessage",
            "description": "Send a message to an SQS queue",
            "metadata": [{ "type": "result" }, { "type": "sqsQueueType" }]
        },
        {
            "name": "sqs_deleteMessages",
            "description": "Delete one or more messages from an SQS queue. Value indicates the number of messages that we tried to delete.",
            "unit": "Count",
            "metadata": [{ "type": "result" }, { "type": "sqsQueueType" }]
        },
        {
            "name": "sqs_subscribeSns",
            "description": "Subscribe the queue to messages from an sns topic",
            "metadata": [{ "type": "result" }, { "type": "sqsQueueType" }]
        },
        {
            "name": "sqs_configureLambdaTrigger",
            "description": "Configure the queue as a trigger for a Lambda",
            "metadata": [{ "type": "result" }, { "type": "sqsQueueType" }]
        },
        {
            "name": "sqs_editQueueParameters",
            "description": "Edit the Queue parameters",
            "metadata": [{ "type": "result" }, { "type": "sqsQueueType" }]
        },
        {
            "name": "sqs_purgeQueue",
            "description": "Purge all messages from the queue",
            "metadata": [{ "type": "result" }, { "type": "sqsQueueType" }]
        },
        {
            "name": "sns_openTopic",
            "description": "Open a window to view details of SNS Topic",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "sns_openSubscriptions",
            "description": "Open a window to view SNS Subscriptions",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "vpc_openRouteTables",
            "description": "Open a window to view VPC RouteTable",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "vpc_openGateways",
            "description": "Open a window to view VPC Internet Gateway",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "vpc_openACLs",
            "description": "Open a window to view VPC Network ACLs",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "vpc_openSubnets",
            "description": "Open a window to view VPC Subnets",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "vpc_openVPCs",
            "description": "Open a window to view VPC details",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "cloudwatchinsights_openEditor",
            "description": "Open the insights query editor",
            "metadata": [{ "type": "insightsDialogOpenSource" }]
        },
        {
            "name": "cloudwatchinsights_executeQuery",
            "description": "Start an insights query",
            "metadata": [
                { "type": "result" },
                { "type": "insightsQueryTimeType" },
                { "type": "insightsQueryStringType" }
            ]
        },
        {
            "name": "cloudwatchinsights_saveQuery",
            "description": "Save query parameters to AWS",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "cloudwatchinsights_retrieveQuery",
            "description": "Retrieve list of available saved queries from AWS",
            "metadata": [{ "type": "result" }]
        },
        {
            "name": "cloudwatchinsights_openDetailedLogRecord",
            "description": "Get all details for the selected log record",
            "metadata": [{ "type": "result" }]
        }
    ]
}
