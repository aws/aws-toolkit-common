/*!
 * Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
export interface MetricBase {
    /** The result of the operation */
    readonly result: Result
    /** The duration of the operation in miliseconds */
    readonly duration: number
    /** A flag indicating that the metric was not caused by the user. */
    readonly passive: boolean
}

export interface LambdaDelete extends MetricBase {
    /** a test boolean type */
    readonly booltype: boolean
}

export interface LambdaCreate extends MetricBase {
    /** The lambda runtime */
    readonly lambdaRuntime: LambdaRuntime
    /** untyped string type */
    readonly arbitraryString: string
}

export interface LambdaRemoteinvoke extends MetricBase {
    /** The lambda runtime */
    readonly lambdaRuntime?: LambdaRuntime
    /** a test int type */
    readonly inttype: number
}

export interface NoMetadata extends MetricBase {}

export interface PassivePassive extends MetricBase {}

export type Result = 'Succeeded'
export type LambdaRuntime = 'dotnetcore2.1' | 'nodejs12.x'

export interface MetricDefinition {
    readonly passive: boolean
    readonly requiredMetadata: readonly string[]
}

export abstract class Metric<T extends MetricBase = MetricBase> {
    protected readonly state: Record<string, unknown> = {}

    public constructor(public readonly name: string, public readonly definition: MetricDefinition) {}

    public record(data: Partial<T>): this {
        Object.assign(this.state, data)
        return this
    }

    public abstract submit(): void
}

export class Telemetry {
    private constructor(protected readonly getMetric: (name: string, definition: MetricDefinition) => Metric) {}

    /** called when deleting lambdas remotely */
    public usingLambdaDelete(): Metric<LambdaDelete> {
        return this.getMetric('lambda_delete', { passive: false, requiredMetadata: ['booltype'] })
    }

    /** called when creating lambdas remotely */
    public usingLambdaCreate(): Metric<LambdaCreate> {
        return this.getMetric('lambda_create', {
            passive: false,
            requiredMetadata: ['lambdaRuntime', 'arbitraryString'],
        })
    }

    /** called when invoking lambdas remotely */
    public usingLambdaRemoteinvoke(): Metric<LambdaRemoteinvoke> {
        return this.getMetric('lambda_remoteinvoke', { passive: false, requiredMetadata: ['inttype'] })
    }

    /** called when invoking lambdas remotely */
    public usingNoMetadata(): Metric<NoMetadata> {
        return this.getMetric('no_metadata', { passive: false, requiredMetadata: [] })
    }

    /** a passive metric */
    public usingPassivePassive(): Metric<PassivePassive> {
        return this.getMetric('passive_passive', { passive: true, requiredMetadata: [] })
    }
}

export interface MetricShapes {
    readonly lambda_delete: LambdaDelete
    readonly lambda_create: LambdaCreate
    readonly lambda_remoteinvoke: LambdaRemoteinvoke
    readonly no_metadata: NoMetadata
    readonly passive_passive: PassivePassive
}

export type MetricName = keyof MetricShapes
